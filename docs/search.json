[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Numerical Analysis",
    "section": "",
    "text": "Introduction\nMathematics is not just an abstract pursuit; it is an essential tool that powers a vast array of applications. From weather forecasting to black hole simulations, from urban planning to medical research, the application of mathematics has become indispensable. Central to this applied force is Numerical Analysis.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#what-is-numerical-analysis",
    "href": "index.html#what-is-numerical-analysis",
    "title": "Numerical Analysis",
    "section": "What Is Numerical Analysis?",
    "text": "What Is Numerical Analysis?\nNumerical Analysis is the discipline that bridges continuous mathematical theories with their concrete implementation on digital computers. These computers, by design, work with discrete quantities, and translating continuous problems into this discrete realm is not always straightforward.\nIn this module, we will explore the key techniques, algorithms, and principles of Numerical Analysis that enable us to translate mathematical problems into computational solutions. We will delve into the challenges that arise in this translation, the strategies to overcome them, and the interaction of theory and practice.\nMany mathematical problems cannot be solved analytically in closed form. In Numerical Analysis, we aim to find approximation algorithms for mathematical problems, i.e., schemes that allow us to compute the solution approximately. These algorithms use only elementary operations (\\(+,-,\\times,/\\)) but often a long sequence of them, so that in practice they need to be run on computers.to\n\nExample from Algebra\nSolve the equation \\(\\log(x) = \\sin(x)\\) for \\(x\\) in the interval \\(x \\in (0,\\pi)\\). Stop and think about all of the algebra that you ever learned. you will quickly realize that there are no by-hand techniques that can solve this problem! A numerical approximation, however, is not so hard to come by. The following graph shows that there is a unique solution to this equation in the interval \\((0,\\pi)\\).\n\n\nCode\n# plot the function cos(x) and the line y=x\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(1, 4, 100)\nplt.plot(x, np.log(x), label=\"log(x)\")\nplt.plot(x, np.sin(x), label=\"sin(x)\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: The functions \\(\\log(x)\\) and \\(\\sin(x)\\) intersect at exactly one point, giving the solution to the equation \\(\\log(x) = \\sin(x)\\).\n\n\n\n\n\n\n\nExample from Calculus\nWhat if we want to evaluate\n\\[\n    \\int_0^\\pi \\sin(x^2) dx?\n\\]\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef f(x):\n    return np.sin(x**2)\n\na = 0\nb = np.pi\nn = 1000  # Number of points for numerical integration\n\nx = np.linspace(a, b, n)\ny = f(x)\n\n# Calculate the numerical integral using the trapezoidal rule\nintegral = np.trapz(y, x)\n\n# Shade the positive and negative regions differently\nplt.fill_between(x, y, where=y&gt;=0, color='green', alpha=0.5, label=\"Positive\")\nplt.fill_between(x, y, where=y&lt;0, color='red', alpha=0.5, label=\"Negative\")\n\n# Plot the curve\nplt.plot(x, y, color='black', label=r\"sin(x^2)\")\n\n# Set labels and title\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.title(\"Integral of sin(x^2) from 0 to pi\")\n\n# Add legend\nplt.legend()\n\n# Show the plot\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 2: Visual representation of the integral of \\(\\sin(x^2)\\) from \\(0\\) to \\(\\pi\\).\n\n\n\n\n\nAgain, trying to use any of the possible techniques for using the Fundamental Theorem of Calculus, and hence finding an antiderivative, on the function \\(\\sin(x^2)\\) is completely hopeless. Substitution, integration by parts, and all of the other techniques that you know will all fail. Again, a numerical approximation is not so difficult and is very fast and gives the value\n\n\nCode\n# Use Simpson's rule to approximate the integral of sin(x^2) from 0 to pi\nfrom scipy.integrate import simpson\nsimpson(y, x = x)\n\n\n0.7726517345959694\n\n\nBy the way, this integral (called the Fresnel Sine Integral) actually shows up naturally in the field of optics and electromagnetism, so it is not just some arbitrary integral that I cooked up just for fun.\n\n\nExample from Linear Algebra\nYou have probably never row reduced a matrix larger than \\(3\\times 3\\) or perhaps \\(4 \\times 4\\) by hand. Instead, you often turn to technology to do the row reduction for you. You would be surprised to find that the standard row reduction algorithm (RREF) that you do by hand is not what a computer uses. Instead, there are efficient algorithms to do the basic operations of linear algebra (e.g. Gaussian elimination, matrix factorization, or eigenvalue decomposition)\n\n\nExample from Differential Equations\nSay we needed to solve the differential equation\n\\[\\frac{dy}{dt} = \\sin(y^2) + t.\\]\nThe nonlinear nature of the problem precludes us from using most of the typical techniques (e.g. separation of variables, undetermined coefficients, Laplace Transforms, etc). However, computational methods that result in a plot of an approximate solution can be made very quickly and likely give enough of a solution to be usable. Here is a plot of the solution up to time \\(t=2.5\\) with initial condition \\(y(0)=0.1\\):\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef f(t, y):\n    return np.sin(y**2) + t\n\n# Initial condition\ny0 = 0.1\n\n# Time span for the solution\nt_span = (0, 2.5)\n\n# Solve the differential equation using SciPy's solver\nsol = solve_ivp(f, t_span, [y0], max_step=0.1, dense_output=True)\n\n# Extract the time values and solution\nt = sol.t\ny = sol.sol(t)[0]  \n\n# Plot the numerical solution\nplt.plot(t, y)\n\n# Labels and title\nplt.xlabel('t')\nplt.ylabel('y')\n\n# Show the plot\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 3: Plot of numerical solution of \\(dy/dt=\\sin(y^2)+t\\) with \\(y(0)=0.1\\).\n\n\n\n\n\nThis was an artificial example, but differential equations are central to modelling the real world in order to predict the future. They are the closest thing we have to a crystal ball. Here is a plot of a numerical solution of the SIR model of the evolution of an epidemic over time:\n\n\nCode\nimport numpy as np\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\n\n# SIR model differential equations\ndef sir_model(y, t, N, beta, gamma):\n    S, I, R = y\n    dSdt = -beta * S * I / N\n    dIdt = beta * S * I / N - gamma * I\n    dRdt = gamma * I\n    return dSdt, dIdt, dRdt\n\n# Total population, N\nN = 1000\n# Initial number of infected and recovered individuals\nI0, R0 = 1, 0\n# Everyone else is susceptible to infection initially\nS0 = N - I0 - R0\n# Contact rate, beta, and mean recovery rate, gamma, (in 1/days)\nbeta, gamma = 0.25, 1./20 \n# A grid of time points (in days)\nt = np.linspace(0, 160, 160)\n\n# Initial conditions vector\ny0 = S0, I0, R0\n# Integrate the SIR equations over the time grid, t\nret = odeint(sir_model, y0, t, args=(N, beta, gamma))\nS, I, R = ret.T\n\n# Plot the data on three separate curves for S(t), I(t) and R(t)\nplt.figure(figsize=(10,6))\nplt.plot(t, S, 'b', alpha=0.7, linewidth=2, label='Susceptible')\nplt.plot(t, I, 'y', alpha=0.7, linewidth=2, label='Infected')\nplt.plot(t, R, 'g', alpha=0.7, linewidth=2, label='Recovered')\nplt.xlabel('Time /days')\nplt.ylabel('Number (1000s)')\nplt.ylim(0, N)\nplt.title('SIR Model Simulation')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 4: Plot of a numerical solution of the SIR model\n\n\n\n\n\n\n\nReasons to study Numerical Analysis\nSo why should you want to venture into Numerical Analysis rather than just use the computer as a black box?\n\nPrecision and Stability: Computers, despite their power, can introduce significant errors if mathematical problems are implemented without care. Numerical Analysis offers techniques to ensure we obtain results that are both accurate and stable.\nEfficiency: Real-world applications often demand not just correctness, but efficiency. By grasping the methods of Numerical Analysis, we can design algorithms that are both accurate and resource-efficient.\nBroad Applications: Whether your interest lies in physics, engineering, biology, finance, or many other scientific fields, Numerical Analysis provides the computational tools to tackle complex problems in these areas.\nBasis for Modern Technologies: Core principles of Numerical Analysis are foundational in emerging fields such as artificial intelligence, quantum computing, and data science.\n\nThe prerequisites for this material include a firm understanding of single variable calculus (though multivariable calculus does not hurt), a good understanding of the basics of linear algebra, a good understanding of the basics of differential equations, and some exposure to scientific computing.\nBy the end, you will not merely understand the methods of Numerical Analysis; you will be equipped to apply them efficiently and effectively in diverse scenarios: you will be able to tackle problems in physics, engineering, biology, finance, and many other fields; you will be able to design algorithms that are both accurate and resource-efficient; you will be able to ensure that your computational solutions are both accurate and stable; you will be able to leverage the power of computers to solve complex problems.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#the-inquiry-based-approach",
    "href": "index.html#the-inquiry-based-approach",
    "title": "Numerical Analysis",
    "section": "The Inquiry-Based Approach",
    "text": "The Inquiry-Based Approach\nThis material is written with an Inquiry-Based Learning (IBL) flavor. In that sense, these notes are not a traditional textbook containing all of the expected theorems, proofs, code, examples, and exposition. You are encouraged to work through exercises, problems and projects, present your findings, and work together when appropriate.\nIn our first session we will start off right away with an exercise designed for groups, discussion, disagreement, and deep critical thinking. This exercise is inspired by Dana Ernst’s first day IBL activity titled: Setting the Stage.\n\n\nExercise 1  \n\nGet in groups of size 3-4.\nGroup members should introduce themselves.\nFor each of the questions that follow I will ask you to:\n\n\nThink about a possible answer on your own\nDiscuss your answers with the rest of the group\nShare a summary of each group’s discussion\n\nQuestions:\nQuestion 1: What are the goals of a university education?\nQuestion 2: How does a person learn something new?\nQuestion 3: What do you reasonably expect to remember from your courses in 20 years?\nQuestion 4: What is the value of making mistakes in the learning process?\nQuestion 5: How do we create a safe environment where risk taking is encouraged and productive failure is valued?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#how-this-module-works",
    "href": "index.html#how-this-module-works",
    "title": "Numerical Analysis",
    "section": "How this module works",
    "text": "How this module works\nThere are 4 one-hour whole-class sessions every week. Three of these are listed on your timetable as “Lecture” and one as “Computer Practical”. However, in all these sessions you, the student, are the one that is doing the work; discovering methods, writing code, working problems, leading discussions, and pushing the pace. I, the lecturer, will act as a guide who only steps in to redirect conversations or to provide necessary insight. You will use the whole-class sessions to share and discuss your work with the other members of your group. There will also be some whole-class discussions moderated by your lecturer.\nYou will find that this text is not a set of lecture notes. Instead it mostly just contains collections of exercises with minimal interweaving exposition. It is expected that you do every one of the exercises in the main body of each chapter and use the sequencing of the exercises to guide your learning and understanding.\nTherefore the whole-class sessions form only a very small part of your work on this module. For each hour of whole-class work you should timetable yourself about two and a half hours of work outside class for working through the exercises on your own. I strongly recommend that you put those two and a half hours (ten hours spread throughout the week) into your timetable. Of course I hope that your explorations will be so satisfying that you will want to spend more than those ten hours every week. This is a module where you will develop amazing skills that it will be fun to exploit in your own investigations. Your lecturer will be very interested to hear about your experiences.\nAt the end of each chapter there is a section entitled “Problems” that contains additional exercises aimed at consolidating your new understanding and skills. Of these you should aim to do as many as you can but you will not have time to do them all. As the module progresses I will give advice on which of those problems to attack. There are no traditional problem sheets in this module. In this module you will be working on exercises continuously throughout the week rather than working through a problem sheet only every other week.\nMany of the chapters also have a section entitled “Projects”. These projects are more open-ended investigations, designed to encourage creative mathematics, to push your coding skills and to require you to write and communicate mathematics. These projects are entirely optional and perhaps you will like to return to one of these even after the module has finished. If you do work on one of the projects, be sure to share your work with your lecturer at gustav.delius@york.ac.uk who will be very interested, also after the end of the module.\nYou will need two notebooks for working through the exercises in this guide: one in paper form and one electronic. Some of the exercises are pen-and-paper exercises while others are coding exercises and some require both writing or sketching and coding. The two notebooks will be linked through the numbering of the exercises.\nFor the coding notebook I highly recommend using Google Colab (or Jupyter Notebook). This will be discussed more in 1  Essential Python that introduces Python. Most students find it easiest to have one dedicated Colab notebook (or Jupyter notebook) per section, but some students will want to have one per chapter. You are highly encouraged to write explanatory text into your Google Colab notebooks as you go so that future-you can tell what it is that you were doing, which problem(s) you were solving, and what your thought processes were.\nIn the end, your collection of notebooks will contain solutions to every exercise in the guide and can serve as a reference manual for future numerical analysis problems. At the end of each of your notebooks you may also want to add a summary of what you have learned, which will both consolidate your learning and make it easier for you to remind yourself of your new skills later.\nOne request: do not share your notebooks publicly on the internet because that would create temptation for future students to not put in the work themselves, thereby robbing them of the learning experience.\nIf you have a notebook computer, bring it along to the class sessions. However this is not a requirement. Your lecturer will bring along some spare machines to make sure that every group has at least one computer to use during every session. The only requirement for a computer to be useful for this module is that it can connect to the campus WiFi and run a web browser. The “Computer Practical” takes place in a PC classroom, so there will of course be plenty of machines available then.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#assessment",
    "href": "index.html#assessment",
    "title": "Numerical Analysis",
    "section": "Assessment",
    "text": "Assessment\nUnfortunately, your learning in the module also needs to be assessed. The final mark will be made up of 40% coursework and 60% final exam.\nThe 40% coursework mark will come from 10 short quizzes that will take place during the “Computer practical” in weeks 2 to 11. Answering each quiz should take less than 5 minutes but you will be given 10 minutes to complete it to give you a large safety margin and remove stress. The quizzes will be based on exercises that you will already have worked through and for which you will have had time to discuss them in class, so they will be really easy if you have engaged with the exercises as intended. Each quiz will be worth 5 points. There will be a practice quiz in the computer practical in week 1 and another one at the start of the practical in week 2.\nDuring the assessment quizzes you will be required to work exclusively on a classroom PC rather than your own machine. You will do your work in a Colab notebook that will be shared with you at the start of the quiz via Moodle. You will then need to save your work, download the Colab notebook to the PC and upload it to Moodle before the end of the quiz. You can find more info on the use of Colab notebooks in this module in the Essential Python chapter of the Numerical Analysis Learning Guide.\nWhile working on the quiz on the classroom PC you are only allowed to use a web browser, and the only pages you are allowed to have open are this guide, the course home page on Moodle and any of your notebooks on Google Colab. You are not allowed to use any AI assistants or other web pages. Besides your online notebooks you may also use any hand-written notes as long as you have written them yourself.\nLate submissions will be accepted until 5 minutes after the deadline but there will be one penalty point deduction for a late submission. Submissions that are more than 5 minutes late will get 0 points.\nTo allow for the fact that there may be weeks in which you are ill or otherwise prevented from performing to your best in the assessment quizzes, your final coursework mark will be calculated as the average over your 8 best marks. If exceptional circumstances affect more than two of the 10 quizzes then you would need to submit an exceptional circumstances claim.\nThe 60% final exam will be a 2 hour exam of the usual closed-book form in an exam room during the exam period. I will make a practice exam available at the end of the module.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#textbooks",
    "href": "index.html#textbooks",
    "title": "Numerical Analysis",
    "section": "Textbooks",
    "text": "Textbooks\nIn this module we will only scratch the surface of the vast subject that is Numerical Analysis. The aim is for you at the end of this module to be familiar with some key ideas and to have the confidence to engage with new methods when they become relevant to you.\nThere are many textbooks on Numerical Analysis. Standard textbooks are (Burden and Faires 2010) and (Kincaid and Cheney 2009). They contain much of the material from this module. A less structured and more opinionated account can be found in (Acton 1990). Another well known reference that researchers often turn to for solutions to specific tasks is (Press et al. 2007). You will find many others in the library. They may go also under alternative names like Numerical Methods or Scientific Computing.\nYou may also want to look at textbooks for specific topics covered in this module, like for example (Butcher 2016) for methods for ordinary differential equations.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#your-jobs",
    "href": "index.html#your-jobs",
    "title": "Numerical Analysis",
    "section": "Your jobs",
    "text": "Your jobs\nYou have the following jobs as a student in this module:\n\nFight! You will have to fight hard to work through this material. The fight is exactly what we are after since it is ultimately what leads to innovative thinking.\nScrew Up! More accurately, do not be afraid to screw up. You should write code, work problems, and develop methods, then be completely unafraid to scrap what you have done and redo it from scratch.\nCollaborate! You should collaborate with your peers with the following caveats:\n\nWhen you are done collaborating you should go your separate ways. When you write your solution you should have no written (or digital) record of your collaboration.\nUse of the internet or AI to help solve these problems robs you of the most important part of this module; the chance for original thought.\n\nEnjoy! Part of the fun of inquiry-based learning is that you get to experience what it is like to think like a true mathematician / scientist. It takes hard work but ultimately this should be fun!\n\n\n© Gustav Delius. Some Rights Reserved.\nThis learning guide, adapted from the original text by Eric Sullivan, is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. You may copy, distribute, display, remix, rework, and perform this copyrighted work, as long as you give credit to both Gustav Delius for the adaptations and Eric Sullivan for the original work.\nPlease attribute the original work to Eric Sullivan, formerly Mathematics Faculty at Carroll College, esullivan@carroll.edu, and the adapted work to Gustav Delius, Department of Mathematics, University of York, gustav.delius@york.ac.uk.\nThe original work by Eric Sullivan is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/4.0/. The adaptations by Gustav Delius are also published under the same Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\nFor inquiries regarding the use of this learning guide, please contact gustav.delius@york.ac.uk.\n\n\n\n\nActon, Forman S. 1990. Numerical Methods That Work. 1St Edition edition. Washington, D.C: The Mathematical Association of America.\n\n\nBurden, Richard L., and J. Douglas Faires. 2010. Numerical Analysis. 9th ed. Brooks Cole.\n\n\nButcher, J. C. 2016. Numerical Methods for Ordinary Differential Equations. Third edition. Wiley. https://yorsearch.york.ac.uk/permalink/f/1kq3a7l/44YORK_ALMA_DS51336126850001381.\n\n\nKincaid, D. R., and E. W. Cheney. 2009. Numerical Analysis: Mathematics of Scientific Computing. Pure and Applied Undergraduate Texts. American Mathematical Society.\n\n\nPress, William H., Saul A. Teukolsky, William T. Vetterling, and Brian P. Flannery. 2007. Numerical Recipes: The Art of Scientific Computing. Cambridge University Press. https://numerical.recipes/.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "nmPython.html",
    "href": "nmPython.html",
    "title": "1  Essential Python",
    "section": "",
    "text": "1.1 Why Python?\nWe are going to be using Python since\nIt is important to keep in mind that Python is a general purpose language that we will be using for Scientific Computing. The purpose of Scientific Computing is not to build apps, build software, manage databases, or develop user interfaces. Instead, Scientific Computing is the use of a computer programming language (like Python) along with mathematics to solve scientific and mathematical problems. For this reason it is definitely not our purpose to write an all-encompassing guide for how to use Python. We will only cover what is necessary for our computing needs. You will learn more as the course progresses so use this chapter just to get going with the language.\nWe are also definitely not saying that Python is the best language for scientific computing under all circumstances. The reason there are so many scientific programming languages coexisting is that each has particular strengths that make it the best option for particular applications. But we are saying that Python is so widely used that every scientist should know Python.\nThere is an overwhelming abundance of information available about Python and the suite of tools that we will frequently use.\nThese tools together provide all of the computational power that we will need. And they are free!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Essential Python</span>"
    ]
  },
  {
    "objectID": "nmPython.html#why-python",
    "href": "nmPython.html#why-python",
    "title": "1  Essential Python",
    "section": "",
    "text": "Python is free,\nPython is very widely used,\nPython is flexible,\nPython is relatively easy to learn,\nand Python is quite powerful.\n\n\n\n\n\nPython https://www.python.org/,\nnumpy (numerical Python) https://www.numpy.org/,\nmatplotlib (a suite of plotting tools) https://matplotlib.org/,\nscipy (scientific Python) https://www.scipy.org/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Essential Python</span>"
    ]
  },
  {
    "objectID": "nmPython.html#google-colab",
    "href": "nmPython.html#google-colab",
    "title": "1  Essential Python",
    "section": "1.2 Google Colab",
    "text": "1.2 Google Colab\nEvery computer is its own unique flower with its own unique requirements. Hence, we will not spend time here giving you all of the ways that you can install Python and all of the associated packages necessary for this module. Unless you are already familiar with using Python on your own computer, I highly recommend that you use the Google Colab notebook tool for writing your Python code: https://colab.research.google.com.\nGoogle Colab allows you to keep all of your Python code on your Google Drive. The Colab environment is a free and collaborative version of the popular Jupyter notebook project. Jupyter notebooks allow you to write and test code as well as to mix writing (including LaTeX formatting) in along with your code and your output. I recommend that if you are new to Google Colab, you start by watching the brief introductory video.\n\nExercise 1.1 Spend a bit of time poking around in Colab. Figure out how to\n\nCreate new Colab notebooks.\nAdd and delete code cells.\nUse the keyboard to switch between writing text and writing code.\nSave a notebook to your Google Drive.\nDownload a notebook to your computer.\n\n\n\n\nExercise 1.2 Create a new Colab notebook and in that notebook create a text cell. In that text cell create the following displayed equation using LaTeX: \\[\\begin{equation}\ne^{i\\pi}=-1\n\\end{equation}\\]\n\n\n\nExercise 1.3 Share a Colab notebook with all the members of your group and see whether you can collaboratively edit it. The goal is that that everyone adds a cell that contains their own name and a favourite equation. Then share that notebook with your lecturer gustav.delius@york.ac.uk.\n\n\nIf you are already very practised in using Python then you can jump straight to Section 1.8 with the coding exercises. But if you are new to Python or your Python skills are a bit rusty, then you will benefit from working through all the examples and exercises below, making sure you copy and paste all the code into your Colab notebook and run it there.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Essential Python</span>"
    ]
  },
  {
    "objectID": "nmPython.html#hello-world",
    "href": "nmPython.html#hello-world",
    "title": "1  Essential Python",
    "section": "1.3 Hello, World!",
    "text": "1.3 Hello, World!\nAs is traditional when learning a new programming language, we should create code that prints the words “Hello, world!”. The code below does just that.\nprint(\"Hello, world!\")\nIn a Jupyter notebook you will write your code in a code block, and when you are ready to run it you can press Shift+Enter (or Control+Enter) and you will see your output. Shift+Enter will evaluate your code and advance to the next block of code. Control+Enter will evaluate without advancing the cursor to the next block.\n\n\nExercise 1.4 Create a new Jupyter notebook for your work and have Python print Hello, world! in your notebook.\n\n\n\nExercise 1.5 Write code to print your name in your Jupyter notebook.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Essential Python</span>"
    ]
  },
  {
    "objectID": "nmPython.html#python-programming-basics",
    "href": "nmPython.html#python-programming-basics",
    "title": "1  Essential Python",
    "section": "1.4 Python Programming Basics",
    "text": "1.4 Python Programming Basics\nThroughout the remainder of this chapter it is expected that you run all of the blocks of code on your own and critically evaluate and understand the output. To copy the code from this guide to your notebook you can use the “Copy to Clipboard” icon that pops up in the top right corner of a code block in this guide when you hover over that code block.\n\n1.4.1 Variables\nVariable names in Python can contain letters (lower case or capital), numbers 0-9, and some special characters such as the underscore. Variable names must start with a letter. There are a bunch of reserved words that you can not use for your variable names because they have a special meaning in the Python syntax. Python will let you know with a syntax error if you try to use a reserved word for a variable name.\nYou can do the typical things with variables. Assignment is with an equal sign (be careful R users, we will not be using the left-pointing arrow here!).\nWarning: When defining numerical variables you do not always get floating point numbers. In some programming languages, if you write x=1 then automatically x is saved as 1.0; a floating point number, not an integer. In Python however, if you assign x=1 it is defined as an integer (with no decimal digits) but if you assign x=1.0 it is assigned as a floating point number.\n# assign some variables\nx = 7 # integer assignment of the integer 7\ny = 7.0 # floating point assignment of the decimal number 7.0\nprint(\"The variable x has the value\", x, \" and has type\", type(x), \". \\n\")\nprint(\"The variable y has the value\", y, \" and has type\", type(y), \". \\n\")\nRemember to copy each code block to your own notebook, execute it and look at the output.\n# multiplying by a float will convert an integer to a float\nx = 7 # integer assignment of the integer 7\nprint(\"Multiplying x by 1.0 gives\", 1.0*x)\nprint(\"The type of this value is\", type(1.0*x), \". \\n\")\nThe allowed mathematical operations are:\n\nAddition: +\nSubtraction: -\nMultiplication: *\nDivision: /\nInteger Division (modular division): // and %\nExponents: **\n\nThat’s right, the caret key, ^, is NOT an exponent in Python (sigh). Instead we have to get used to ** for exponents.\nx = 7.0\ny = x**2 # square the value in x\nprint(y)\n\n\nExercise 1.6 What happens if you evaluate 7^2 in Python? What does it give you? We will return to this later.\n\n\n\nExercise 1.7 Write code to define positive integers \\(a,b\\) and \\(c\\) of your own choosing. Then calculate \\(a^2, b^2\\) and \\(c^2\\). When you have all three values computed, check to see if your three values form a Pythagorean Triple so that \\(a^2 + b^2 = c^2\\). Have Python simply say True or False to verify that you do, or do not, have a Pythagorean Triple defined. Hint: You will need to use the == Boolean check just like in other programming languages.\n\n\n\n\n1.4.2 Indexing and Lists\nLists are a key component to storing data in Python. Lists are exactly what the name says: lists of things (in our case, usually the entries are floating point numbers).\nWarning: Python indexing starts at 0 whereas some other programming languages have indexing starting at 1. In other words, the first entry of a list has index 0, the second entry as index 1, and so on. We just have to keep this in mind.\nWe can extract a part of a list using the syntax name[start:stop] which extracts elements between index start and stop-1. Take note that Python stops reading at the second to last index. This often catches people off guard when they first start with Python.\n\n\nExample 1.1 (Lists and Indexing) Let us look at a few examples of indexing from lists. In this example we will use the list of numbers 0 through 8. This list contains 9 numbers indexed from 0 to 8.\n\nCreate the list of numbers 0 through 8\n\nMyList = [0,1,2,3,4,5,6,7,8]\n\nPrint only the element with index 0.\n\nprint(MyList[0]) \n\nPrint all elements up to, but not including, the third element of MyList.\n\nprint(MyList[:2])\n\nPrint the last element of MyList (this is a handy trick!).\n\nprint(MyList[-1]) \n\nPrint the elements indexed 1 through 4. Beware! This is not the first through fifth element.\n\nprint(MyList[1:5]) \n\nPrint every other element in the list starting with the first.\n\nprint(MyList[0::2])\n\nPrint the last three elements of MyList\n\nprint(MyList[-3:])\n\n\nIn Python, elements in a list do not need to be the same type. You can mix integers, floats, strings, lists, etc.\n\nExample 1.2 In this example we see a list of several items that have different data types: float, integer, string, and complex. Note that the imaginary number \\(i\\) is represented by \\(1j\\) in Python. This is common in many scientific disciplines and is just another thing that we will need to get used to in Python. (For example, \\(j\\) is commonly used as the symbol for the imaginary unit \\(\\sqrt{-1}\\) ) in electrical engineering since \\(i\\) is the symbol commonly used for electric current, and using \\(i\\) for both would be problematic).\nMixedList = [1.0, 7, 'Bob', 1-1j]\nprint(MixedList)\nprint(type(MixedList[0]))\nprint(type(MixedList[1]))\nprint(type(MixedList[2]))\nprint(type(MixedList[3])) \n# Notice that we use 1j for the imaginary number \"i\".\n\n\n\nExercise 1.8 In this exercise you will put your new list skills into practice.\n\nCreate the list of the first several Fibonacci numbers: \\[\\begin{equation}\n1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89.\n\\end{equation}\\]\nPrint the first four elements of the list.\nPrint every third element of the list starting from the first.\nPrint the last element of the list.\nPrint the list in reverse order.\nPrint the list starting at the last element and counting backward by every other element.\n\n\n\n\n\n1.4.3 List Operations\nPython is awesome about allowing you to do things like appending items to lists, removing items from lists, and inserting items into lists. Note in all of the examples below that we are using the code\nvariable.method\nwhere you put the variable name, a dot, and the thing that you would like to do to that variable. For example, MyList.append(7) will append the number 7 to the list MyList. We say that append is a “method” of the list MyList. This is a common programming feature in Python and we will use it often.\n\n\nExample 1.3 The .append method can be used to append an element to the end of a list.\nMyList = [0,1,2,3]\nprint(MyList)\n# Append the string 'a' to the end of the list\nMyList.append('a') \nprint(MyList)\n# Do it again ... just for fun\nMyList.append('a') \nprint(MyList)\n# Append the number 15 to the end of the list\nMyList.append(15) \nprint(MyList)\n\n\n\nExample 1.4 The .remove method can be used to remove an element from a list.\n# Let us remove the 3\nMyList.remove(3)\nprint(MyList)\n\n\n\nExample 1.5 The .insert method can be used to insert an element at a location in a list.\n# insert the letter `A` at the 0-indexed spot\nMyList.insert(0,'A') \n# insert the letter `B` at the spot with index 3 \nMyList.insert(3,'B') \n# remember that index 3 means the fourth spot in the list\nprint(MyList)\n\n\n\nExercise 1.9 In this exercise you will go a bit further with your list operation skills.\n\nCreate the list of the first several Lucas Numbers: \\(1,3,4,7,11,18,29,47.\\)\nAdd the next three Lucas Numbers to the end of the list.\nRemove the number 3 from the list.\nInsert the 3 back into the list in the correct spot.\nPrint the list in reverse order.\nDo a few other list operations to this list and report your findings.\n\n\n\n\n\n1.4.4 Tuples\nIn Python, a “tuple” is like an ordered pair (or ordered triple, or ordered quadruple, ...) in mathematics. We will occasionally see tuples in our work in numerical analysis so for now let us just give a couple of code snippets showing how to store and read them.\nWe can define the tuple of numbers \\((10,20)\\) in Python as follows:\n\nExample 1.6  \npoint = 10, 20 \nprint(point, type(point))\nWe can also define a tuple with parenthesis if we like. Python does not care.\npoint = (10, 20) # now we define the tuple with parenthesis\nprint(point, type(point))\nWe can then unpack the tuple into components if we wish:\nx, y = point\nprint(\"x = \", x)\nprint(\"y = \", y)\n\nThere are other important data structures in Python that we will not cover in this module. These include dictionaries and sets. We will not cover these because they are not necessary for our work in numerical analysis. We are trying to keep things simple. If you are interested in learning more about these data structures, you can find a lot of information about them in the Python documentation.\n\n\n1.4.5 Control Flow: Loops and If Statements\nAny time you need to do some repetitive task with a programming language you can use a loop. Just like in other programming languages, we can do loops and conditional statements in very easy ways in Python. The thing to keep in mind is that the Python language is very white-space-dependent. This means that your indentations need to be correct in order for a loop to work. You could get away with sloppy indention in other languages but not so in Python. Also, in some languages (like R and Java) you need to wrap your loops in curly braces. Again, not so in Python.\nCaution: Be really careful of the white space in your code when you write loops.\n\n1.4.5.1 for Loops\nA for loop is designed to do a task a certain number of times and then stop. This is a great tool for automating repetitive tasks, but it also nice numerically for building sequences, summing series, or just checking lots of examples. The following are several examples of Python for loops. Take careful note of the syntax for a for loop as it is the same as for other loops and conditional statements:\n\na control statement,\na colon, a new line,\nindent four spaces,\nsome programming statements\n\nWhen you are done with the loop, just back out of the indention. There is no need for an end command or a curly brace. All of the control statements in Python are white-space-dependent.\n\n\nExample 1.7 Print the first 6 perfect squares.\nfor x in [1,2,3,4,5,6]:\n    print(x**2)\nOften instead of writing the list of integers explicitly one uses the range() function, so that this example would be written as\nfor x in range(1,7):\n    print(x**2)\n\nNote that range(1,7) produces the integers from 1 to 6, not from 1 to 7. This is another manifestation of Python’s weird 0-based indexing. Of course it is only weird to people who are new to Python. For Pythonists it is perfectly natural.\n\n\nExample 1.8 Print the names in a list.\nNamesList = ['Alice','Billy','Charlie','Dom','Enrique','Francisco']\nfor name in NamesList:\n    print(name)\n\n\nIn Python you can use a more compact notation for for loops sometimes. This takes a bit of getting used to, but is super slick!\n\n\nExample 1.9 Create a list of the perfect squares from 1 to 9.\n# create a list of the perfect squares from 1 to 9\nCoolList = [x**2 for x in range(1,10)]\nprint(CoolList)\n# Then print the sum of this list\nprint(\"The sum of the first 9 perfect squares is\",sum(CoolList))\n\n\nfor loops can also be used to build recursive sequences as can be seen in the next couple of examples.\n\n\nExample 1.10 In the following code we write a for loop that outputs a list of the first 7 iterations of the sequence \\(x_{n+1}=-0.5x_n+1\\) starting with \\(x_0=3\\). Notice that we are using the command x.append instead of \\(x[n+1]\\) to append the new term to the list. This allows us to grow the length of the list dynamically as the loop progresses.\nx=[3.0]\nfor n in range(0,7):\n    x.append(-0.5*x[n] + 1)\n    print(x) # print the whole list x at each step of the loop\n\n\n\nExample 1.11 As an alternative to the code from the previous example we can pre-allocate the memory in an array of zeros. This is done with the clever code x = [0] * 10. Literally multiplying a list by some number, like 10, says to repeat that list 10 times.\nNow we will build the sequence with pre-allocated memory.\nx = [0] * 7\nx[0] = 3.0\nfor n in range(0,6):\n    x[n+1] = -0.5*x[n]+1\n    print(x) # This print statement shows x at each iteration\n\n\n\nExercise 1.10 We want to sum the first 100 perfect cubes. Let us do this in two ways.\n\nStart off a variable called Total at 0 and write a for loop that adds the next perfect cube to the running total.\nWrite a for loop that builds the sequence of the first 100 perfect cubes. After the list has been built find the sum with the sum() function.\n\nThe answer is: 25,502,500 so check your work.\n\n\n\nExercise 1.11 Write a for loop that builds the first 20 terms of the sequence \\(x_{n+1}=1-x_n^2\\) with \\(x_0=0.1\\). Pre-allocate enough memory in your list and then fill it with the terms of the sequence. Only print the list after all of the computations have been completed.\n\n\n\n\n1.4.5.2 while Loops\nA while loop repeats some task (or sequence of tasks) while a logical condition is true. It stops when the logical condition turns from true to false. The structure in Python is the same as with for loops.\n\n\nExample 1.12 Print the numbers 0 through 4 and then the word “done.” we will do this by starting a counter variable, i, at 0 and increment it every time we pass through the loop.\ni = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1 # increment the counter\nprint(\"done\")\n\n\n\nExample 1.13 Now let us use a while loop to build the sequence of Fibonacci numbers and stop when the newest number in the sequence is greater than 1000. Notice that we want to keep looping until the condition that the last term is greater than 1000 – this is the perfect task for a while loop, instead of a for loop, since we do not know how many steps it will take before we start the task\nFib = [1,1]\nwhile Fib[-1] &lt;= 1000:\n    Fib.append(Fib[-1] + Fib[-2])\nprint(\"The last few terms in the list are:\\n\",Fib[-3:])\n\n\n\nExercise 1.12 Write a while loop that sums the terms in the Fibonacci sequence until the sum is larger than 1000\n\n\n\n\n1.4.5.3 if Statements\nConditional (if) statements allow you to run a piece of code only under certain conditions. This is handy when you have different tasks to perform under different conditions.\n\n\nExample 1.14 Let us look at a simple example of an if statement in Python.\nName = \"Alice\"\nif Name == \"Alice\":\n    print(\"Hello, Alice.  Isn't it a lovely day to learn Python?\")\nelse:\n    print(\"You're not Alice.  Where is Alice?\")\nName = \"Billy\"\nif Name == \"Alice\":\n    print(\"Hello, Alice.  Isn't it a lovely day to learn Python?\")\nelse:\n    print(\"You're not Alice.  Where is Alice?\")\n\n\n\nExample 1.15 For another example, if we get a random number between 0 and 1 we could have Python print a different message depending on whether it was above or below 0.5. Run the code below several times and you will see different results each time.\nNote: We have to import the numpy package to get the random number generator in Python. Do not worry about that for now. we will talk about packages in a moment.\nimport numpy as np\nx = np.random.rand(1,1) # get a random 1x1 matrix using numpy\nx = x[0,0] # pull the entry from the first row and first column\nif x &lt; 0.5:\n    print(x,\" is less than a half\")\nelse:\n    print(x, \"is NOT less than a half\")\n(Take note that the output will change every time you run it)\n\n\n\nExample 1.16 In many programming tasks it is handy to have several different choices between tasks instead of just two choices as in the previous examples. This is a job for the elif command.\nThis is the same code as last time except we will make the decision at 0.33 and 0.67\nimport numpy as np\nx = np.random.rand(1,1) # get a random 1x1 matrix using numpy\nx = x[0,0] # pull the entry from the first row and first column\nif x &lt; 0.33:\n    print(x,\" &lt; 1/3\")\nelif x &lt; 0.67:\n    print(\"1/3 &lt;= \",x,\"&lt; 2/3\")\nelse:\n    print(x, \"&gt;= 2/3\")\n(Take note that the output will change every time you run it)\n\n\n\nExercise 1.13 Write code to give the Collatz Sequence \\[\\begin{equation}\nx_{n+1} = \\left\\{ \\begin{array}{ll} x_n / 2, & \\text{$x_n$ is even} \\\\ 3 x_n + 1, & \\text{otherwise} \\end{array} \\right.\n\\end{equation}\\] starting with a positive integer of your choosing. The sequence will converge1 to 1 so your code should stop when the sequence reaches 1.\nHints: To test whether a number x is even you can test whether the remainder after dividing by 2 is zero with (x % 2) == 0. Also you will want to use the integer division // when calculating \\(x_n/2\\).\n\n\n\n\n\n1.4.6 Functions\nMathematicians and programmers talk about functions in very similar ways, but they are not exactly the same. When we say “function” in a programming sense we are talking about a chunk of code that you can pass parameters and expect an output of some sort. This is not unlike the mathematician’s version, but unlike a mathematical function can also have side effects, like plotting a graph for example. So Python’s definition of a function is a bit more flexible than that of a mathematician.\nIn Python, to define a function we start with def, followed by the function’s name, any input variables in parenthesis, and a colon. The indented code after the colon is what defines the actions of the function.\n\n\nExample 1.17 The following code defines the polynomial \\(f(x) = x^3 + 3x^2 + 3x + 1\\) and then evaluates the function at a point \\(x=2.3\\).\ndef f(x):\n    return(x**3 + 3*x**2 + 3*x + 1)\nf(2.3)\n\n\nTake careful note of several things in the previous example:\n\nTo define the function we cannot just type it like we would see it one paper. This is not how Python recognizes functions.\nOnce we have the function defined we can call upon it just like we would on paper.\nWe cannot pass symbols into this type of function.2\n\n\n\nExercise 1.14 Define the function \\(g(n) = n^2 + n + 41\\) as a Python function. Write a loop that gives the output for this function for integers from \\(n=0\\) to \\(n=39\\). Euler noticed that each of these outputs is a prime number (check this on your own). Will the function produce a prime for \\(n=40\\)? For \\(n=41\\)?\n\n\n\nExample 1.18 One cool thing that you can do with functions is call them recursively. That is, you can call the same function from within the function itself. This turns out to be really handy in several mathematical situations.\nLet us define a function for the factorial. This function is naturally going to be recursive in the sense that it calls on itself!\ndef Fact(n):\n    if n==0:\n        return(1)\n    else:\n        return( n*Fact(n-1) ) \n        # Note: we are calling the function recursively.\nWhen you run this code there will be no output. You have just defined the function so you can use it later. So let us use it to make a list of the first several factorials. Note the use of a for loop in the following code.\nFactList = [Fact(n) for n in range(0,10)]\nFactList\n\n\n\nExample 1.19 For this next example let us define the sequence \\[\\begin{equation}\nx_{n+1} = \\left\\{ \\begin{array}{ll} 2x_n, & x_n \\in [0,0.5] \\\\ 2x_n - 1, & x_n \\in (0.5,1] \\end{array} \\right.\n\\end{equation}\\] as a function and then build a loop to find the first several iterates of the sequence starting at any real number between 0 and 1.\n# Define the function\ndef MySeq(xn):\n    if xn &lt;= 0.5:\n        return(2*xn)\n    else:\n        return(2*xn-1)\n# Now build a sequence with this function\nx = [0.125] # arbitrary starting point\nfor n in range(0,5): # Let us only build the first 5 terms\n    x.append(MySeq(x[-1]))\nprint(x)\n\n\n\nExample 1.20 A fun way to approximate the square root of two is to start with any positive real number and iterate over the sequence \\[\\begin{equation}\nx_{n+1} = \\frac{1}{2} x_n + \\frac{1}{x_n}\n\\end{equation}\\] until we are within any tolerance we like of the square root of \\(2\\). Write code that defines the sequence as a function and then iterates in a while loop until we are within \\(10^{-8}\\) of the square root of 2.\nWe import the math package so that we get the square root function. More about packages in the next section.\nfrom math import sqrt\ndef f(x):\n    return(0.5*x + 1/x)\nx = 1.1 # arbitrary starting point\nprint(\"approximation \\t\\t exact \\t\\t abs error\")\nwhile abs(x-sqrt(2)) &gt; 10**(-8):\n    x = f(x)\n    print(x, sqrt(2), abs(x - sqrt(2)))\n\n\n\nExercise 1.15 The previous example is a special case of the Babylonian Algorithm for calculating square roots. If you want the square root of \\(S\\) then iterate the sequence \\[\\begin{equation}\nx_{n+1} = \\frac{1}{2} \\left( x_n + \\frac{S}{x_n} \\right)\n\\end{equation}\\] until you are within an appropriate tolerance.\nModify the code given in the previous example to give a list of approximations of the square roots of the natural numbers 2 through 20, each to within \\(10^{-8}\\). This problem will require that you build a function, write a ‘for’ loop (for the integers 2-20), and write a ‘while’ loop inside your ‘for’ loop to do the iterations.\n\n\n\n\n1.4.7 Lambda Functions\nUsing def to define a function as in the previous subsection is really nice when you have a function that is complicated or requires some bit of code to evaluate. However, in the case of mathematical functions we have a convenient alternative: lambda Functions.\nThe basic idea of a lambda Function is that we just want to state what the variable is and what the rule is for evaluating the function. This is closest to the way that we write mathematical functions. For example, we can define the mathematical function \\(f(x) = x^2+3\\) in two different ways.\n\nUsing def:\n\ndef f(x):\n    return(x**2+3)\n\nUsing lambda:\n\nf = lambda x: x**2+3\nYou can see that in the Lambda Function we are explicitly stating the name of the variable immediately after the word lambda, then we put a colon, and then the function definition.\nNo matter whether we use def or lambda to define the function f, if we want to evaluate the function at a point, say \\(x=1.5\\), then we can write code just like we would mathematically: \\(f(1.5)\\)\nf(1.5) # evaluate the function at x=1.5\nWe can also define Lambda Functions of several variables. For example, if we want to define the mathematical function \\(f(x,y) = x^2 + xy + y^3\\) we could write the code\nf = lambda x, y: x**2 + x*y + y**3\nIf we wanted the value \\(f(2,4)\\) we would now write the code f(2,4).\n\n\nExercise 1.16 Go back to Exercise 1.14 and repeat this exercise using a lambda function.\n\n\n\nExercise 1.17 Go back to Exercise 1.15 and repeat this exercise using a lambda function.\n\n\n\n\n1.4.8 Packages\nPython was not created as a scientific programming language. The reason Python can be used for scientific computing is that there are powerful extension packages that define additional functions that are needed for scientific calculations.\nYou need to remember which functions live in which packages so that you can load the right ones. It is helpful to keep a list of commonly used packages and functions at least while you are getting started.\nLet us start with the math package.\n\n\nExample 1.21 The code below imports the math package into your instance of Python and calculates the cosine of \\(\\pi/4\\).\nimport math\nx = math.cos(math.pi / 4)\nprint(x)\nThe answer, unsurprisingly, is the decimal form of \\(\\sqrt{2}/2\\).\n\n\nYou might already see a potential disadvantage to Python’s packages: there is now more typing involved! Let us fix this. When you import a package you could just import all of the functions so they can be used by their proper names.\n\n\nExample 1.22 Here we import the entire math package so we can use every one of the functions therein without having to use the math prefix.\nfrom math import * # read this as: from math import everything\nx = cos(pi / 4)\nprint(x)\nThe end result is exactly the same: the decimal form of \\(\\sqrt{2}/2\\), but now we had less typing to do.\n\n\nNow you can freely use the functions that were imported from the math package. There is a disadvantage to this, however. What if we have two packages that import functions with the same name. For example, in the math package and in the numpy package there is a cos() function. In the next block of code we will import both math and numpy, but instead we will import them with shortened names so we can type things a bit faster.\n\n\nExample 1.23 Here we import math and numpy under aliases so we can use the shortened aliases and not mix up which functions belong to which packages.\nimport math as ma\nimport numpy as np\n# use the math version of the cosine function\nx = ma.cos( ma.pi / 4) \n# use the numpy version of the cosine function\ny = np.cos( np.pi / 4) \nprint(x, y)\nBoth x and y in the code give the decimal approximation of \\(\\sqrt{2}/2\\). This is clearly pretty redundant in this really simple case, but you should be able to see where you might want to use this and where you might run into troubles.\n\n\n\nExample 1.24 (Contents of a package) Once you have a package imported you can see what is inside of it using the dir command. The following block of code prints a list of all of the functions inside the math package.\nimport math\nprint(dir(math))\n\n\nBy the way: you only need to import a package once in a session. The only reason we are repeating the import statement in each code block is to make it easier to come back to this material later in a new session, where you will need to import the packages again.\nOf course, there will be times when you need help with a function. You can use the help function to view the help documentation for any function. For example, you can run the code help(math.acos) to get help on the arc cosine function from the math package.\n\n\nExercise 1.18 Import the math package, figure out how the log function works, and write code to calculate the logarithm of the number 8.3 in base 10, base 2, base 16, and base \\(e\\) (the natural logarithm).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Essential Python</span>"
    ]
  },
  {
    "objectID": "nmPython.html#numerical-python-with-numpy",
    "href": "nmPython.html#numerical-python-with-numpy",
    "title": "1  Essential Python",
    "section": "1.5 Numerical Python with NumPy",
    "text": "1.5 Numerical Python with NumPy\nThe base implementation of Python includes the basic programming language, the tools to write loops, check conditions, build and manipulate lists, and all of the other things that we saw in the previous section. In this section we will explore the package numpy that contains optimized numerical routines for doing numerical computations in scientific computing.\n\n\nExample 1.25 To start with let us look at a really simple example. Say you have a list of real numbers and you want to take the sine of every element in the list. If you just try to take the sine of the list you will get an error. Try it yourself.\nfrom math import pi, sin\nMyList = [0,pi/6, pi/4, pi/3, pi/2, 2*pi/3, 3*pi/4, 5*pi/6, pi]\nsin(MyList)\nYou could get around this error using some of the tools from base Python, but none of them are very elegant from a programming perspective.\nfrom math import pi, sin\nMyList = [0,pi/6, pi/4, pi/3, pi/2, 2*pi/3, 3*pi/4, 5*pi/6, pi]\nSineList = [sin(n) for n in MyList]\nprint(SineList)\nfrom math import pi, sin\nMyList = [0,pi/6, pi/4, pi/3, pi/2, 2*pi/3, 3*pi/4, 5*pi/6, pi]\nSineList = [ ]\nfor n in range(0,len(MyList)):\n    SineList.append( sin(MyList[n]) )\nprint(SineList)\nPerhaps more simply, say we wanted to square every number in a list. Just appending the code **2 to the end of the list will fail!\nMyList = [1,2,3,4]\nMyList**2 # This will produce an error\nIf, instead, we define the list as a numpy array instead of a Python list then everything will work mathematically exactly the way that we intend.\nimport numpy as np\nMyList = np.array([1,2,3,4])\nMyList**2 # This will work as expected!  \n\n\n\nExercise 1.19 See if you can take the sine of a full list of numbers that are stored in a numpy array.\nHint: you will now see why the numpy package provides its own version of the sine function.\n\n\nThe package numpy is used in many (most) mathematical computations in numerical analysis using Python. It provides algorithms for matrix and vector arithmetic. Furthermore, it is optimized to be able to do these computations in the most efficient possible way (both in terms of memory and in terms of speed).\nTypically when we import numpy we use import numpy as np. This is the standard way to name the numpy package. This means that we will have lots of function with the prefix “np” in order to call on the numpy functions. Let us first see what is inside the package with the code print(dir(np)) after importing numpy as np. A brief glimpse through the list reveals a huge wealth of mathematical functions that are optimized to work in the best possible way with the Python language. (We are intentionally not showing the output here since it is quite extensive, run it so you can see.)\n\n1.5.1 Numpy Arrays, Array Operations, and Matrix Operations\nIn the previous section you worked with Python lists. As we pointed out, the shortcoming of Python lists is that they do not behave well when we want to apply mathematical functions to the vector as a whole. The “numpy array”, np.array, is essentially the same as a Python list with the notable exceptions that\n\nIn a numpy array every entry is a floating point number\nIn a numpy array the memory usage is more efficient (mostly since Python is expecting data of all the same type)\nWith a numpy array there are ready-made functions that can act directly on the array as a matrix or a vector\n\nLet us just look at a few examples using numpy. What we are going to do is to define a matrix \\(A\\) and vectors \\(v\\) and \\(w\\) as \\[\\begin{equation}\nA = \\begin{pmatrix} 1 & 2 \\\\ 3 & 4 \\end{pmatrix}, \\quad v = \\begin{pmatrix} 5\\\\6 \\end{pmatrix} \\quad \\text{and} \\quad w = v^T = \\begin{pmatrix} 5 & 6 \\end{pmatrix}.\n\\end{equation}\\] Then we will do the following\n\nGet the size and shape of these arrays\nGet individual elements, rows, and columns from these arrays\nTreat these arrays as with linear algebra to\n\ndo element-wise multiplication\ndo matrix a vector products\ndo scalar multiplication\ntake the transpose of matrices\ntake the inverse of matrices\n\n\n\n\nExample 1.26 (numpy Matrices) The first thing to note is that a matrix is a list of lists (each row is a list).\nimport numpy as np\nA = np.array([[1,2],[3,4]])\nprint(\"The matrix A is:\\n\",A)\nv = np.array([[5],[6]]) # this creates a column vector\nprint(\"The vector v is:\\n\",v)\nw = np.array([[5,6]]) # this creates a row vector\nprint(\"The vector w is:\\n\",w)\n\n\n\nExample 1.27 (.shape) The .shape attribute can be used to give the shape of a numpy array. Notice that the output is a tuple showing the size (rows, columns).\nprint(\"The shape of the matrix A is \", A.shape)\nprint(\"The shape of the column vector v is \", v.shape)\nprint(\"The shape of the row vector w is \", w.shape)\n\n\n\nExample 1.28 (.size) The .size attribute can be used to give the size of a numpy array. The size of a matrix or vector will be the total number of elements in the array. You can think of this as the product of the values in the tuple coming from the shape method.\nprint(\"The size of the matrix A is \", A.size)\nprint(\"The size of the column vector v is \", v.size)\nprint(\"The size of the row vector w is \", w.size)\n\n\nReading individual elements from a numpy array is the same, essentially, as reading elements from a Python list. We will use square brackets to get the row and column. Remember that the indexing all starts from 0, not 1!\n\nExample 1.29 Let us read the top left and bottom right entries of the matrix \\(A\\).\nimport numpy as np\nA = np.array([[1,2],[3,4]])\nprint(A[0,0]) # top left\nprint(A[1,1]) # bottom right\n\n\n\nExample 1.30 Let us read the first row from that matrix \\(A\\).\nimport numpy as np\nA = np.array([[1,2],[3,4]])\nprint(A[0,:])\n\n\n\nExample 1.31 Let us read the second column from the matrix \\(A\\).\nimport numpy as np\nA = np.array([[1,2],[3,4]])\nprint(A[:,1])\nNotice when we read the column it was displayed as a row. Be careful. Reading a row or a column from a matrix will automatically flatten it into a 1-dimensional array.\n\n\nIf we try to multiply either \\(A\\) and \\(v\\) or \\(A\\) and \\(A\\) we will get some funky results. Unlike in some programming languages like MATLAB, the default notion of multiplication is NOT matrix multiplication. Instead, the default is element-wise multiplication. You may be familiar with this from R.\n\n\nExample 1.32 If we write the code A*A we do NOT do matrix multiplication. Instead we do element-by-element multiplication. This is a common source of issues when dealing with matrices and Linear Algebra in Python.\nimport numpy as np\nA = np.array([[1,2],[3,4]])\nprint(\"Element-wise multiplication:\\n\", A * A)\nprint(\"Matrix multiplication:\\n\", A @ A)\n\n\n\nExample 1.33 If we write A * v Python will do element-wise multiplication across each column since \\(v\\) is a column vector. If we want the matrix A to act on v we write A @ v.\nimport numpy as np\nA = np.array([[1,2],[3,4]])\nv = np.array([[5],[6]])\nprint(\"Element-wise multiplication on each column:\\n\", A * v) \n# A @ v will do proper matrix multiplication\nprint(\"Matrix A acting on vector v:\\n\", A @ v)\n\nIt is up to you to check that these products are indeed correct from the definitions of matrix multiplication from Linear Algebra.\nIt remains to show some of the other basic linear algebra operations: inverses, determinants, the trace, and the transpose.\n\n\nExample 1.34 (Transpose) Taking the transpose of a matrix (swapping the rows and columns) is done with the .T attribute.\nprint(A.T) # The transpose is relatively simple\n\n\n\nExample 1.35 (Trace) The trace is done with matrix.trace()\nprint(A.trace()) # The trace is pretty darn easy too\nOddly enough, the trace returns a matrix, not a scalar Therefore you will have to read the first entry (index [0,0]) from the answer to just get the trace.\n\n\n\nExample 1.36 (Determinant) The determinant function is hiding under the linalg subpackage inside numpy. Therefore we need to call it as such.\nprint(np.linalg.det(A)) \nYou notice an interesting numerical error here. You can do the determinant easily by hand and so know that it should be exactly \\(-2\\).\n\n\n\nExample 1.37 (Inverse) In the linalg subpackage there is also a function for taking the inverse of a matrix.\nAinv = np.linalg.inv(A)\nprint(Ainv)\nprint(A @ Ainv) # check that we get the identity matrix back\n\n\n\nExercise 1.20 Now that we can do some basic linear algebra with numpy it is your turn. Define the matrix \\(B\\) and the vector \\(u\\) as\n\n\\[\\begin{equation}\nB = \\begin{pmatrix} 1 & 4 & 8 \\\\ 2 & 3 & -1 \\\\ 0 & 9 & -3 \\end{pmatrix} \\quad \\text{and} \\quad u = \\begin{pmatrix} 6 \\\\ 3 \\\\ -7 \\end{pmatrix}.\n\\end{equation}\\]\nThen find\n\n\\(Bu\\)\n\\(B^2\\) (in the traditional linear algebra sense)\nThe size and shape of \\(B\\)\n\\(B^T u\\)\nThe element-by-element product of \\(B\\) with itself\nThe dot product of \\(u\\) with the first row of \\(B\\)\n\n\n\n\n\n1.5.2 arange, linspace, zeros, ones, and meshgrid\nThere are a few built-in ways to build arrays in numpy that save a bit of time in many scientific computing settings.\n\n\nExample 1.38 The np.arange (array range) function is great for building sequences.\nimport numpy as np\nx = np.arange(0,0.6,0.1)\nprint(x)\nnp.arange builds an array of floating point numbers with the arguments start, stop, and step. Note that the stop value itself is not included in the result.\n\n\n\nExample 1.39 The np.linspace function builds an array of floating point numbers starting at one point, ending at the next point, and have exactly the number of points specified with equal spacing in between: start, stop, number of points.\nimport numpy as np\ny = np.linspace(0,5,11)\nprint(y)\nIn a linear space you are always guaranteed to hit the stop point exactly, but you do not have direct control over the step size.\n\n\n\nExample 1.40 The np.zeros function builds an array of zeros. This is handy for pre-allocating memory.\nimport numpy as np\nz = np.zeros((3,5)) # create a 3x5 matrix of zeros\nprint(z)\n\n\n\nExample 1.41 The np.ones function builds an array of ones.\nimport numpy as np\nu = np.ones((3,5)) # create a 3x5 matrix of ones\nprint(u)\n\n\n\nExample 1.42 The np.meshgrid function builds two arrays that when paired make up the ordered pairs for a 2D (or higher D) mesh grid of points. This is handy for building 2D (or higher dimensional) arrays of data for multi-variable functions. Notice that the output is defined as a tuple.\nimport numpy as np\nx, y = np.meshgrid( np.linspace(0,5,6) , np.linspace(0,5,6) )\nprint(\"x = \", x)\nprint(\"y = \", y)\nThe thing to notice with the np.meshgrid() function is that when you lay the two arrays on top of each other, the matching entries give every ordered pair in the domain.\nIf the purpose of this is not clear to you yet, don’t worry. You will see it used a lot later in the module.\n\n\n\nExercise 1.21 Now it is time to practice with some of these numpy functions.\n\nCreate a numpy array of the numbers 1 through 10 and square every entry in the list without using a loop.\nCreate a \\(10 \\times 10\\) identity matrix and change the top right corner to a 5. Hint: np.identity()\nFind the matrix-vector product of the answer to part (b) and the answer to part (a).\nChange the bottom row of your matrix from part (b) to all \\(3\\)’s, then change the third column to all \\(7\\)’s, and then find the \\(5^{th}\\) power of this matrix.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Essential Python</span>"
    ]
  },
  {
    "objectID": "nmPython.html#plotting-with-matplotlib",
    "href": "nmPython.html#plotting-with-matplotlib",
    "title": "1  Essential Python",
    "section": "1.6 Plotting with Matplotlib",
    "text": "1.6 Plotting with Matplotlib\nA key part of scientific computing is plotting your results or your data. The tool in Python best-suited to this task is the package matplotlib. As with all of the other packages in Python, it is best to learn just the basics first and then to dig deeper later. One advantage to using matplotlib in Python is that it is modelled off of MATLAB’s plotting tools. People coming from a MATLAB background should feel pretty comfortable here, but there are some differences to be aware of.\n\n1.6.1 Basics with plt.plot()\nWe are going to start right away with an example. In this example, however, we will walk through each of the code chunks one-by-one so that we understand how to set up a proper plot.\nBelow we will mention some tricks for getting the plots to render that only apply to Jupyter Notebooks. If you are using Google Colab then you may not need some of these little tricks.\n\n\nExample 1.43 (Plotting with matplotlib) In the first example we want to simply plot the sine function on the domain \\(x \\in [0,2\\pi]\\), colour it green, put a grid on it, and give a meaningful legend and axis labels. To do so we first need to take care of a couple of housekeeping items.\n\nImport numpy so we can take advantage of some good numerical routines.\nImport matplotlib’s pyplot module. The standard way to pull it in is with the nickname plt (just like with numpy when we import it as np).\n\n\nimport numpy as np \nimport matplotlib.pyplot as plt\n\nIn Jupyter Notebooks the plots will not show up unless you tell the notebook to put them “inline.” Usually we will use the following command to get the plots to show up. You do not need to do this in Google Colab. The percent sign is called a magic command in Jupyter Notebooks. This is not a Python command, but it is a command for controlling the Jupyter IDE specifically.\n%matplotlib inline\nNow we will build a numpy array of \\(x\\) values (using the np.linspace function) and a numpy array of \\(y\\) values from the sine function.\n\n# 100 equally spaced points from 0 to 2pi\nx = np.linspace(0,2*np.pi, 100) \ny = np.sin(x)\n\n\nNext, build the plot with plt.plot(). The syntax is: plt.plot(x, y, ’color’, ...) where you have several options that you can pass (more on that later).\nWe send the plot label directly to the plot function. This is optional and we could set the legend up separately if we like.\nThen we will add the grid with plt.grid()\nThen we will add the legend to the plot\nFinally we will add the axis labels\nWe end the plotting code with plt.show() to tell Python to finally show the plot. This line of code tells Python that you are done building that plot.\n\n\nplt.plot(x,y, 'green', label='The Sine Function')\nplt.grid()\nplt.legend()\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\nplt.show()\n\n\n\n\n\n\n\nFigure 1.1: The sine function\n\n\n\n\n\n\n\n\nExample 1.44 Now let us do a second example, but this time we want to show four different plots on top of each other. When you start a figure, matplotlib is expecting all of those plots to be layered on top of each other. (Note:For MATLAB users, this means that you do not need the hold on command since it is automatically “on.”)\nIn this example we will plot \\[\\begin{equation}\ny_0 = \\sin(2\\pi x) \\quad y_1 = \\cos(2 \\pi x) \\quad y_2 = y_0 + y_1 \\quad \\text{and} \\quad y_3 = y_0 - y_1\n\\end{equation}\\] on the domain \\(x \\in [0,1]\\) with 100 equally spaced points. we will give each of the plots a different line style, built a legend, put a grid on the plot, and give axis labels.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n# %matplotlib inline # you may need this in Jupyter Notebooks\n\n# build the x and y values\nx = np.linspace(0,1,100)\ny0 = np.sin(2*np.pi*x)\ny1 = np.cos(2*np.pi*x)\ny2 = y0 + y1\ny3 = y0 - y1\n\n# plot each of the functions \n# (notice that they will be on the same axes)\nplt.plot(x, y0, 'b-.', label=r\"$y_0 = \\sin(2\\pi x)$\")\nplt.plot(x, y1, 'r--', label=r\"$y_1 = \\cos(2\\pi x)$\")\nplt.plot(x, y2, 'g:', label=r\"$y_2 = y_0 + y_1$\")\nplt.plot(x, y3, 'k-', label=r\"$y_3 = y_0 - y_1$\")\n\n# put in a grid, legend, title, and axis labels\nplt.grid()\nplt.legend()\nplt.title(\"Awesome Graph\")\nplt.xlabel('x axis label')\nplt.ylabel('y axis label')\nplt.show()\n\n\n\n\n\n\n\nFigure 1.2: Plots of the sine, cosine, and sums and differences.\n\n\n\n\n\nNotice the r in front of the strings defining the legend. This prevents the backslash that is used a lot in LaTeX to be interpreted as an escape character. These strings are referred to as raw strings.\nThe legend was placed automatically at the lower left of the plot. There are ways to control the placement of the legend if you wish, but for now just let Python and matplotlib have control over the placement.\n\n\n\nExample 1.45 Now let us create the same plot with slightly different code. The plot function can take several \\((x, y)\\) pairs in the same line of code. This can really shrink the amount of coding that you have to do when plotting several functions on top of each other.\n\n# The next line of code does all of the plotting of all \n# of the functions.  Notice the order: x, y, color and \n# line style, repeat\nimport numpy as np\nimport matplotlib.pyplot as plt\nx = np.linspace(0,1,100)\ny0 = np.sin(2*np.pi*x)\ny1 = np.cos(2*np.pi*x)\ny2 = y0 + y1\ny3 = y0 - y1\nplt.plot(x, y0, 'b-.', x, y1, 'r--', x, y2, 'g:', x, y3, 'k-')\n\nplt.grid()\nplt.legend([r\"$y_0 = \\sin(2\\pi x)$\",r\"$y_1 = \\cos(2\\pi x)$\",\\\n            r\"$y_2 = y_0 + y_1$\",r\"$y_3 = y_0 - y_1$\"])\nplt.title(\"Awesome Graph\")\nplt.xlabel('x axis label')\nplt.ylabel('y axis label')\nplt.show()\n\n\n\n\n\n\n\nFigure 1.3: A second plot of the sine, cosine, and sums and differences.\n\n\n\n\n\n\n\n\nExercise 1.22 Plot the functions \\(f(x) = x^2\\), \\(g(x) = x^3\\), and \\(h(x) = x^4\\) on the same axes. Use the domain \\(x \\in [0,1]\\) and the range \\(y \\in [0,1]\\). Put a grid, a legend, a title, and appropriate labels on the axes.\n\n\n\n\n1.6.2 Subplots\nIt is often very handy to place plots side-by-side or as some array of plots. The subplots command allows us that control. The main idea is that we are setting up a matrix of blank plots and then populating the axes with the plots that we want.\n\n\nExample 1.46 Let us repeat the previous exercise, but this time we will put each of the plots in its own subplot. There are a few extra coding quirks that come along with building subplots so we will highlight each block of code separately.\n\nFirst we set up the plot area with plt.subplots(). The first two inputs to the subplots command are the number of rows and the number of columns in your plot array. For the first example we will do 2 rows of plots with 2 columns – so there are four plots total.\nThen we build each plot individually telling matplotlib which axes to use for each of the things in the plots.\nNotice the small differences in how we set the titles and labels\nIn this example we are setting the \\(y\\)-axis to the interval \\([-2,2]\\) for consistency across all of the plots.\n\n\n# set up the blank matrix of plots\nimport numpy as np\nimport matplotlib.pyplot as plt\nx = np.linspace(0,1,100)\ny0 = np.sin(2*np.pi*x)\ny1 = np.cos(2*np.pi*x)\ny2 = y0 + y1\ny3 = y0 - y1\n\nfig, axes = plt.subplots(nrows = 2, ncols = 2)\n\n# Build the first plot\naxes[0,0].plot(x, y0, 'b-.')\naxes[0,0].grid()\naxes[0,0].set_title(r\"$y_0 = \\sin(2\\pi x)$\")\naxes[0,0].set_ylim(-2,2)\naxes[0,0].set_xlabel(\"x\")\naxes[0,0].set_ylabel(\"y\")\n\n# Build the second plot\naxes[0,1].plot(x, y1, 'r--')\naxes[0,1].grid()\naxes[0,1].set_title(r\"$y_1 = \\cos(2\\pi x)$\")\naxes[0,1].set_ylim(-2,2)\naxes[0,1].set_xlabel(\"x\")\naxes[0,1].set_ylabel(\"y\")\n\n# Build the first plot\naxes[1,0].plot(x, y2, 'g:')\naxes[1,0].grid()\naxes[1,0].set_title(r\"$y_2 = y_0 + y_1$\")\naxes[1,0].set_ylim(-2,2)\naxes[1,0].set_xlabel(\"x\")\naxes[1,0].set_ylabel(\"y\")\n\n# Build the first plot\naxes[1,1].plot(x, y3, 'k-')\naxes[1,1].grid()\naxes[1,1].set_title(r\"$y_3 = y_0 - y_1$\")\naxes[1,1].set_ylim(-2,2)\naxes[1,1].set_xlabel(\"x\")\naxes[1,1].set_ylabel(\"y\")\n\nfig.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 1.4: An example of subplots\n\n\n\n\n\nThe fig.tight_layout() command makes the plot labels a bit more readable in this instance (again, something you can play with).\n\n\n\nExercise 1.23 Put the functions \\(f(x) = x^2\\), \\(g(x) = x^3\\) and \\(h(x) = x^4\\) in a subplot environment with 1 row and 3 columns of plots. Use the unit interval as the domain and range for all three plot, but sure that each plot has a grid, appropriate labels, an appropriate title, and the overall figure has a title.\n\n1.6.3 Logarithmic Scaling with semilogy, semilogx, and loglog\nIt is occasionally useful to scale an axis logarithmically. This arises most often when we are examining an exponential function, or some other function, that is close to zero for much of the domain. Scaling logarithmically allows us to see how small the function is getting in orders of magnitude instead of as a raw real number. we will use this often in numerical methods.\n\n\n\n\nExample 1.47 In this example we will plot the function \\(y = 10^{-0.01x}\\) on a regular (linear) scale and on a logarithmic scale on the \\(y\\) axis. We use the interval \\([0,500]\\) on the \\(x\\) axis.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nx = np.linspace(0,500,1000)\ny = 10**(-0.01*x)\nfig, axis = plt.subplots(1,2)\n\naxis[0].plot(x,y, 'r')\naxis[0].grid()\naxis[0].set_title(\"Linearly scaled y axis\")\naxis[0].set_xlabel(\"x\")\naxis[0].set_ylabel(\"y\")\n\naxis[1].semilogy(x,y, 'r')\naxis[1].grid()\naxis[1].set_title(\"Logarithmically scaled y axis\")\naxis[1].set_xlabel(\"x\")\naxis[1].set_ylabel(\"Log(y)\")\n\nfig.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nFigure 1.5: An example of using logarithmic scaling.\n\n\n\n\n\nIt should be noted that the same result can be achieved using the yscale command along with the plot command instead of using the semilogy command. So you could replace\naxis[1].semilogy(x,y, 'r')\nby\naxis[1].plot(x,y, 'r')\naxis[1].set_yscale(\"log\")\nto produce identical results.\n\n\n\nExercise 1.24 Plot the function \\(f(x) = x^3\\) for \\(x \\in [0,1]\\) on linearly scaled axes, logarithmic axis in the \\(y\\) direction, logarithmically scaled axes in the \\(x\\) direction, and a log-log plot with logarithmic scaling on both axes. Use subplots to put your plots side-by-side. Give appropriate labels, titles, etc.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Essential Python</span>"
    ]
  },
  {
    "objectID": "nmPython.html#sec:pandas",
    "href": "nmPython.html#sec:pandas",
    "title": "1  Essential Python",
    "section": "1.7 Dataframes with Pandas",
    "text": "1.7 Dataframes with Pandas\nThe Pandas package provides Python with the ability to work with tables of data similar to what R provides via its dataframes. As we will not work with data in this module, we do not need to dive deep into the Pandas package. We will only use it to collect computational results into tables for easier display.\n\nExample 1.48 In this example we will build a simple dataframe with Pandas. We will build a table of the first 10 natural numbers and their squares and. We will then display the table.\n\nimport pandas as pd\nimport numpy as np\n\n# Calculate the columns for the table\nn = np.arange(1,11)\nn2 = n**2\nn3 = n**3\n\n# Combine the columns into a data frame with headers\ndf = pd.DataFrame({'n': n, 'n^2': n2, 'n^3': n3})\ndf\n\n\n\n\n\n\n\n\nn\nn^2\nn^3\n\n\n\n\n0\n1\n1\n1\n\n\n1\n2\n4\n8\n\n\n2\n3\n9\n27\n\n\n3\n4\n16\n64\n\n\n4\n5\n25\n125\n\n\n5\n6\n36\n216\n\n\n6\n7\n49\n343\n\n\n7\n8\n64\n512\n\n\n8\n9\n81\n729\n\n\n9\n10\n100\n1000",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Essential Python</span>"
    ]
  },
  {
    "objectID": "nmPython.html#sec-python_exercises",
    "href": "nmPython.html#sec-python_exercises",
    "title": "1  Essential Python",
    "section": "1.8 Problems",
    "text": "1.8 Problems\nThese problem exercises here are meant for you to practice and improve your coding skills. Please refrain from using Gemini, ChatGPT or Copilot or any other AI for solving these exercises. The point is to struggle through the code, get it wrong many times, debug, and then to eventually have working code.\n\n\nExercise 1.25 (This problem is modified from (“Project Euler” n.d.))\nIf we list all of the numbers below 10 that are multiples of 3 or 5 we get 3, 5, 6, and 9. The sum of these multiples is 23. Write code to find the sum of all the multiples of 3 or 5 below 1000. Your code needs to run error free and output only the sum. There are of course many ways you could approach this exercise. Compare your approach to that of others in your group.\n\n\n\nExercise 1.26 (This problem is modified from (“Project Euler” n.d.))\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: \\[\\begin{equation}\n1, 1, 2, 3, 5, 8, 13, 21, 34, 55, \\dots\n\\end{equation}\\] By considering the terms in the Fibonacci sequence whose values do not exceed four million, write code to find the sum of the even-valued terms. Your code needs to run error free and output only the sum.\n\n\n\nExercise 1.27 Write computer code that will draw random numbers from the unit interval \\([0,1]\\), distributed uniformly (using Python’s np.random.rand()), until the sum of the numbers that you draw is greater than 1. Keep track of how many numbers you draw. Then write a loop that does this process many many times. On average, how many numbers do you have to draw until your sum is larger than 1?\n\nHint #1:\n\nUse the np.random.rand()command to draw a single number from a uniform distribution with bounds \\((0,1)\\).\n\nHint #2:\n\nYou should do this more than 1,000,000 times to get a good average …and the number that you get should be familiar!\n\n\n\n\n\nExercise 1.28 My favourite prime number is 8675309. Yep. Jenny’s phone number is prime! Write a script that verifies this fact.\n\nHint:\n\nYou only need to check divisors as large as the square root of 8675309 (why).\n\n\n\n\n\nExercise 1.29 (This problem is modified from (“Project Euler” n.d.))\nWrite a function called that accepts an integer and returns a binary variable:\n\n0 = not prime,\n1 = prime.\n\nNext write a script to find the sum of all of the prime numbers less than 1000.\n\nHint:\n\nRemember that a prime number has exactly two divisors: 1 and itself. You only need to check divisors as large as the square root of \\(n\\). Your script should probably be smart enough to avoid all of the non-prime even numbers.\n\n\n\n\n\nExercise 1.30 (This problem is modified from (“Project Euler” n.d.))\nThe sum of the squares of the first ten natural numbers is, \\[\\begin{equation}\n1^2 + 2^2 + \\dots + 10^2 = 385\n\\end{equation}\\] The square of the sum of the first ten natural numbers is, \\[\\begin{equation}\n(1 + 2 + \\dots + 10)^2 = 55^2 = 3025\n\\end{equation}\\] Hence the difference between the square of the sum of the first ten natural numbers and the sum of the squares is \\(3025 - 385 = 2640\\).\nWrite code to find the difference between the square of the sum of the first one hundred natural numbers and the sum of the squares. Your code needs to run error free and output only the difference.\n\n\n\nExercise 1.31 (This problem is modified from (“Project Euler” n.d.))\nThe prime factors of \\(13195\\) are \\(5, 7, 13\\) and \\(29\\). Write code to find the largest prime factor of the number \\(600851475143\\)? Your code needs to run error free and output only the largest prime factor.\n\n\n\nExercise 1.32 (This problem is modified from (“Project Euler” n.d.))\nThe number 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. Write code to find the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\nHint: You will likely want to use modular division for this problem.\n\n\n\nExercise 1.33 The following iterative sequence is defined for the set of positive integers: \\[\\begin{equation}\n\\begin{aligned} & n \\to \\frac{n}{2} \\quad \\text{(n is even)} \\\\ & n \\to 3n + 1 \\quad \\text{(n is odd)} \\end{aligned}\n\\end{equation}\\] Using the rule above and starting with \\(13\\), we generate the following sequence: \\[\\begin{equation}\n13 \\to 40 \\to 20 \\to 10 \\to 5 \\to 16 \\to 8 \\to 4 \\to 2 \\to 1\n\\end{equation}\\] It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1. This has been verified on computers for massively large starting numbers, but this does not constitute a proof that it will work this way for all starting numbers.\nWrite code to determine which starting number, under one million, produces the longest chain. NOTE: Once the chain starts, the terms are allowed to go above one million.\n\nFootnotes\n\n\n\n\n“Project Euler.” n.d. Accessed December 14, 2023. https://projecteuler.net/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Essential Python</span>"
    ]
  },
  {
    "objectID": "nmPython.html#footnotes",
    "href": "nmPython.html#footnotes",
    "title": "1  Essential Python",
    "section": "",
    "text": "Actually, it is still an open mathematical question whether every integer seed will converge to 1. The Collatz sequence has been checked for many millions of initial seeds and they all converge to 1, but there is no mathematical proof that it will always happen.↩︎\nThere is the sympy package if you want to do symbolic computations, but we will not use that in this module.↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Essential Python</span>"
    ]
  },
  {
    "objectID": "nmApprox.html",
    "href": "nmApprox.html",
    "title": "2  Approximations",
    "section": "",
    "text": "2.1 Binary Numbers\nA computer circuit knows two states: on and off. As such, anything saved in computer memory is stored using base-2 numbers. This is called a binary number system. To fully understand a binary number system it is worth while to pause and reflect on our base-10 number system for a few moments.\nWhat do the digits in the number “735” really mean? The position of each digit tells us something particular about the magnitude of the overall number. The number 735 can be represented as a sum of powers of 10 as\n\\[\\begin{equation}\n735 = 700 + 30 + 5 = 7 \\times 10^2 + 3 \\times 10^1 + 5 \\times 10^0\n\\end{equation}\\]\nand we can read this number as 7 hundreds, 3 tens, and 5 ones. As you can see, in a “positional number system” such as our base-10 system, the position of the number indicates the power of the base, and the value of the digit itself tells you the multiplier of that power. This is contrary to number systems like Roman Numerals where the symbols themselves give us the number, and meaning of the position is somewhat flexible. The number “48,329” can therefore be interpreted as\n\\[\\begin{equation}\n\\begin{split}\n48,329 &= 40,000 + 8,000 + 300 + 20 + 9 \\\\\n&= 4 \\times 10^4 + 8 \\times 10^3 + 3 \\times 10^2 + 2 \\times 10^1 + 9 \\times 10^0,\n\\end{split}\n\\end{equation}\\]\nfour ten thousands, eight thousands, three hundreds, two tens, and nine ones.\nNow let us switch to the number system used by computers: the binary number system. In a binary number system the base is 2 so the only allowable digits are 0 and 1 (just like in base-10 the allowable digits were 0 through 9). In binary (base-2), the number “101,101” can be interpreted as\n\\[\\begin{equation}\n101,101_2 = 1 \\times 2^5 + 0 \\times 2^4 + 1 \\times 2^3 + 1 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0\n\\end{equation}\\]\n(where the subscript “2” indicates the base to the reader). If we put this back into base 10, so that we can read it more comfortably, we get\n\\[101,101_2 = 32 + 0 + 8 + 4 + 0 + 1 = 45_{10}.\\]\nThe reader should take note that the commas in the numbers are only to allow for greater readability – we can easily see groups of three digits and mentally keep track of what we are reading.\nNext we will work with fractions and decimals.\nWe can do a similar thing with binary decimals.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Approximations</span>"
    ]
  },
  {
    "objectID": "nmApprox.html#binary-numbers",
    "href": "nmApprox.html#binary-numbers",
    "title": "2  Approximations",
    "section": "",
    "text": "Exercise 2.1 By hand (no computers!) compute the first 50 terms of this sequence with the initial condition \\(x_0 = 1/10\\).\n\\[\\begin{equation}\nx_{n+1} = \\left\\{ \\begin{array}{ll} 2x_n, & x_n \\in [0,\\frac{1}{2}] \\\\ 2x_n - 1, & x_n \\in (\\frac{1}{2},1] \\end{array} \\right.\n\\end{equation}\\]\n\n\n\nExercise 2.2 Now use a spreadsheet and to do the computations. Do you get the same answers?\n\n\n\nExercise 2.3 Finally, solve this problem with Python. Some starter code is given to you below.\nx = 1.0/10\nfor n in range(50):\n    if x&lt;= 0.5:\n        # put the correct assignment here\n    else:\n        # put the correct assigment here\n    print(x)\n\n\n\nExercise 2.4 It seems like the computer has failed you! What do you think happened on the computer and why did it give you a different answer? What, do you suppose, is the cautionary tale hiding behind the scenes with this problem?\n\n\n\nExercise 2.5 Now what happens with this problem when you start with \\(x_0 = 1/8\\)? Why does this new initial condition work better?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2.6 Express the following binary numbers in base-10.\n\n\\(111_2\\)\n\\(10,101_2\\)\n\\(1,111,111,111_2\\)\n\n\n\n\nExercise 2.7 Explain the joke: There are 10 types of people. Those who understand binary and those who do not.\n\n\n\nExercise 2.8 Discussion: With your group, discuss how you would convert a base-10 number into its binary representation. Once you have a proposed method put it into action on the number \\(237_{10}\\) to show that the base-2 expression is \\(11,101,101_2\\).\n\n\n\nExercise 2.9 Convert the following numbers from base 10 to base 2 or visa versa.\n\nWrite \\(12_{10}\\) in binary\nWrite \\(11_{10}\\) in binary\nWrite \\(23_{10}\\) in binary\nWrite \\(11_2\\) in base \\(10\\)\nWhat is \\(100101_2\\) in base \\(10\\)?\n\n\n\n\nExercise 2.10 Now that you have converted several base-10 numbers to base-2, summarize an efficient technique to do the conversion.\n\n\n\nExample 2.1 Convert the number \\(137\\) from base \\(10\\) to base \\(2\\).\n\n\n\nSolution. One way to do the conversion is to first look for the largest power of \\(2\\) less than or equal to your number. In this case, \\(128=2^7\\) is the largest power of \\(2\\) that is less than \\(137\\). Then looking at the remainder, \\(9\\), look for the largest power of \\(2\\) that is less than this remainder. Repeat until you have the number.\n\\[\\begin{aligned} 137_{10} &= 128 + 8 + 1 \\\\ &= 2^7 + 2^3 + 2^0 \\\\ &= 1 \\times 2^7 + 0 \\times 2^6 + 0 \\times 2^5 + 0 \\times 2^4 + 1 \\times 2^3 + 0 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0 \\\\ &= 10001001_2 \\end{aligned}\\]\n\n\n\n\nExample 2.2 Let us take the base \\(10\\) number \\(5.341_{10}\\) and expand it out to get\n\\[5.341_{10} = 5 + \\frac{3}{10} + \\frac{4}{100} + \\frac{1}{1000} = 5 \\times 10^0 + 3 \\times 10^{-1} + 4 \\times 10^{-2} + 1 \\times 10^{-3}.\\]\nThe position to the right of the decimal point is the negative power of 10 for the given position.\n\n\n\n\nExercise 2.11 The base-2 number \\(1,101.01_2\\) can be expanded in powers of \\(2\\). Fill in the question marks below and observe the pattern in the powers.\n\\[1,101.01_2 = ? \\times 2^3 + 1 \\times 2^2 + 0 \\times 2^1 + ? \\times 2^0 + 0 \\times 2^{?} + 1 \\times 2^{-2}.\\]\n\n\n\nExample 2.3 Convert \\(11.01011_2\\) to base \\(10\\).\nSolution:\n\\[\\begin{aligned} 11.01011_2 &= 2 + 1 + \\frac{0}{2} + \\frac{1}{4} + \\frac{0}{8} + \\frac{1}{16} + \\frac{1}{32} \\\\ &= 1 \\times 2^1 + 1 \\times 2^0 + 0 \\times 2^{-1} + 1 \\times 2^{-2} + 0 \\times 2^{-3} + 1 \\times 2^{-4} + 1 \\times 2^{-5}\\\\ &= 3.34375_{10}. \\end{aligned}\\]\n\n\n\nExercise 2.12 Repeating digits in binary numbers are rather intriguing. The number \\(0.\\overline{0111} = 0.01110111011101110111\\ldots\\) surely also has a decimal representation. I will get you started:\n\\[\\begin{aligned} 0.0_2 &= 0 \\times 2^0 + 0 \\times 2^{-1} = 0.0_{10} \\\\ 0.01_2 &= 0.0_{10} + 1 \\times 2^{-2} = 0.25_{10} \\\\ 0.011_2 &= 0.25_{10} + 1 \\times 2^{-3} = 0.25_{10} + 0.125_{10} = 0.375_{10} \\\\ 0.0111_2 &= 0.375_{10} + 1 \\times 2^{-4} = 0.4375_{10} \\\\ 0.01110_2 &= 0.4375_{10} + 0 \\times 2^{-5} = 0.4375_{10} \\\\ 0.011101_2 &= 0.4375_{10} + 1 \\times 2^{-6} = 0.453125_{10} \\\\ \\vdots & \\qquad \\qquad \\vdots \\qquad \\qquad \\qquad \\vdots \\end{aligned}\\]\nWe want to know what this series converges to in base 10. Work with your partners to approximate the base-10 number.\n\n\n\nExercise 2.13 Convert the following numbers from base 10 to binary.\n\nWhat is \\(1/2\\) in binary?\nWhat is \\(1/8\\) in binary?\nWhat is \\(4.125\\) in binary?\nWhat is \\(0.15625\\) in binary?\n\n\n\n\nExercise 2.14 Convert the base \\(10\\) decimal \\(0.635\\) to binary using the following steps.\n\nMultiply \\(0.635\\) by \\(2\\). The whole number part of the result is the first binary digit to the right of the decimal point.\nTake the result of the previous multiplication and ignore the digit to the left of the decimal point. Multiply the remaining decimal by \\(2\\). The whole number part is the second binary decimal digit.\nRepeat the previous step until you have nothing left, until a repeating pattern has revealed itself, or until your precision is close enough.\n\nExplain why each step gives the binary digit that it does.\n\n\n\nExercise 2.15 Based on your previous problem write an algorithm that will convert base-10 decimals (less than 1) to binary.\n\n\n\nExercise 2.16 Convert the base \\(10\\) fraction \\(1/10\\) into binary. Use your solution to fully describe what went wrong in the Exercise 2.1.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Approximations</span>"
    ]
  },
  {
    "objectID": "nmApprox.html#floating-point-numbers",
    "href": "nmApprox.html#floating-point-numbers",
    "title": "2  Approximations",
    "section": "2.2 Floating Point Numbers",
    "text": "2.2 Floating Point Numbers\nEverything stored in the memory of a computer is a number, but how does a computer actually store a number. More specifically, since computers only have finite memory we would really like to know the full range of numbers that are possible to store in a computer. Clearly, given the uncountable nature of the real numbers, there will be gaps between the numbers that can be stored. We would like to know what gaps in our number system to expect when using a computer to store and do computations on numbers.\n\n\nExercise 2.17 Let us start the discussion with a very concrete example. Consider the number \\(x = -123.15625\\) (in base 10). As we have seen this number can be converted into binary. Indeed\n\\[x = -123.15625_{10} = -1111011.00101_2\\]\n(you should check this).\n\nIf a computer needs to store this number then first they put in the binary version of scientific notation. In this case we write\n\\[x = -1. \\underline{\\hspace{1in}} \\times 2^{\\underline{\\hspace{0.25in}}}\\]\nBased on the fact that every binary number, other than 0, can be written in this way, what three things do you suppose a computer needs to store for any given number?\nUsing your answer to part (b), what would a computer need to store for the binary number \\(x=10001001.1100110011_2\\)?\n\n\n\n\nDefinition 2.1 For any base-2 number \\(x\\) we can write\n\\[x = (-1)^{s} \\times (1+ m) \\times 2^E\\]\nwhere \\(s \\in \\{0,1\\}\\) and \\(m\\) is a binary number such that \\(0 \\le m &lt; 1\\).\nThe number \\(m\\) is called the mantissa or the significand, \\(s\\) is known as the sign bit, and \\(E\\) is known as the exponent.\n\n\n\nExample 2.4 What are the mantissa, sign bit, and exponent for the numbers \\(7_{10}, -7_{10}\\), and \\((0.1)_{10}\\)?\nSolution:\n\nFor the number \\(7_{10}=111_2 = 1.11 \\times 2^2\\) we have \\(s=0, m=0.11\\) and \\(E=2\\).\nFor the number \\(-7_{10}=111_2 = -1.11 \\times 2^2\\) we have \\(s=1, m=0.11\\) and \\(E=2\\).\nFor the number \\(\\frac{1}{10} = 0.000110011001100\\cdots = 1.100110011 \\times 2^{-4}\\) we have \\(s=0, m=0.100110011\\cdots\\), and \\(E = -4\\).\n\n\n\nIn the last part of the previous example we saw that the number \\((0.1)_{10}\\) is actually a repeating decimal in base-2. This means that in order to completely represent the number \\((0.1)_{10}\\) in base-2 we need infinitely many decimal places. Obviously that cannot happen since we are dealing with computers with finite memory. Over the course of the past several decades there have been many systems developed to properly store numbers. The IEEE standard that we now use is the accumulated effort of many computer scientists, much trial and error, and deep scientific research. We now have three standard precisions for storing numbers on a computer: single, double, and extended precision. The double precision standard is what most of our modern computers use.\n\n\nDefinition 2.2 There are two common precisions for storing numbers in a computer.\n\nA single-precision number consists of 32 bits, with 1 bit for the sign, 8 for the exponent, and 23 for the significand.\nA double-precision number consists of 64 bits with 1 bit for the sign, 11 for the exponent, and 52 for the significand.\n\n\n\n\nDefinition 2.3 (Machine precision) Machine precision is the gap between the number 1 and the next larger floating point number. Often it is represented by the symbol \\(\\epsilon\\). To clarify, the number 1 can always be stored in a computer system exactly and if \\(\\epsilon\\) is machine precision for that computer then \\(1+\\epsilon\\) is the next largest number that can be stored with that machine.\n\n\nFor all practical purposes the computer cannot tell the difference between two numbers if the difference is smaller than machine precision. This is of the utmost important when you want to check that something is “zero” since a computer just cannot know the difference between \\(0\\) and \\(\\epsilon\\).\n\nExercise 2.18 To make all of these ideas concrete let us play with a small computer system where each number is stored in the following format:\n\\[s \\, E \\, b_1 \\, b_2 \\, b_3\\]\nThe first entry is a bit for the sign (\\(0=+\\) and \\(1=-\\)). The second entry, \\(E\\) is for the exponent, and we will assume in this example that the exponent can be 0, 1, or \\(-1\\). The three bits on the right represent the significand of the number. Hence, every number in this number system takes the form\n\\[(-1)^s \\times (1+ 0.b_1b_2b_3) \\times 2^{E}\\]\n\nWhat is the smallest positive number that can be represented in this form?\nWhat is the largest positive number that can be represented in this form?\nWhat is the machine precision in this number system?\nWhat would change if we allowed \\(E \\in \\{-2,-1,0,1,2\\}\\)?\n\n\n\n\nExercise 2.19 What are the largest and smallest numbers that can be stored in single and double precision?\n\n\n\nExercise 2.20 What is machine precision for the single and double precision standard?\n\n\n\nExercise 2.21 What is the gap between \\(2^n\\) and the next largest number that can be stored in double precision?\n\n\n\nMuch more can be said about floating point numbers such as how we store infinity, how we store NaN, and how we store 0. The Wikipedia page for floating point arithmetic might be of interest for the curious reader. It is beyond the scope of this module to go into all of those details here. Instead, the biggest takeaway points from this section and the previous are:\n\nAll numbers in a computer are stored with finite precision.\nNice numbers like 0.1 are sometimes not machine representable in binary.\nMachine precision is the gap between 1 and the next largest number that can be stored.\nThe gap between one number and the next grows in proportion to the number.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Approximations</span>"
    ]
  },
  {
    "objectID": "nmApprox.html#loss-of-significant-digits",
    "href": "nmApprox.html#loss-of-significant-digits",
    "title": "2  Approximations",
    "section": "2.3 Loss of significant digits",
    "text": "2.3 Loss of significant digits\nAs we have discussed, when representing real numbers by floating point numbers in the computer, rounding errors will usually occur. However each individual rounding error is only a tiny fraction of the actual number, so should not really matter. However, calculations usually involve a number of steps, and if we are not careful then the rounding errors can get magnified if we perform the steps in an unfortunate way. The following exercises will illustrate this.\n\n\nExample 2.5 Consider the expression \\[\n(10^{10} + 0.123456789) - 10^{10}.\n\\] Mathematically the two terms of \\(10^{10}\\) simply cancel out leaving just \\(0.123456789\\). However, let us evaluate this in Python:\n\n10**10 + 0.123456789 - 10**10\n\n0.12345695495605469\n\n\nOnly the first six digits after the decimal point were preserved, the other digits were replaced by something seemingly random. The reason should be clear. The computer makes a rounding error when it tries to store the \\(10000000000.123456789\\). This is known as the loss of significant digits. It occurs whenever you subtract two almost equal numbers from each other.\n\n\n\nExercise 2.22 Consider the trigonometric idenity \\[\n2\\sin^2(x/2) = 1 - \\cos(x).\n\\] It gives us two different methods to calculate the same quantity. Ask Python to evaluate both sides of the identity. If you want to calculate \\(1 - \\cos(x)\\) with the highest precision, which expression would you use? Discuss.\n\n\n\nExercise 2.23 You know how fo find the solutions to the quadratic equation \\[\na x^2+bx+c=0.\n\\] You know the quadratic formula. For the larger of the two solutions the formula is \\[\nx = \\frac{-b+\\sqrt{b^2-4ac}}.\n\\] Let’s assume that the parameters are given as \\[ a = 1,~~~b = 1000000, ~~~ c = 1.\\] Use the quadratic formula to find the larger of the two solutions, by coding the formula up in Python. You should get a solution slightly larger than 1. Then check whether your value for \\(x\\) really does solve the quadratic equation by evaluating \\(ax^2+bx+c\\) with your value of \\(x\\). You will notice that it does not work. Discuss the cause of the error.\nNow rearrange the quadratic formula for the larger solution by multiplying both the numerator and denominator by \\(-b-\\sqrt{b^2-4ac}\\) and then simplify by multiplying out the resulting numerator. This should give you the alternative formula \\[\nx = \\frac{2c}{-b-\\sqrt{b^2-4ac}}.\n\\] Can you see why this expression will work better for the given parameter values? Again evaluate \\(x\\) with Python and then check it by substituting into the quadratic expression. What do you find?\n\nThese exercises should suffice to make you sensitive to the issue of loss of significant figures.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Approximations</span>"
    ]
  },
  {
    "objectID": "nmApprox.html#sec-Taylor",
    "href": "nmApprox.html#sec-Taylor",
    "title": "2  Approximations",
    "section": "2.4 Approximating Functions",
    "text": "2.4 Approximating Functions\nHow does a computer understand a function like \\(f(x) = e^x\\) or \\(f(x) = \\sin(x)\\) or \\(f(x) = \\log(x)\\)? What happens under the hood, so to speak, when you ask a computer to do a computation with one of these functions? A computer is darn good at arithmetic, but working with transcendental functions like these, or really any other sufficiently complicated functions for that matter, is not something that comes naturally to a computer. What is actually happening under the hood is that the computer only approximates the functions.\n\n\nExercise 2.24 In this problem we are going to make a bit of a wish list for all of the things that a computer will do when approximating a function. We are going to complete the following sentence:\nIf we are going to approximate a smooth function \\(f(x)\\) near the point \\(x=x_0\\) with a simpler function \\(g(x)\\) then …\n(I will get us started with the first two things that seems natural to wish for. The rest of the wish list is for you to complete.)\n\nthe functions \\(f(x)\\) and \\(g(x)\\) should agree at \\(x=x_0\\). In other words, \\(f(x_0) = g(x_0)\\)\nthe function \\(g(x)\\) should only involve addition, subtraction, multiplication, division, and integer exponents since computer are very good at those sorts of operations.\nif \\(f(x)\\) is increasing / decreasing near \\(x=x_0\\) then \\(g(x)\\) …\nif \\(f(x)\\) is concave up / down near \\(x=x_0\\) then \\(g(x)\\)…\nif we zoom into plots of the functions \\(f(x)\\) and \\(g(x)\\) near \\(x=x_0\\) then …\n… is there anything else that you would add?\n\n\n\n\nExercise 2.25 Discuss: Could a polynomial function with a high enough degree satisfy everything in the wish list from the previous problem? Explain your reasoning.\n\n\n\nExercise 2.26 Let us put some parts of the wish list into action. If \\(f(x)\\) is a differentiable function at \\(x=x_0\\) and if \\(g(x) = A + B (x-x_0) + C (x-x_0)^2 + D (x-x_0)^3\\) then\n\nWhat is the value of \\(A\\) such that \\(f(x_0) = g(x_0)\\)? (Hint: substitute \\(x=x_0\\) into the \\(g(x)\\) function)\nWhat is the value of \\(B\\) such that \\(f'(x_0) = g'(x_0)\\)? (Hint: Start by taking the derivative of \\(g(x)\\))\nWhat is the value of \\(C\\) such that \\(f''(x_0) = g''(x_0)\\)?\nWhat is the value of \\(D\\) such that \\(f'''(x_0) = g'''(x_0)\\)?\n\n\n\n\nExercise 2.27 Let \\(f(x) = e^x\\). Put the answers to the previous question into action and build a cubic polynomial that approximates \\(f(x) = e^x\\) near \\(x_0=0\\).\n\n\nIn the previous 4 exercises you have built up some basic intuition for what we would want out of a mathematical operation that might build an approximation of a complicated function. What we have built is actually a way to get better and better approximations for functions out to pretty much any arbitrary accuracy that we like so long as we are near some anchor point (which we called \\(x_0\\) in the previous exercises).\nIn the next several problems you will unpack the approximations of \\(f(x) = e^x\\) a bit more carefully and we will wrap the whole discussion with a little bit of formal mathematical language. Then we will examine other functions like sine, cosine, logarithms, etc. One of the points of this whole discussion is to give you a little glimpse as to what is happening behind the scenes in scientific programming languages when you do computations with these functions. A bigger point is to start getting a feel for how we might go in reverse and approximate an unknown function out of much simpler parts. This last goal is one of the big takeaways from numerical analysis: we can mathematically model highly complicated functions out of fairly simple pieces.\n\n\nExercise 2.28 What is Euler’s number \\(e\\)? You likely remember using this number often in Calculus and Differential Equations. Do you know the decimal approximation for this number? Moreover, is there a way that we could approximate something like \\(\\sqrt{e} = e^{0.5}\\) or \\(e^{-1}\\) without actually having access to the full decimal expansion?\nFor all of the questions below let us work with the function \\(f(x) = e^x\\).\n\nThe function \\(g(x) = 1\\) matches \\(f(x) = e^x\\) exactly at the point \\(x=0\\) since \\(f(0) = e^0 = 1\\). Furthermore if \\(x\\) is very very close to \\(0\\) then the functions \\(f(x)\\) and \\(g(x)\\) are really close to each other. Hence we could say that \\(g(x) = 1\\) is an approximation of the function \\(f(x) = e^x\\) for values of \\(x\\) very very close to \\(x=0\\). Admittedly, though, it is probably pretty clear that this is a horrible approximation for any \\(x\\) just a little bit away from \\(x=0\\).\nLet us get a better approximation. What if we insist that our approximation \\(g(x)\\) matches \\(f(x) = e^x\\) exactly at \\(x=0\\) and ALSO has exactly the same first derivative as \\(f(x)\\) at \\(x=0\\).\n\nWhat is the first derivative of \\(f(x)\\)?\nWhat is \\(f'(0)\\)?\nUse the point-slope form of a line to write the equation of the function \\(g(x)\\) that goes through the point \\((0,f(0))\\) and has slope \\(f'(0)\\). Recall from algebra that the point-slope form of a line is \\(y = f(x_0) + m(x-x_0).\\) In this case we are taking \\(x_0 = 0\\) so we are using the formula \\(g(x) = f(0) + f'(0) (x-0)\\) to get the equation of the line.\n\nWrite Python code to build a plot like Figure 2.1. This plot shows \\(f(x) = e^x\\), our first approximation \\(g(x) = 1\\) and our second approximation \\(g(x) = 1+x\\). You may want to refer back to Exercise 1.22 in the Python chapter.\n\n\n\n\n\n\n\n\n\nFigure 2.1: The first two polynomial approximations of the exponential function.\n\n\n\n\n\n\n\nExercise 2.29 Let us extend the idea from the previous problem to much better approximations of the function \\(f(x) = e^x\\).\n\nLet us build a function \\(g(x)\\) that matches \\(f(x)\\) exactly at \\(x=0\\), has exactly the same first derivative as \\(f(x)\\) at \\(x=0\\), AND has exactly the same second derivative as \\(f(x)\\) at \\(x=0\\). To do this we will use a quadratic function. For a quadratic approximation of a function we just take a slight extension to the point-slope form of a line and use the equation \\[\\begin{equation}\ny = f(x_0) + f'(x_0) (x-x_0) + \\frac{f''(x_0)}{2} (x-x_0)^2.\n\\end{equation}\\] In this case we are using \\(x_0 = 0\\) so the quadratic approximation function looks like \\[\\begin{equation}\ny = f(0) + f'(0) x + \\frac{f''(0)}{2} x^2.\n\\end{equation}\\]\n\nFind the quadratic approximation for \\(f(x) = e^x\\).\nHow do you know that this function matches \\(f(x)\\) is all of the ways described above at \\(x=0\\)?\nAdd your new function to the plot you created in the previous problem.\n\nLet us keep going!! Next we will do a cubic approximation. A cubic approximation takes the form \\[\\begin{equation}\ny = f(x_0) + f'(0) (x-x_0) + \\frac{f''(0)}{2}(x-x_0)^2 + \\frac{f'''(0)}{3!}(x-x_0)^3\n\\end{equation}\\]\n\nFind the cubic approximation for \\(f(x) = e^x\\).\nHow do we know that this function matches the first, second, and third derivatives of \\(f(x)\\) at \\(x=0\\)?\nAdd your function to the plot.\nPause and think: What’s the deal with the \\(3!\\) on the cubic term?\n\nYour turn: Build the next several approximations of \\(f(x) = e^x\\) at \\(x=0\\). Add these plots to the plot that we have been building all along.\n\n\n\n\nExercise 2.30 Use the functions that you have built to approximate \\(\\frac{1}{e} = e^{-1}\\). Check the accuracy of your answer using np.exp(-1) in Python.\n\n\nWhat we have been exploring so far in this section is the Taylor Series of a function.\n\nDefinition 2.4 (Taylor Series) If \\(f(x)\\) is an infinitely differentiable function at the point \\(x_0\\) then \\[\\begin{equation}\nf(x) = f(x_0) + f'(x_0)(x-x_0) + \\frac{f''(x_0)}{2}(x-x_0)^2 + \\cdots \\frac{f^{(n)}(x_0)}{n!}(x-x_0)^n + \\cdots\n\\end{equation}\\] for any reasonably small interval around \\(x_0\\). The infinite polynomial expansion is called the Taylor Series of the function \\(f(x)\\). Taylor Series are named for the mathematician Brook Taylor.\n\n\nThe Taylor Series of a function is often written with summation notation as \\[\\begin{equation}\nf(x) = \\sum_{k=0}^\\infty \\frac{f^{(k)}(x_0)}{k!} (x-x_0)^k.\n\\end{equation}\\] Do not let the notation scare you. In a Taylor Series you are just saying: give me a function that\n\nmatches \\(f(x)\\) at \\(x=x_0\\) exactly,\nmatches \\(f'(x)\\) at \\(x=x_0\\) exactly,\nmatches \\(f''(x)\\) at \\(x=x_0\\) exactly,\nmatches \\(f'''(x)\\) at \\(x=x_0\\) exactly,\netc.\n\n(Take a moment and make sure that the summation notation makes sense to you.)\nMoreover, Taylor Series are built out of the easiest types of functions: polynomials. Computers are rather good at doing computations with addition, subtraction, multiplication, division, and integer exponents, so Taylor Series are a natural way to express functions in a computer. The down side is that we can only get true equality in the Taylor Series if we have infinitely many terms in the series. A computer cannot do infinitely many computations. So, in practice, we truncate Taylor Series after many terms and think of the new polynomial function as being close enough to the actual function so far as we do not stray too far from the anchor \\(x_0\\).\n\n\nExercise 2.31 Verify from your previous work that the Taylor Series centred at \\(x_0 = 0\\) for \\(f(x) = e^x\\) is indeed \\[\\begin{equation}\ne^x = 1 + x + \\frac{x^2}{2} + \\frac{x^3}{3!} + \\frac{x^4}{4!} + \\frac{x^5}{5!} + \\cdots.\n\\end{equation}\\]\n\n\n\nExercise 2.32 Do all of the calculations to show that the Taylor Series centred at \\(x_0 = 0\\) for the function \\(f(x) = \\sin(x)\\) is indeed \\[\\begin{equation}\n\\sin(x) = x - \\frac{x^3}{3!} + \\frac{x^5}{5!} - \\frac{x^7}{7!} + \\cdots\n\\end{equation}\\]\n\n\n\nExercise 2.33 Do all of the calculations to show that the Taylor Series centred at \\(x_0 = 0\\) for the function \\(f(x) = \\cos(x)\\) is indeed \\[\\begin{equation}\n\\cos(x) = 1 - \\frac{x^2}{2!} + \\frac{x^4}{4!} - \\frac{x^6}{6!} + \\cdots\n\\end{equation}\\]\n\n\n\nExercise 2.34 Let us compute a few Taylor Series that are not centred at \\(x_0 = 0\\). For example, let us approximate the function \\(f(x) = \\sin(x)\\) near \\(x_0 = \\frac{\\pi}{2}\\). Near the point \\(x_0 = \\frac{\\pi}{2}\\), the Taylor Series approximation will take the form \\[\\begin{equation}\nf(x) = f\\left( \\frac{\\pi}{2} \\right) + f'\\left( \\frac{\\pi}{2} \\right)\\left( x - \\frac{\\pi}{2} \\right) + \\frac{f''\\left( \\frac{\\pi}{2} \\right)}{2!}\\left( x - \\frac{\\pi}{2} \\right)^2 + \\frac{f'''\\left( \\frac{\\pi}{2} \\right)}{3!}\\left( x - \\frac{\\pi}{2} \\right)^3 + \\cdots\n\\end{equation}\\]\nWrite the first several terms of the Taylor Series for \\(f(x) = \\sin(x)\\) centred at \\(x_0 = \\frac{\\pi}{2}\\). Then write Python code to build the plot below showing successive approximations for \\(f(x) = \\sin(x)\\) centred at \\(\\pi/2\\).\n\n\n\n\n\n\n\n\nFigure 2.2: Taylor series approximation of the sine function.\n\n\n\n\n\n\n\n\nExercise 2.35 Repeat the previous exercise for the function \\[\nf(x) = \\log(x) \\text{ centered at } x_0 = 1.\n\\] Use this to give an approximate value for \\(\\log(1.1)\\).\n\n\n\nExample 2.6 Let us conclude this brief section by examining an interesting example. Consider the function \\[\\begin{equation}\nf(x) = \\frac{1}{1-x}.\n\\end{equation}\\] If we build a Taylor Series centred at \\(x_0 = 0\\) it is not too hard to show that we get \\[\\begin{equation}\nf(x) = 1 + x + x^2 + x^3 + x^4 + x^5 + \\cdots\n\\end{equation}\\] (you should stop now and verify this!). However, if we plot the function \\(f(x)\\) along with several successive approximations for \\(f(x)\\) we find that beyond \\(x=1\\) we do not get the correct behaviour of the function (see Figure 2.3). More specifically, we cannot get the Taylor Series to change behaviour across the vertical asymptote of the function at \\(x=1\\). This example is meant to point out the fact that a Taylor Series will only ever make sense near the point at which you centre the expansion. For the function \\(f(x) = \\frac{1}{1-x}\\) centred at \\(x_0 = 0\\) we can only get good approximations within the interval \\(x \\in (-1,1)\\) and no further.\n\n\nCode\nimport numpy as np\nimport math as ma\nimport matplotlib.pyplot as plt\n\n# build the x and y values\nx = np.linspace(-1,2,101)\ny0 = 1/(1-x)\ny1 = 1 + 0*x\ny2 = 1 + x\ny3 = y2 + x**2\ny4 = y3 + x**3 + x**4 + x**5 + x**6 + x**7 + x**8\n\n# plot each of the functions \nplt.plot(x, y0, 'r-', label=r\"$f(x)=\\sin(x)\")\nplt.plot(x, y1, 'c-', label=r\"constant\")\nplt.plot(x, y2, 'g:', label=r\"linear\")\nplt.plot(x, y3, 'b-.', label=r\"quadratic\")\nplt.plot(x, y4, 'k--', label=r\"8th order\")\n\n# set limits on the y axis\nplt.ylim(-3,5)\n\n# put in a grid, legend, title, and axis labels\nplt.grid()\nplt.legend()\nplt.title(\"Taylor approximations of $f(x)=1/(1-x)$ around $x=0$\")\nplt.show()\n\n\n\n\n\n\n\n\nFigure 2.3: Several Taylor Series approximations of the function \\(f(x) = 1/(1-x)\\).\n\n\n\n\n\n\n\nIn the previous example we saw that we cannot always get approximations from Taylor Series that are good everywhere. For every Taylor Series there is a domain of convergence where the Taylor Series actually makes sense and gives good approximations. While it is beyond the scope of this section to give all of the details for finding the domain of convergence for a Taylor Series, a good heuristic is to observe that a Taylor Series will only give reasonable approximations of a function from the centre of the series to the nearest asymptote. The domain of convergence is typically symmetric about the centre as well. For example:\n\nIf we were to build a Taylor Series approximation for the function \\(f(x) = \\log(x)\\) centred at the point \\(x_0 = 1\\) then the domain of convergence should be \\(x \\in (0,2)\\) since there is a vertical asymptote for the natural logarithm function at \\(x=0\\).\nIf we were to build a Taylor Series approximation for the function \\(f(x) = \\frac{5}{2x-3}\\) centred at the point \\(x_0 = 4\\) then the domain of convergence should be \\(x \\in (1.5, 6.5)\\) since there is a vertical asymptote at \\(x=1.5\\) and the distance from \\(x_0 = 4\\) to \\(x=1.5\\) is 2.5 units.\nIf we were to build a Taylor Series approximation for the function \\(f(x) = \\frac{1}{1+x^2}\\) centred at the point \\(x_0 = 0\\) then the domain of convergence should be \\(x \\in (-1,1)\\). This may seem quite odd (and perhaps quite surprising!) but let us think about where the nearest asymptote might be. To find the asymptote we need to solve \\(1+x^2 = 0\\) but this gives us the values \\(x = \\pm i\\). In the complex plane, the numbers \\(i\\) and \\(-i\\) are 1 unit away from \\(x_0 = 0\\), so the “asymptote” is not visible in a real-valued plot but it is still only one unit away. Hence the domain of convergence is \\(x \\in (-1,1)\\). You may want to pause now and build some plots to show yourself that this indeed appears to be true.\n\nA Taylor Series will give good approximations to the function within the domain of convergence, but will give garbage outside of it. For more details about the domain of convergence of a Taylor Series you can refer to the Taylor Series section of the online Active Calculus Textbook [2].",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Approximations</span>"
    ]
  },
  {
    "objectID": "nmApprox.html#truncation-error",
    "href": "nmApprox.html#truncation-error",
    "title": "2  Approximations",
    "section": "2.5 Truncation Error",
    "text": "2.5 Truncation Error\nThe great thing about Taylor Series is that they allow for the representation of potentially very complicated functions as polynomials – and polynomials are easily dealt with on a computer since they involve only addition, subtraction, multiplication, division, and integer powers. The down side is that the order of the polynomial is infinite. Hence, every time we use a Taylor series on a computer we are actually going to be using is a Truncated Taylor Series where we only take a finite number of terms. The idea here is simple in principle:\n\nIf a function \\(f(x)\\) has a Taylor Series representation it can be written as an infinite sum.\nComputers cannot do infinite sums.\nSo stop the sum at some point \\(n\\) and throw away the rest of the infinite sum.\nNow \\(f(x)\\) is approximated by some finite sum so long as you stay pretty close to \\(x = x_0\\),\nand everything that we just chopped off of the end is called the remainder for the finite sum.\n\nLet us be a bit more concrete about it. The Taylor Series for \\(f(x) = e^x\\) centred at \\(x_0 = 0\\) is \\[\\begin{equation}\ne^x = 1 + x + \\frac{x^2}{2!} + \\frac{x^3}{3!} + \\frac{x^4}{4!} + \\cdots.\n\\end{equation}\\]\n\n\\(0^{th}\\) Order Approximation of \\(f(x) = e^x\\):\n\nIf we want to use a zeroth-order (constant) approximation \\(f_0(x)\\) of the function \\(f(x) = e^x\\) then we only take the first term in the Taylor Series and the rest is not used for the approximation \\[\\begin{equation}\ne^x = \\underbrace{1}_{\\text{$0^{th}$ order approximation}} + \\underbrace{x + \\frac{x^2}{2!} + \\frac{x^3}{3!} + \\frac{x^4}{4!} + \\cdots}_{\\text{remainder}}.\n\\end{equation}\\] Therefore we would approximate \\(e^x\\) as \\(e^x \\approx 1=f_0(x)\\) for values of \\(x\\) that are close to \\(x_0 = 0\\). Furthermore, for small values of \\(x\\) that are close to \\(x_0 = 0\\) the largest term in the remainder is \\(x\\) (since for small values of \\(x\\) like 0.01, \\(x^2\\) will be even smaller, \\(x^3\\) even smaller than that, etc). This means that if we use a \\(0^{th}\\) order approximation for \\(e^x\\) then we expect our error to be about the same size as \\(x\\). It is common to then rewrite the truncated Taylor Series as \\[\\begin{equation}\n\\text{$0^{th}$ order approximation: } e^x \\approx 1 + \\mathcal{O}(x)\n\\end{equation}\\] where \\(\\mathcal{O}(x)\\) (read “Big-O of \\(x\\)”) tells us that the expected error for approximations close to \\(x_0 = 0\\) is about the same size as \\(x\\).\n\n\\(1^{st}\\) Order Approximation of \\(f(x) = e^x\\):\n\nIf we want to use a first-order (linear) approximation \\(f_1(x)\\) of the function \\(f(x) = e^x\\) then we gather the \\(0^{th}\\) order and \\(1^{st}\\) order terms together as our approximation and the rest is the remainder \\[\\begin{equation}\ne^x = \\underbrace{1 + x}_{\\text{$1^{st}$ order approximation}} + \\underbrace{\\frac{x^2}{2!} + \\frac{x^3}{3!} + \\frac{x^4}{4!} + \\cdots}_{\\text{remainder}}.\n\\end{equation}\\] Therefore we would approximate \\(e^x\\) as \\(e^x \\approx 1+x=f_1(x)\\) for values of \\(x\\) that are close to \\(x_0 = 0\\). Furthermore, for values of \\(x\\) very close to \\(x_0 = 0\\) the largest term in the remainder is the \\(x^2\\) term. Using Big-O notation we can write the approximation as \\[\\begin{equation}\n\\text{$1^{st}$ order approximation: } e^x \\approx 1 + x + \\mathcal{O}(x^2).\n\\end{equation}\\] Notice that we do not explicitly say what the coefficient is for the \\(x^2\\) term. Instead we are just saying that using the linear function \\(y=1+x\\) to approximate \\(e^x\\) for values of \\(x\\) near \\(x_0=0\\) will result in errors that are of the order of \\(x^2\\).\n\n\\(2^{nd}\\) Order Approximation of \\(f(x) = e^x\\):\n\nIf we want to use a second-order (quadratic) approximation \\(f_2(x)\\) of the function of \\(f(x) = e^x\\) then we gather the \\(0^{th}\\) order, \\(1^{st}\\) order, and \\(2^{nd}\\) order terms together as our approximation and the rest is the remainder \\[\\begin{equation}\ne^x = \\underbrace{1 + x + \\frac{x^2}{2!}}_{\\text{$2^{nd}$ order approximation}} + \\underbrace{\\frac{x^3}{3!} + \\frac{x^4}{4!} + \\cdots}_{\\text{remainder}}.\n\\end{equation}\\] Therefore we would approximate \\(e^x\\) as \\(e^x \\approx 1+x+\\frac{x^2}{2}=f_2(x)\\) for values of \\(x\\) that are close to \\(x_0 = 0\\). Furthermore, for values of \\(x\\) very close to \\(x_0 = 0\\) the largest term in the remainder is the \\(x^3\\) term. Using Big-O notation we can write the approximation as \\[\\begin{equation}\n\\text{$2^{nd}$ order approximation: } e^x \\approx 1 + x + \\frac{x^2}{2} + \\mathcal{O}(x^3).\n\\end{equation}\\] Again notice that we do not explicitly say what the coefficient is for the \\(x^3\\) term. Instead we are just saying that using the quadratic function \\(y=1+x+\\frac{x^2}{2}\\) to approximate \\(e^x\\) for values of \\(x\\) near \\(x_0=0\\) will result in errors that are of the order of \\(x^3\\).\n\n\nKeep in mind that this sort of analysis is only good for values of \\(x\\) that are very close to the centre of the Taylor Series. If you are making approximations that are too far away then all bets are off.\nFor the function \\(f(x) = e^x\\) the idea of approximating the amount of approximation error by truncating the Taylor Series is relatively straight forward: if we want an \\(n^{th}\\) order polynomial approximation \\(f_n(x)\\) of the function of \\(f(x)=e^x\\) near \\(x_0 = 0\\) then \\[\\begin{equation}\ne^x = 1 + x + \\frac{x^2}{2!} + \\frac{x^3}{3!} + \\frac{x^4}{4!} + \\cdots + \\frac{x^n}{n!} + \\mathcal{O}(x^{n+1}),\n\\end{equation}\\] meaning that we expect the error to be of the order of \\(x^{n+1}\\).\n\n\nExercise 2.36 Now make the previous discussion a bit more concrete. You know the Taylor Series for \\(f(x) = e^x\\) around \\(x=0\\) quite well at this point so use it to approximate the values of \\(f(0.1) = e^{0.1}\\) and \\(f(0.2)=e^{0.2}\\) by truncating the Taylor series at different orders. Because \\(x=0.1\\) and \\(x=0.2\\) are pretty close to the centre of the Taylor Series \\(x_0 = 0\\), this sort of approximation is reasonable.\nThen compare your approximate values to Python’s values \\(f(0.1)=e^{0.1} \\approx\\) np.exp(0.1) \\(=1.1051709180756477\\) and \\(f(0.2)=e^{0.2} \\approx\\) np.exp(0.2) \\(=1.2214027581601699\\) to calculate the truncation errors \\(\\epsilon_n(0.1)=|f(0.1)-f_n(0.1)|\\) and \\(\\epsilon_n(0.2)=|f(0.2)-f_n(0.2)|\\).\nFill in the blanks in the table. If you want to create the table in your jupyter notebook, you can use Pandas as described in Section 1.7. Alternatively feel free to use a spreadsheet instead of using Python.\n\n\n\n\n\n\n\n\n\n\nOrder \\(n\\)\n\\(f_n(0.1)\\)\n\\(\\epsilon_n(0.1)=|f(0.1)-f_n(0.1)|\\)\n\\(f_n(0.2)\\)\n\\(\\epsilon_n(0.2)=|f(0.2)-f_n(0.2)|\\)\n\n\n\n\n0\n1\n1.051709e-01\n1\n2.214028e-01\n\n\n1\n1.1\n5.170918e-03\n1.2\n\n\n\n2\n1.105\n\n\n\n\n\n3\n\n\n\n\n\n\n4\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n\nYou will find that, as expected, the truncation errors \\(\\epsilon_n(x)\\) decrease with \\(n\\) but increase with \\(x\\).\n\n\nExercise 2.37 To investigate the dependence of the truncation error \\(\\epsilon_n(x)\\) on \\(n\\) and \\(x\\) a bit more, add an extra column to the table from the previous exercise with the ratio \\(\\epsilon_n(0.2) / \\epsilon_n(0.1)\\).\n\n\n\n\n\n\n\n\n\nOrder \\(n\\)\n\\(\\epsilon_n(0.1)\\)\n\\(\\epsilon_n(0.2)\\)\n\\(\\epsilon_n(0.2) / \\epsilon_n(0.1)\\)\n\n\n\n\n0\n1.051709e-01\n2.214028e-01\n2.105171\n\n\n1\n5.170918e-03\n\n\n\n\n2\n\n\n\n\n\n3\n\n\n\n\n\n4\n\n\n\n\n\n5\n\n\n\n\n\n\nFormulate a conjecture about how \\(\\epsilon_n\\) changes as \\(x\\) changes.\n\n\n\nExercise 2.38 To test your conjecture, examine the truncation error for the sine function near \\(x_0 = 0\\). You know that the sine function has the Taylor Series centred at \\(x_0 = 0\\) as \\[\\begin{equation}\nf(x) = \\sin(x) = x - \\frac{x^3}{3!} + \\frac{x^5}{5!} - \\frac{x^7}{7!} + \\cdots.\n\\end{equation}\\] So there are only approximations of odd order. Use the truncated Taylor series to approximate \\(f(0.1)=\\sin(0.1)\\) and \\(f(0.2)=\\sin(0.2)\\) and use Python’s values np.sin(0.1) and np.sin(0.2) to calculate the truncation errors \\(\\epsilon_n(0.1)=|f(0.1)-f_n(0.1)|\\) and \\(\\epsilon_n(0.2)=|f(0.2)-f_n(0.2)|\\).\nComplete the following table:\n\n\n\n\n\n\n\n\n\n\nOrder \\(n\\)\n\\(\\epsilon_n(0.1)\\)\n\\(\\epsilon_n(0.2)\\)\n\\(\\epsilon_n(0.2)/ \\epsilon_n(0.1)\\)\nYour Conjecture\n\n\n\n\n1\n1.665834e-04\n1.330669e-03\n\n\n\n\n3\n8.331349e-08\n2.664128e-06\n\n\n\n\n5\n1.983852e-11\n\n\n\n\n\n7\n\n\n\n\n\n\n9\n\n\n\n\n\n\n\n\nThe entry in the last row of the table will almost certainly not agree with your conjecture. That is okay! That discrepancy has a different explanation. Can you figure out what it is? Hint: does np.sin(x) give you the exact value of \\(\\sin(x)\\)?\n\n\nExercise 2.39 Perform another check of your conjecture by approximating \\(\\log(1.02)\\) and \\(\\log(1.1)\\) from truncations of the Taylor series around \\(x=1\\): \\[\n\\log(1+x) = x - \\frac{x^2}{2} + \\frac{x^3}{3} - \\frac{x^4}{4} + \\frac{x^5}{5} - \\cdots.\n\\]\n\n\n\nExercise 2.40 Write down your observations about how the truncation error at order \\(n\\) changes as \\(x\\) changes. Explain this in terms of the form of the remainder of the truncated Taylor series.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Approximations</span>"
    ]
  },
  {
    "objectID": "nmApprox.html#problems",
    "href": "nmApprox.html#problems",
    "title": "2  Approximations",
    "section": "2.6 Problems",
    "text": "2.6 Problems\nThese problem exercises will let you consolidate what you have learned so far and combine it with the coding skills you picked up in Chapter 1.\n\n\nExercise 2.41 (This problem is modified from (Greenbaum and Chartier 2012))\nSometimes floating point arithmetic does not work like we would expect (and hope) as compared to by-hand mathematics. In each of the following problems we have a mathematical problem that the computer gets wrong. Explain why the computer is getting these wrong.\n\nMathematically we know that \\(\\sqrt{5}^2\\) should just give us 5 back. In Python type np.sqrt(5)**2 == 5. What do you get and why do you get it?\nMathematically we know that \\(\\left( \\frac{1}{49} \\right) \\cdot 49\\) should just be 1. In Python type (1/49)*49 == 1. What do you get and why do you get it?\nMathematically we know that \\(e^{\\log(3)}\\) should just give us 3 back. In Python type np.exp(np.log(3)) == 3. What do you get and why do you get it?\nCreate your own example of where Python gets something incorrect because of floating point arithmetic.\n\n\n\n\nExercise 2.42 (This problem is modified from (Greenbaum and Chartier 2012))\nIn the 1999 film Office Space, a character creates a program that takes fractions of cents that are truncated in a bank’s transactions and deposits them to his own account. This idea has been attempted in the past and now banks look for this sort of thing. In this problem you will build a simulation of the program to see how long it takes to become a millionaire.\nAssumptions:\n\nAssume that you have access to 50,000 bank accounts.\nAssume that the account balances are uniformly distributed between $100 and $100,000.\nAssume that the annual interest rate on the accounts is 5% and the interest is compounded daily and added to the accounts, except that fractions of cents are truncated.\nAssume that your illegal account initially has a $0 balance.\n\nYour Tasks:\n\nExplain what the code below does.\n\nimport numpy as np\naccounts = 100 + (100000-100) * np.random.rand(50000,1);\naccounts = np.floor(100*accounts)/100;\n\nBy hand (no computer) write the mathematical steps necessary to increase the accounts by (5/365)% per day, truncate the accounts to the nearest penny, and add the truncated amount into an account titled “illegal.”\nWrite code to complete your plan from part (b).\nUsing a while loop, iterate over your code until the illegal account has accumulated $1,000,000. How long does it take?\n\n\n\n\nExercise 2.43 (This problem is modified from (Greenbaum and Chartier 2012))\nIn the 1991 Gulf War, the Patriot missile defence system failed due to roundoff error. The troubles stemmed from a computer that performed the tracking calculations with an internal clock whose integer values in tenths of a second were converted to seconds by multiplying by a 24-bit binary approximation to \\(\\frac{1}{10}\\): \\[\\begin{equation}\n0.1_{10} \\approx 0.00011001100110011001100_2.\n\\end{equation}\\]\n\nConvert the binary number above to a fraction by hand (common denominators would be helpful).\nThe approximation of \\(\\frac{1}{10}\\) given above is clearly not equal to \\(\\frac{1}{10}\\). What is the absolute error in this value?\nWhat is the time error, in seconds, after 100 hours of operation?\nDuring the 1991 war, a Scud missile travelled at approximately Mach 5 (3750 mph). Find the distance that the Scud missile would travel during the time error computed in (c).\n\n\n\n\nExercise 2.44 Find the Taylor Series for \\(f(x) = \\frac{1}{\\log(x)}\\) centred at the point \\(x_0 = e\\). Then use the Taylor Series to approximate the number \\(\\frac{1}{\\log(3)}\\) to 4 decimal places.\n\n\n\nExercise 2.45 In this problem we will use Taylor Series to build approximations for the irrational number \\(\\pi\\).\n\nWrite the Taylor series centred at \\(x_0=0\\) for the function \\[\\begin{equation}\nf(x) = \\frac{1}{1+x}.\n\\end{equation}\\]\nNow we want to get the Taylor Series for the function \\(g(x) = \\frac{1}{1+x^2}\\). It would be quite time consuming to take all of the necessary derivatives to get this Taylor Series. Instead we will use our answer from part (a) of this problem to shortcut the whole process.\n\nSubstitute \\(x^2\\) for every \\(x\\) in the Taylor Series for \\(f(x) = \\frac{1}{1+x}\\).\nMake a few plots to verify that we indeed now have a Taylor Series for the function \\(g(x) = \\frac{1}{1+x^2}\\).\n\nRecall from Calculus that \\[\\begin{equation}\n\\int \\frac{1}{1+x^2} dx = \\arctan(x).\n\\end{equation}\\] Hence, if we integrate each term of the Taylor Series that results from part (b) we should have a Taylor Series for \\(\\arctan(x)\\).1\nNow recall the following from Calculus:\n\n\n\\(\\tan(\\pi/4) = 1\\)\nso \\(\\arctan(1) = \\pi/4\\)\nand therefore \\(\\pi = 4\\arctan(1)\\).\nLet us use these facts along with the Taylor Series for \\(\\arctan(x)\\) to approximate \\(\\pi\\): we can just plug in \\(x=1\\) to the series, add up a bunch of terms, and then multiply by 4. Write a loop in Python that builds successively better and better approximations of \\(\\pi\\). Stop the loop when you have an approximation that is correct to 6 decimal places.\n\n\n\n\nExercise 2.46 In this problem we will prove the famous (and the author’s favourite) formula \\[\\begin{equation}\ne^{i\\theta} = \\cos(\\theta) + i \\sin(\\theta).\n\\end{equation}\\] This is known as Euler’s formula after the famous mathematician Leonard Euler. Show all of your work for the following tasks.\n\nWrite the Taylor series for the functions \\(e^x\\), \\(\\sin(x)\\), and \\(\\cos(x)\\).\nReplace \\(x\\) with \\(i\\theta\\) in the Taylor expansion of \\(e^x\\). Recall that \\(i = \\sqrt{-1}\\) so \\(i^2 = -1\\), \\(i^3 = -i\\), and \\(i^4 = 1\\). Simplify all of the powers of \\(i\\theta\\) that arise in the Taylor expansion. I will get you started: \\[\\begin{equation}\n\\begin{aligned} e^x &= 1 + x + \\frac{x^2}{2} + \\frac{x^3}{3!} + \\frac{x^4}{4!} + \\frac{x^5}{5!} + \\cdots \\\\ e^{i\\theta} &= 1 + (i\\theta) + \\frac{(i\\theta)^2}{2!} + \\frac{(i\\theta)^3}{3!} + \\frac{(i\\theta)^4}{4!} + \\frac{(i\\theta)^5}{5!} + \\cdots \\\\ &= 1 + i\\theta + i^2 \\frac{\\theta^2}{2!} + i^3 \\frac{\\theta^3}{3!} + i^4 \\frac{\\theta^4}{4!} + i^5 \\frac{\\theta^5}{5!} + \\cdots \\\\ &= \\ldots \\text{ keep simplifying ... } \\ldots \\end{aligned}\n\\end{equation}\\]\nGather all of the real terms and all of the imaginary terms together. Factor the \\(i\\) out of the imaginary terms. What do you notice?\nUse your result from part (c) to prove that \\(e^{i\\pi} + 1 = 0\\).\n\n\n\n\nExercise 2.47 In physics, the relativistic energy of an object is defined as \\[\\begin{equation}\nE_{rel} = \\gamma mc^2\n\\end{equation}\\] where \\[\\begin{equation}\n\\gamma = \\frac{1}{\\sqrt{1 - \\frac{v^2}{c^2}}}.\n\\end{equation}\\] In these equations, \\(m\\) is the mass of the object, \\(c\\) is the speed of light (\\(c \\approx 3 \\times 10^8\\)m/s), and \\(v\\) is the velocity of the object. For an object of fixed mass (m) we can expand the Taylor Series centred at \\(v=0\\) for \\(E_{rel}\\) to get \\[\\begin{equation}\nE_{rel} = mc^2 + \\frac{1}{2} mv^2 + \\frac{3}{8} \\frac{mv^4}{c^2} + \\frac{5}{16} \\frac{mv^6}{c^4} + \\cdots.\n\\end{equation}\\]\n\nWhat do we recover if we consider an object with zero velocity?\nWhy might it be completely reasonable to only use the quadratic approximation \\[\\begin{equation}\nE_{rel} = mc^2 + \\frac{1}{2} mv^2\n\\end{equation}\\] for the relativistic energy equation?2\n(some physics knowledge required) What do you notice about the second term in the Taylor Series approximation of the relativistic energy function?\nShow all of the work to derive the Taylor Series centred at \\(v = 0\\) given above.\n\n\n\n\nExercise 2.48 (The Python Caret Operator) Now that you’re used to using Python to do some basic computations you are probably comfortable with the fact that the caret, ^, does NOT do exponentiation like it does in many other programming languages. But what does the caret operator do? That’s what we explore here.\n\nConsider the numbers \\(9\\) and \\(5\\). Write these numbers in binary representation. We are going to use four bits to represent each number (it is OK if the first bit happens to be zero). \\[\\begin{equation}\n\\begin{aligned} 9 &=& \\underline{\\hspace{0.2in}} \\, \\underline{\\hspace{0.2in}} \\, \\underline{\\hspace{0.2in}} \\, \\underline{\\hspace{0.2in}} \\\\ 5 &=& \\underline{\\hspace{0.2in}} \\, \\underline{\\hspace{0.2in}} \\, \\underline{\\hspace{0.2in}} \\, \\underline{\\hspace{0.2in}} \\end{aligned}\n\\end{equation}\\]\nNow go to Python and evaluate the expression 9^5. Convert Python’s answer to a binary representation (again using four bits).\nMake a conjecture: How do we go from the binary representations of \\(a\\) and \\(b\\) to the binary representation for Python’s a^b for numbers \\(a\\) and \\(b\\)? Test and verify your conjecture on several different examples and then write a few sentences explaining what the caret operator does in Python.\n\n\n\n\n\n\n\nGreenbaum, Anne, and Tim P. Chartier. 2012. Numerical Methods: Design, Analysis, and Computer Implementation of Algorithms. Princeton University Press.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Approximations</span>"
    ]
  },
  {
    "objectID": "nmApprox.html#footnotes",
    "href": "nmApprox.html#footnotes",
    "title": "2  Approximations",
    "section": "",
    "text": "There are many reasons why integrating an infinite series term by term should give you a moment of pause. For the sake of this problem we are doing this operation a little blindly, but in reality we should have verified that the infinite series actually converges uniformly.↩︎\nThis is something that people in physics and engineering do all the time – there is some complicated nonlinear relationship that they wish to use, but the first few terms of the Taylor Series captures almost all of the behaviour since the higher-order terms are very very small.↩︎",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Approximations</span>"
    ]
  },
  {
    "objectID": "nmAlgebra.html",
    "href": "nmAlgebra.html",
    "title": "3  Algebra",
    "section": "",
    "text": "3.1 Introduction to Numerical Root Finding\nIn this chapter we want to solve equations using a computer. The goal of equation solving is to find the value of the independent variable which makes the equation true. These are the sorts of equations that you learned to solve at school. For a very simple example, solve for \\(x\\) if \\(x+5 = 2x- 3\\). Or, for another example, the equation \\(x^2+x=2x - 7\\) is an equation that could be solved with the quadratic formula. The equation \\(\\sin(x) = \\frac{\\sqrt{2}}{2}\\) is an equation which can be solved using some knowledge of trigonometry. The topic of Numerical Root Finding really boils down to approximating the solutions to equations without using all of the by-hand techniques that you learned in high school. The down side to everything that we are about to do is that our answers are only ever going to be approximations.\nThe fact that we will only ever get approximate answers begs the question: why would we want to do numerical algebra if by-hand techniques exist? The answers are relatively simple:\nLet us first take a look at equations in a more abstract way. Consider the equation \\(\\ell(x) = r(x)\\) where \\(\\ell(x)\\) and \\(r(x)\\) stand for left-hand and right-hand expressions respectively. To begin solving this equation we can first rewrite it by subtracting the right-hand side from the left to get \\[\\begin{equation}\n\\ell(x) - r(x) = 0.\n\\end{equation}\\] Hence, we can define a function \\(f(x)\\) as \\(f(x)=\\ell(x)-r(x)\\) and observe that every equation can be written as: \\[\\begin{equation}\n\\text{If } f(x) = 0, \\text{ find } x.\n\\end{equation}\\] This gives us a common language for which to frame all of our numerical algorithms. An \\(x\\) where \\(f(x)=0\\) is called a root of \\(f\\) and thus we have seen that solving an equation is always a root finding problem.\nFor example, if we want to solve the equation \\(3\\sin(x) + 9 = x^2 - \\cos(x)\\) then this is the same as solving \\((3\\sin(x) + 9 ) - (x^2 - \\cos(x)) = 0\\). We illustrate this idea in Figure 3.1. You should pause and notice that there is no way that you are going to apply by-hand techniques from algebra to solve this equation … an approximate answer is pretty much our only hope.\nCode\nimport numpy as np \nimport matplotlib.pyplot as plt\nx = np.linspace(-4,4, 100) \nl = 3 * np.sin(x) + 9\nr = x**2 - np.cos(x)\n\nfig, axes = plt.subplots(nrows = 1, ncols = 2)\n\naxes[0].plot(x, l, 'b-.', label=r\"$3\\sin(x)+9$\")\naxes[0].plot(x, r, 'r-', label=r\"$x^2-\\cos(x)$\")\naxes[0].grid()\naxes[0].legend()\naxes[0].set_title(r\"$3\\sin(x)+9 = x^2-\\cos(x)$\")\n\naxes[1].plot(x, l-r, 'g:', label=r\"(3\\sin(x)+9) - (x^2-\\cos(x))\")\naxes[1].plot(x, np.zeros(100), 'k-')\naxes[1].grid()\naxes[1].legend()\naxes[1].set_title(r\"$(3\\sin(x)+9) - (x^2-\\cos(x))=0$\")\n\nfig.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 3.1: Two ways to visualise the same root finding problem\nOn the left-hand side of Figure 3.1 we see the solutions as the intersections of the graph of \\(3\\sin(x) + 9\\) with the graph of \\(x^2 - \\cos(x)\\), and on the right-hand side we see the solutions as the intersections of the graph of \\(\\left( 3\\sin(x)+9 \\right) - \\left( x^2 - \\cos(x) \\right)\\) with the \\(x\\) axis. From either plot we can read off the approximate solutions: \\(x_1 \\approx -2.55\\) and \\(x_2 \\approx 2.88\\). Figure 3.1 should demonstrate what we mean when we say that solving equations of the form \\(\\ell(x) = r(x)\\) will give the same answer as finding the roots of \\(f(x) = \\ell(x)-r(x)\\).\nWe now have one way to view every equation-solving problem. As we will see in this chapter, if \\(f(x)\\) has certain properties then different numerical techniques for solving the equation will apply – and some will be much faster and more accurate than others. In the following sections you will develop several different techniques for solving equations of the form \\(f(x) = 0\\). You will start with the simplest techniques to implement and then move to the more powerful techniques that use some ideas from Calculus to understand and analyse. Throughout this chapter you will also work to quantify the amount of error that one makes when using these techniques.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "nmAlgebra.html#introduction-to-numerical-root-finding",
    "href": "nmAlgebra.html#introduction-to-numerical-root-finding",
    "title": "3  Algebra",
    "section": "",
    "text": "Most equations do not lend themselves to by-hand solutions. The reason you may not have noticed that is that we tend to show you only nice equations that arise in often very simplified situations. When equations arise naturally they are often not nice.\nBy-hand algebra is often very challenging, quite time consuming, and error prone. You will find that the numerical techniques are quite elegant, work very quickly, and require very little overhead to actually implement and verify.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "nmAlgebra.html#sec-bisection",
    "href": "nmAlgebra.html#sec-bisection",
    "title": "3  Algebra",
    "section": "3.2 The Bisection Method",
    "text": "3.2 The Bisection Method\n\n3.2.1 Intuition and Implementation\n\nExercise 3.1 A friend tells you that she is thinking of a number between 1 and 100. She will allow you multiple guesses with some feedback for where the mystery number falls. How do you systematically go about guessing the mystery number? Is there an optimal strategy?\nFor example, the conversation might go like this.\n\nSally: I am thinking of a number between 1 and 100.\nJoe: Is it 35?\nSally: No, 35 is too low.\nJoe: Is it 99?\nSally: No, 99 is too high.\n…\n\n\n\n\nExercise 3.2 Imagine that Sally likes to formulate her answer not in the form “\\(x\\) is too small” or “\\(x\\) is too large” but in the form “\\(f(x)\\) is positive” or “\\(f(x)\\) is negative”. What continuous function could she choose for \\(f(x)\\) so that her new answers contain exactly the same as her previous answers? Give an expression for a possible \\(f(x)\\) assuming that we call Sally’s chosen number \\(x_0\\). Can you now explain how Sally’s game is a root finding game?\n\n\n\nExercise 3.3 Now go and play the game with other functions \\(f(x)\\). Choose someone from your group to be Sally and someone else to be Joe. Sally can choose a continuous function and Joe needs to guess its root. Does your strategy still allow Joe to find the root of \\(f(x)\\)? Does Sally need to give Joe some extra information to give him a fighting chance?\n\n\n\nExercise 3.4 Was it necessary to say that Sally’s function was continuous? Does your strategy work if the function is not continuous.\n\n\nNow let us get to the maths. We will start the mathematical discussion with a theorem from Calculus.\n\nTheorem 3.1 (The Intermediate Value Theorem (IVT)) If \\(f(x)\\) is a continuous function on the closed interval \\([a,b]\\) and \\(y_*\\) lies between \\(f(a)\\) and \\(f(b)\\), then there exists some point \\(x_* \\in [a,b]\\) such that \\(f(x_*) = y_*\\).\n\n\n\nExercise 3.5 Draw a picture of what the intermediate value theorem says graphically.\n\n\n\nExercise 3.6 If \\(y_*=0\\) the Intermediate Value Theorem gives us important information about solving equations. What does it tell us?\n\n\n\nCorollary 3.1 If \\(f(x)\\) is a continuous function on the closed interval \\([a,b]\\) and if \\(f(a)\\) and \\(f(b)\\) have opposite signs then from the Intermediate Value Theorem we know that there exists some point \\(x_* \\in [a,b]\\) such that ____.\n\n\n\nExercise 3.7 Fill in the blank in the previous corollary and then draw several pictures that indicate why this might be true for continuous functions.\n\n\nThe Intermediate Value Theorem (IVT) and its corollary are existence theorems in the sense that they tell us that some point exists. The annoying thing about mathematical existence theorems is that they typically do not tell us how to find the point that is guaranteed to exist. The method that you developed in Exercise 3.1 to Exercise 3.3 gives one possible way to find the root.\nIn those exercises you likely came up with an algorithm such as this:\n\nSay we know that a continuous function has opposite signs at \\(x=a\\) and \\(x=b\\).\nGuess that the root is at the midpoint \\(m = \\frac{a+b}{2}\\).\nBy using the signs of the function, narrow the interval which contains the root to either \\([a,m]\\) or \\([m,b]\\).\nRepeat\n\nNow we will turn this strategy into computer code that will simply play the game for us. But first we need to pay careful attention to some of the mathematical details.\n\n\nExercise 3.8 Where is the Intermediate Value Theorem used in the root-guessing strategy?\n\n\n\nExercise 3.9 Why was it important that the function \\(f(x)\\) is continuous when playing this root-guessing game? Provide a few sketches to demonstrate your answer.\n\n\n\nExercise 3.10 (The Bisection Method) Goal: We want to solve the equation \\(f(x) = 0\\) for \\(x\\) assuming that the solution \\(x^*\\) is in the interval \\([a,b]\\).\nThe Algorithm: Assume that \\(f(x)\\) is continuous on the closed interval \\([a,b]\\). To make approximations of the solutions to the equation \\(f(x) = 0\\), do the following:\n\nCheck to see if \\(f(a)\\) and \\(f(b)\\) have opposite signs. You can do this taking the product of \\(f(a)\\) and \\(f(b)\\).\n\nIf \\(f(a)\\) and \\(f(b)\\) have different signs then what does the IVT tell you?\nIf \\(f(a)\\) and \\(f(b)\\) have the same sign then what does the IVT not tell you? What should you do in this case?\nWhy does the product of \\(f(a)\\) and \\(f(b)\\) tell us something about the signs of the two numbers?\n\nCompute the midpoint of the closed interval, \\(m=\\frac{a+b}{2}\\), and evaluate \\(f(m)\\).\n\nWill \\(m\\) always be a better guess of the root than \\(a\\) or \\(b\\)? Why?\nWhat should you do here if \\(f(m)\\) is really close to zero?\n\nCompare the signs of \\(f(a)\\) versus \\(f(m)\\) and \\(f(b)\\) versus \\(f(m)\\).\n\nWhat do you do if \\(f(a)\\) and \\(f(m)\\) have opposite signs?\nWhat do you do if \\(f(m)\\) and \\(f(b)\\) have opposite signs?\n\nRepeat steps 2 and 3 and stop when \\(f(m)\\) is close enough to zero.\n\n\n\n\nExercise 3.11 Draw a picture illustrating what the Bisection Method does to approximate a solution to an equation \\(f(x) = 0\\).\n\n\n\nExercise 3.12 We want to write a Python function for the Bisection Method. Instead of jumping straight into the code we should ALWAYS write pseudo-code first. It is often helpful to write pseudo-code as comments in your file. Use the template below to complete your pseudo-code.\ndef Bisection(f , a , b , tol):\n# The input parameters are\n# f is a function\n# a is the lower end of the interval\n# b is the upper end of the interval\n# tol is an optional tolerance for the accuracy of the root\n#   if the user does not define a tolerance, provide a default\n\n# check that a and b have opposite signs\n# if not, return an error and stop\n\n# next calculate the midpoint m = (a+b)/2\n\n# start a while loop\n#   # in the while loop we need an if statement\n#   # if ...\n#   # elif ...\n#   # elif ...\n\n#   # we should check that the while loop does not run indefinitely\n\n# end the while loop\n# return the root\n\n\n\nExercise 3.13 Now use the pseudo-code from Exercise 3.12 as structure to complete a Python function for the Bisection Method. Test your Bisection Method code on the following equations.\n\n\\(x^2 - 2 = 0\\) on \\(x \\in [0,2]\\)\n\\(\\sin(x) + x^2 = 2\\log(x) + 5\\) on \\(x \\in [0,5]\\) (be careful! make a plot first)\n\\((5-x)e^{x}=5\\) on \\(x \\in [0,5]\\)\n\n\n\nFigure 3.2 shows an animation showing the bisection method in action on the equation \\(x^2 - 2 = 0\\).\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    \n    \n      \n          \n      \n        \n      \n          \n      \n          \n      \n          \n      \n          \n      \n          \n      \n          \n      \n          \n    \n    \n      \n      Once\n      \n      Loop\n      \n      Reflect\n    \n  \n\n\n\n\n\n\nFigure 3.2: An animation of the bisection method in action on the equation \\(x^2 - 2 = 0\\).\n\n\n\n\n\n\n\n3.2.2 Analysis\nAfter we build any root finding algorithm we need to stop and think about how it will perform on new problems. The questions that we typically have for a root-finding algorithm are:\n\nWill the algorithm always converge to a solution?\nHow fast will the algorithm converge to a solution?\nAre there any pitfalls that we should be aware of when using the algorithm?\n\n\n\nExercise 3.14 Discussion: What must be true in order to use the bisection method?\n\n\n\nExercise 3.15 Discussion: Does the bisection method work if the Intermediate Value Theorem does not apply? (Hint: what does it mean for the IVT to “not apply?”)\n\n\n\nExercise 3.16 If there is a root of a continuous function \\(f(x)\\) between \\(x=a\\) and \\(x=b\\), will the bisection method always be able to find it? Why / why not?\n\n\nNext we will focus on a deeper mathematical analysis that will allow us to determine exactly how fast the bisection method actually converges to within a pre-set tolerance. Work through the next problem to develop a formula that tells you exactly how many steps the bisection method needs to take before it gets close enough to the true solution.\n\n\nExercise 3.17 Let \\(f(x)\\) be a continuous function on the interval \\([a,b]\\) and assume that \\(f(a) \\cdot f(b) &lt;0\\). A recurring theme in Numerical Analysis is to approximate some mathematical thing to within some tolerance. For example, if we want to approximate the solution to the equation \\(f(x)=0\\) to within \\(\\varepsilon\\) with the bisection method, we should be able to figure out how many steps it will take to achieve that goal.\n\nLet us say that \\(a = 3\\) and \\(b = 8\\) and \\(f(a) \\cdot f(b) &lt; 0\\) for some continuous function \\(f(x)\\). The width of this interval is \\(5\\), so if we guess that the root is \\(m=(3+8)/2 = 5.5\\) then our error is less than \\(5/2\\). In the more general setting, if there is a root of a continuous function in the interval \\([a,b]\\) then how far off could the midpoint approximation of the root be? In other words, what is the error in using \\(m=(a+b)/2\\) as the approximation of the root?\nThe bisection method cuts the width of the interval down to a smaller size at every step. As such, the approximation error gets smaller at every step. Fill in the blanks in the following table to see the pattern in how the approximation error changes with each iteration.\n\n\n\n\nIteration\nWidth of Interval\nMaximal Error\n\n\n\n\n1\n\\(|b-a|\\)\n\\(\\frac{|b-a|}{2}\\)\n\n\n2\n\\(\\frac{|b-a|}{2}\\)\n\n\n\n3\n\\(\\frac{|b-a|}{2^2}\\)\n\n\n\n\\(\\vdots\\)\n\\(\\vdots\\)\n\\(\\vdots\\)\n\n\n\\(n\\)\n\\(\\frac{|b-a|}{2^{n-1}}\\)\n\n\n\n\n\nNow to the key question:\nIf we want to approximate the solution to the equation \\(f(x)=0\\) to within some tolerance \\(\\varepsilon\\) then how many iterations of the bisection method do we need to take?\nHint: Set the \\(n^{th}\\) approximation error from the table equal to \\(\\varepsilon\\). What should you solve for from there?\n\n\n\nIn Exercise 3.17 you actually proved the following theorem.\n\nTheorem 3.2 (Convergence Rate of the Bisection Method) If \\(f(x)\\) is a continuous function with a root in the interval \\([a,b]\\) and if the bisection method is performed to find the root then:\n\nThe error between the actual root and the approximate root will decrease by a factor of 2 at every iteration.\nIf we want the approximate root found by the bisection method to be within a tolerance of \\(\\varepsilon\\) then \\[\\begin{equation}\n\\frac{|b-a|}{2^{n}} = \\varepsilon\n\\end{equation}\\] where \\(n\\) is the number of iterations that it takes to achieve that tolerance.\n\n\nSolving for the number of iterations (\\(n\\)) we get \\[\\begin{equation}\nn = \\log_2\\left( \\frac{|b-a|}{\\varepsilon} \\right).\n\\end{equation}\\]\nRounding the value of \\(n\\) up to the nearest integer gives the number of iterations necessary to approximate the root to a precision less than \\(\\varepsilon\\).\n\n\nExercise 3.18 Is it possible for a given function and a given interval that the Bisection Method converges to the root in fewer steps than what you just found in the previous problem? Explain.\n\n\n\nExercise 3.19 Create a second version of your Python Bisection Method function that uses a for loop that takes the optimal number of steps to approximate the root to within some tolerance. This should be in contrast to your first version which likely used a while loop to decide when to stop. Is there an advantage to using one of these version of the Bisection Method over the other?\n\n\nThe final type of analysis that we should do on the bisection method is to make plots of the error between the approximate solution that the bisection method gives you and the exact solution to the equation. This is a bit of a funny thing! Stop and think about this for a second: if you know the exact solution to the equation then why are you solving it numerically in the first place!?!? However, whenever you build an algorithm you need to test it on problems where you actually do know the answer so that you can be somewhat sure that it is not giving you nonsense. Furthermore, analysis like this tells us how fast the algorithm is expected to perform.\nFrom Theorem 3.2 you know that the bisection method cuts the interval in half at every iteration. You proved in Exercise 3.17 that the error given by the bisection method is therefore cut in half at every iteration as well. The following example demonstrate this theorem graphically.\n\n\nExample 3.1 Let us solve the very simple equation \\(x^2 - 2 = 0\\) for \\(x\\) to get the solution \\(x = \\sqrt{2}\\) with the bisection method. Since we know the exact answer we can compare the exact answer to the value of the midpoint given at each iteration and calculate an absolute error: \\[\\begin{equation}\n\\text{Absolute Error} = | \\text{Approximate Solution} - \\text{Exact Solution}|.\n\\end{equation}\\]\nIf we plot the absolute error on the vertical axis and the iteration number on the horizontal axis we get Figure 3.3. As expected, the absolute error follows an exponentially decreasing trend. Notice that it is not a completely smooth curve since we will have some jumps in the accuracy just due to the fact that sometimes the root will be near the midpoint of the interval and sometimes it will not be.\n\n\nCode\nimport matplotlib.pyplot as plt\nfrom math import sqrt\n\ndef f(x):\n    return x**2 - 2\n\nx_exact = sqrt(2)\n\ndef bisection(a, b, tol):\n    errors = []\n    while (b - a) / 2.0 &gt; tol:\n        midpoint = (a + b) / 2.0\n        if f(midpoint) == 0:\n            break\n        elif f(a) * f(midpoint) &lt; 0:\n            b = midpoint\n        else:\n            a = midpoint\n        error = abs(midpoint - x_exact)\n        errors.append(error)\n    return errors\n\n# Using the interval [1, 2] and a tolerance of 1e-7\ntolerance = 1e-7\nerrors = bisection(1, 2, tolerance)\n\n# Creating the x values for the plot (iterations)\niterations = np.arange(len(errors))\n\n# Plotting the errors\nplt.scatter(iterations, errors, label='Error per Iteration')\n\nplt.xlabel('Iteration')\nplt.ylabel('Absolute Error')\nplt.title('Absolute Error in Each Iteration of the Bisection Method')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 3.3: The evolution of the absolute error when solving the equation \\(x^2-2=0\\) with the bisection method.\n\n\n\n\n\nWithout Theorem 3.2 it would be rather hard to tell what the exact behaviour is in the exponential plot above. We know from Theorem 3.2 that the error will divide by 2 at every step, so if we instead plot the base-2 logarithm of the absolute error against the iteration number we should see a linear trend as shown in Figure 3.4.\n\n\nCode\nimport matplotlib.pyplot as plt\nfrom math import sqrt\nfrom scipy.stats import linregress\n\ndef f(x):\n    return x**2 - 2\n\nx_exact = sqrt(2)\n\ndef bisection(a, b, tol):\n    errors = []\n    while (b - a) / 2.0 &gt; tol:\n        midpoint = (a + b) / 2.0\n        if f(midpoint) == 0:\n            break\n        elif f(a) * f(midpoint) &lt; 0:\n            b = midpoint\n        else:\n            a = midpoint\n        error = abs(midpoint - x_exact)\n        errors.append(error)\n    return errors\n\n# Using the interval [1, 2] and a tolerance of 1e-7\ntolerance = 1e-7\nerrors = bisection(1, 2, tolerance)\n\n# Convert errors to base 2 logarithm\nlog_errors = np.log2(errors)\n# Creating the x values for the plot (iterations)\niterations = np.arange(len(log_errors))\n\n# Plotting the errors\nplt.scatter(iterations, log_errors, label='Log Error per Iteration')\n\n# Determine slope and intercept of the best-fit straight line\nslope, intercept = np.polyfit(iterations, log_errors, deg=1)\nbest_fit_line = slope * iterations + intercept\n# Plot the best-fit line\nplt.plot(iterations, best_fit_line, label='Best Fit Line', color='red')\n\nplt.xlabel('Iteration')\nplt.ylabel('Base 2 Log of Absolute Error')\nplt.title('Absolute Error in Each Iteration of the Bisection Method')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 3.4: Iteration number vs the base-2 logarithm of the absolute error. Notice the slope of \\(-1\\) indicating that the error is divided by a factor of 2 at each step of the algorithm.\n\n\n\n\n\nThere will be times later in this course where we will not have a nice theorem like Theorem 3.2 and instead we will need to deduce the relationship from plots like these.\n\nThe trend is linear since logarithms and exponential functions are inverses. Hence, applying a logarithm to an exponential will give a linear function.\nThe slope of the resulting linear function should be \\(-1\\) in this case since we are dividing by a factor of 2 each iteration. Visually verify that the slope in the plot below follows this trend (the red dashed line in the plot is shown to help you see the slope).\n\n\n\n\nExercise 3.20 Carefully read and discuss all of the details of the previous example and plots. Then create plots similar to this example to solve a different equation to which you know the exact solution. You should see the same basic behaviour based on the theorem that you proved in Exercise 3.17. If you do not see the same basic behaviour then something has gone wrong.\n\n\n\nExample 3.2 Another plot that numerical analysts use quite frequently for determining how an algorithm is behaving as it progresses is shown in Figure 3.5. and is defined by the following axes:\n\nThe horizontal axis is the absolute error at iteration \\(k\\).\nThe vertical axis is the absolute error at iteration \\(k+1\\).\n\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef f(x):\n    return x**2 - 2\n\nx_exact = sqrt(2)\n\ndef bisection(a, b, tol):\n    errors = []\n    while (b - a) / 2.0 &gt; tol:\n        midpoint = (a + b) / 2.0\n        if f(midpoint) == 0:\n            break\n        elif f(a) * f(midpoint) &lt; 0:\n            b = midpoint\n        else:\n            a = midpoint\n        error = abs(midpoint - x_exact)\n        errors.append(error)\n    return errors\n\n# Running the bisection method again\ntolerance = 1e-7\nerrors = bisection(1, 2, tolerance)\n\n# Calculating the log2 of the absolute error at step k and k+1\nlog_errors = np.log2(errors)\nlog_errors_k = log_errors[:-1]  # log errors at step k (excluding the last one)\nlog_errors_k_plus_1 = log_errors[1:]  # log errors at step k+1 (excluding the first one)\n\n# Plotting log_errors_k+1 vs log_errors_k\nplt.scatter(log_errors_k, log_errors_k_plus_1, label='Log Error at k+1 vs Log Error at k')\n\n# Fitting a straight line to the data points\nslope, intercept = np.polyfit(log_errors_k, log_errors_k_plus_1, deg=1)\nbest_fit_line = slope * log_errors_k + intercept\nplt.plot(log_errors_k, best_fit_line, color='red', label='Best Fit Line')\n\n# Setting up the plot\nplt.xlabel('Log2 of Absolute Error at Step k')\nplt.ylabel('Log2 of Absolute Error at Step k+1')\nplt.title('Log2 of Absolute Error at Step k+1 vs Step k')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 3.5: The base-2 logarithm of the absolute error at iteration \\(k\\) vs the base-2 logarithm of the absolute error at iteration \\(k+1\\).\n\n\n\n\n\nThis type of plot takes a bit of explaining the first time you see it. Start on the right-hand side of the plot where the error is the largest (this will be where the algorithm starts). The coordinates of the first point are interpreted as: \\[\\begin{equation}\n(\\text{absolute error at step 1} \\, , \\, \\text{absolute error at step 2}).\n\\end{equation}\\] The coordinates of the second point are interpreted as: \\[\\begin{equation}\n(\\text{absolute error at step 2} \\, , \\, \\text{absolute error at step 3}),\n\\end{equation}\\] etc. Examining the slope of the trend line in this plot shows how we expect the error to progress from step to step. The slope appears to be about \\(1\\) in Figure 3.5 and the intercept appears to be about \\(-1\\). In this case we used a base-2 logarithm for each axis so we have just empirically shown that \\[\\begin{equation}\n\\log_2(\\text{absolute error at step $k+1$}) \\approx 1\\cdot \\log_2(\\text{absolute error at step $k$}) -1.\n\\end{equation}\\] Rearranging the algebra a bit we see that this linear relationship turns into \\[\\begin{equation}\n\\frac{\\text{absolute error at step $k+1$}}{\\text{absolute error at step $k$}} \\approx \\frac{1}{2}.\n\\end{equation}\\] (You should stop now and do this algebra.) Rearranging a bit more we get \\[\\begin{equation}\n(\\text{absolute error at step $k+1$}) = \\frac{1}{2}(\\text{absolute error at step $k$}),\n\\end{equation}\\] exactly as expected!! Pause and ponder this result for a second – we just empirically verified the convergence rate for the bisection method just by examining Figure 3.5. That’s what makes these types of plots so powerful!\n\n\n\nExercise 3.21 Reproduce plots like those in the previous example but for the different equation that you used in Exercise 3.20. Again check that the plots have the expected shape.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "nmAlgebra.html#sec-fixedpoint1d",
    "href": "nmAlgebra.html#sec-fixedpoint1d",
    "title": "3  Algebra",
    "section": "3.3 Fixed point iteration",
    "text": "3.3 Fixed point iteration\nWe will now investigate a different problem that is closely related to root finding: the fixed point problem. Given a function \\(g\\) (of one real argument with real values), we look for a number \\(p\\) such that \\[\ng(p)=p.\n\\] This \\(p\\) is called a fixed point of \\(g\\).\nAny root finding problem \\(f(x)=0\\) can be reformulated as a fixed point problem, and this can be done in many (in fact, infinitely many) ways. For example, given \\(f\\), we can define \\(g(x):=f(x) + x\\); then \\[\nf(x) = 0 \\quad \\Leftrightarrow\\quad g(x)=x.\n\\] Just as well, we could set \\(g(x):=\\lambda f(x) + x\\) with any \\(\\lambda\\in{\\mathbb R}\\backslash\\{0\\}\\), and there are many other possibilities.\nThe heuristic idea for approximating a fixed point of a function \\(g\\) is quite simple. We take an initial approximation \\(x_{0}\\) and calculate subsequent approximations using the formula \\[\nx_{n}:=g(x_{n-1}).\n\\] A graphical representation of this sequence when \\(g = \\cos\\) and \\(x_0=2\\) is shown in Figure 3.6.\nTo view the animation, click on the play button below the plot.\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    \n    \n      \n          \n      \n        \n      \n          \n      \n          \n      \n          \n      \n          \n      \n          \n      \n          \n      \n          \n    \n    \n      \n      Once\n      \n      Loop\n      \n      Reflect\n    \n  \n\n\n\n\n\n\nFigure 3.6: Fixed point iteration \\(x_{n} = \\cos(x_{n-1})\\).\n\n\n\n\n\n\nExercise 3.22 The plot that emerges in Figure 3.6 is known as a cobweb diagram, for obvious reason. Explain to others in your group what is happening in the animation in Figure 3.6 and how that animation is related to the fixed point iteration \\(x_{n} = \\cos(x_{n-1})\\).\n\n\n\nExercise 3.23 The animation in Figure 3.6 is a graphical representation of the fixed point iteration \\(x_{n} = \\cos(x_{n-1})\\). Use Python to calculate the first 10 iterations of this sequence with \\(x_0=0.2\\). Use that to get an estimate of the solution to the equation \\(\\cos(x)-x=0\\).\n\n\nWhy is the sequence \\((x_n)\\) expected to approximate a fixed point? Suppose for a moment that the sequence \\((x_n)\\) converges to some number \\(p\\), and that \\(g\\) is continuous. Then \\[\np=\\lim_{n\\to\\infty}x_{n}=\\lim_{n\\to\\infty}g(x_{n-1})=\ng\\left(\\lim_{n\\to\\infty}x_{n-1}\\right)=g(p).\n\\tag{3.1}\\] Thus, if the sequence converges, then it converges to a fixed point. However, this resolves the problem only partially. One would like to know:\n\nUnder what conditions does the sequence \\((x_n)\\) converge?\nHow fast is the convergence, i.e., can one obtain an estimate for the approximation error?\n\nSo there is much for you to investigate!\n\n\nExercise 3.24 Copy the two plots in Figure 3.7 to a piece of paper and draw the first few iterations of the fixed point iteration \\(x_{n} = g(x_{n-1})\\) on each of them. In the first plot start with \\(x_0=0.2\\) and in the second plot start with \\(x_0=1.5\\) and in the second plot start with \\(x=0.9\\) What do you observe about the convergence of the sequence in each case?\n\n\n\n\n\n\n\n\nFigure 3.7: Two plots for practicing your cobweb skills.\n\n\n\n\n\nCan you make some conjectures about when the sequence \\((x_n)\\) will converge to a fixed point and when it will not?\n\n\n\nExercise 3.25 Make similar plots as in the previous exercise but with different slopes of the blue line. Can you make some conjectures about how the speed of convergence is related to the slope of the blue line?\n\n\nNow see if your observations are in agreement with the following theorem:\n\nTheorem 3.3 (Fixed Point Theorem) Suppose that \\(g:[a,b]\\to [a,b]\\) is differentiable, and that there exists \\(0&lt;k&lt;1\\) such that \\[\n\\lvert g^{\\prime}(x)\\rvert\\leq k\\quad \\text{for all }x \\in (a,b).\n\\tag{3.2}\\] Then, \\(g\\) has a unique fixed point \\(p\\in [a,b]\\); and for any choice of \\(x_0 \\in [a,b]\\), the sequence defined by \\[\nx_{n}:=g(x_{n-1}) \\quad \\text{for all }n\\ge1\n\\tag{3.3}\\] converges to \\(p\\). The following estimate holds: \\[\n\\lvert p- x_{n}\\rvert \\leq k^n \\lvert p-x_{0}\\rvert \\quad \\text{for all }n\\geq1.\n\\tag{3.4}\\]\n\n\nProof. The proof of this theorem is not difficult, but you can skip it and go directly to Exercise 3.26 if you feel that the theorem makes intuitive sense and you are not interested in proofs.\nWe first show that \\(g\\) has a fixed point \\(p\\) in \\([a,b]\\). If \\(g(a)=a\\) or \\(g(b)=b\\) then \\(g\\) has a fixed point at an endpoint. If not, then it must be true that \\(g(a)&gt;a\\) and \\(g(b)&lt;b\\). This means that the function \\(h(x):=g(x)-x\\) satisfies \\[\n\\begin{aligned}\nh(a) &= g(a)-a&gt;0, & h(b)&=g(b)-b&lt;0\n\\end{aligned}\n\\] and since \\(h\\) is continuous on \\([a,b]\\) the Intermediate Value Theorem guarantees the existence of \\(p\\in(a,b)\\) for which \\(h(p)=0\\), equivalently \\(g(p)=p\\), so that \\(p\\) is a fixed point of \\(g\\).\nTo show that the fixed point is unique, suppose that \\(q\\neq p\\) is a fixed point of \\(g\\) in \\([a,b]\\). The Mean Value Theorem implies the existence of a number \\(\\xi\\in(\\min\\{p,q\\},\\max\\{p,q\\})\\subseteq(a,b)\\) such that \\[\n\\frac{g(p)-g(q)}{p-q}=g'(\\xi).\n\\] Then \\[\n\\lvert p - q\\rvert = \\lvert g(p)-g(q) \\rvert = \\lvert (p-q)g'(\\xi) \\rvert = \\lvert p-q\\rvert \\lvert g'(\\xi) \\rvert \\le  k\\lvert p-q\\rvert &lt; \\lvert p-q\\rvert,\n\\] where the inequalities follow from Eq. 3.2. This is a contradiction, which must have come from the assumption \\(p\\neq q\\). Thus \\(p=q\\) and the fixed point is unique.\nSince \\(g\\) maps \\([a,b]\\) onto itself, the sequence \\(\\{x_n\\}\\) is well defined. For each \\(n\\ge0\\) the Mean Value Theorem gives the existence of a \\(\\xi\\in(\\min\\{x_n,p\\},\\max\\{x_n,p\\})\\subseteq(a,b)\\) such that \\[\n\\frac{g(x_n)-g(p)}{x_n-p}=g'(\\xi).\n\\] Thus for each \\(n\\ge1\\) by Eq. 3.2, Eq. 3.3 \\[\n\\lvert x_n-p\\rvert = \\lvert g(x_{n-1})-g(p) \\rvert = \\lvert (x_{n-1}-p)g'(\\xi) \\rvert = \\lvert x_{n-1}-p\\rvert \\lvert g'(\\xi) \\rvert \\le  k\\lvert x_{n-1}-p\\rvert.\n\\] Applying this inequality inductively, we obtain the error estimate Eq. 3.4. Moreover since \\(k &lt;1\\) we have \\[\\lim_{n\\rightarrow\\infty}\\lvert x_{n}-p\\rvert \\le \\lim_{n\\rightarrow\\infty} k^n \\lvert x_{0}-p\\rvert = 0,\n\\] which implies that \\((x_n)\\) converges to \\(p\\).  ◻\n\n\n\nExercise 3.26 This exercise shows why the conditions of the Theorem 3.3 are important.\nThe equation \\[\nf(x)=x^{2}-2=0\n\\] has a unique root \\(\\sqrt{2}\\) in \\([1, 2]\\). There are many ways of writing this equation in the form \\(x=g(x)\\); we consider two of them: \\[\n\\begin{aligned}\nx&=g(x)=x-(x^{2}-2), &\n  x&=h(x)=x-\\frac{x^{2}-2}{3}.\n\\end{aligned}\n\\] Calculate the first terms in the sequences generated by the fixed point iteration procedures \\(x_{n}=g(x_{n-1})\\) and \\(x_{n}=h(x_{n-1})\\) with start value \\(x_0=1\\). Which of these fixed point problems generate a rapidly converging sequence? Calculate the derivatives of \\(g\\) and \\(h\\) and check if the conditions of the fixed point theorem are satisfied.\n\nThe previous exercise illustrates that one needs to be careful in rewriting root finding problems as fixed point problems—there are many ways to do so, but not all lead to a good approximation. In the next section about Newton’s method we will discover a very good choice.\nNote at this point that Theorem 3.3 gives only sufficient conditions for convergence; in practice, convergence might occur even if the conditions are violated.\n\n\nExercise 3.27 In this exercise you will write a Python function to implement the fixed point iteration algorithm.\nFor implementing the fixed point method as a computer algorithm, there’s one more complication to be taken into account: how many steps of the iteration should be taken, i.e., how large should \\(n\\) be chosen, in order to reach the desired precision? The error estimate in Eq. 3.4 is often difficult to use for this purpose because it involves estimates on the derivative of \\(g\\) which may not be known.\nInstead, one uses a different stopping condition for the algorithm. Since the sequence is expected to converge rapidly, one uses the difference \\(|x_n-x_{n-1}|\\) to measure the precision reached. If this difference is below a specified limit, say \\(\\tau\\), the iteration is stopped. Since it is possible that the iteration does not converge—see the example above—one would also stop the iteration (with an error message) if a certain number of steps is exceeded, in order to avoid infinite loops. In pseudocode the fixed point iteration algorithm is then implemented as follows:\n\nFixed point iteration\n\n\\[\n\\begin{array}{ll}\n\\ 1: \\ \\textbf{function} \\ FixedPoint(g,x_0,\\tau, N) &\\sharp \\ function \\ g, \\ start \\ point \\ x_0,\\\\\n\\ 2: \\ \\quad x \\gets x_0; \\ n \\gets 0               &\\sharp \\ tolerance \\ \\tau, \\ max. \\ num. \\ of \\\\\n\\ 3: \\ \\quad \\textbf{loop}                          &\\sharp \\ iterations \\ N \\\\\n\\ 4: \\ \\quad\\quad y \\gets x; \\ x \\gets g(x)  & \\\\\n\\ 5: \\ \\quad\\quad \\textbf{if} \\ |y-x| &lt; \\tau \\ \\textbf{then}  &\\sharp \\ Desired \\ tolerance \\ reached  \\\\\n\\ 6: \\ \\quad\\quad\\quad \\textbf{break}  & \\\\\n\\ 7: \\ \\quad\\quad \\textbf{end \\ if}  &  \\\\\n\\ 8: \\ \\quad\\quad \\quad n\\gets n+1  & \\\\\n\\ 9: \\ \\quad\\quad \\textbf{if} \\ n &gt; N \\ \\textbf{then}  &\\sharp \\ Max.~num. \\ of \\ iterations  \\\\\n10: \\ \\quad\\quad\\quad \\textbf{exception}(\"Iteration \\ does \\ not \\ converge\") &\\sharp \\ reached  \\\\\n11: \\ \\quad\\quad \\textbf{end if}  & \\\\\n12: \\ \\quad \\textbf{end loop}  & \\\\\n13: \\ \\quad \\textbf{return} \\ x  & \\\\\n14: \\ \\textbf{end function} &\n\\end{array}\n\\] Implement this algorithm in Python. Use it to approximate the fixed point of the function \\(g(x)=\\cos(x)\\) with start value \\(x_0=2\\) and tolerance \\(\\tau=10^{-8}\\).\n\n\nFurther reading: Section 2.2 of (Burden and Faires 2010).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "nmAlgebra.html#sec-newtons_method",
    "href": "nmAlgebra.html#sec-newtons_method",
    "title": "3  Algebra",
    "section": "3.4 Newton’s Method",
    "text": "3.4 Newton’s Method\nIn the Bisection Method (Section 3.2) we had used only the sign of of the function at the guessed points. We will now investigate how we can use also the value and the slope (derivative) of the function to get a much improved method.\n\n3.4.1 Intuition and Implementation\nRoot finding is really the process of finding the \\(x\\)-intercept of the function. If the function is complicated (e.g. highly nonlinear or does not lend itself to traditional by-hand techniques) then we can approximate the \\(x\\)-intercept by creating a Taylor Series approximation of the function at a nearby point and then finding the \\(x\\)-intercept of that simpler Taylor Series. The simplest non-trivial Taylor Series is a linear function – a tangent line!\n\n\nExercise 3.28 A tangent line approximation to a function \\(f(x)\\) near a point \\(x_0\\) is \\[\\begin{equation}\ny = f(x_0) + f'(x_0) \\left( x - x_0 \\right).\n\\end{equation}\\] Set \\(y\\) to zero and solve for \\(x\\) to find the \\(x\\)-intercept of the tangent line. \\[\\begin{equation}\n\\text{$x$-intercept of tangent line is } x = \\underline{\\hspace{0.5in}}\n\\end{equation}\\]\n\n\nThe idea of approximating the function by its tangent line gives us an algorithm for approximating the root of a function:\n\nGiven a value of \\(x\\) that is a decent approximation of the root, draw a tangent line to \\(f(x)\\) at that point.\nFind where the tangent line intersects the \\(x\\) axis.\nUse this intersection as the new \\(x\\) value and repeat.\n\nThe first step has been shown for you in Figure 3.8. The tangent line to the function \\(f(x)\\) at the point \\((x_0, f(x_0))\\) is shown in red. The \\(x\\)-intercept of the tangent line is the new \\(x\\) value, \\(x_1\\). The process is then repeated with \\(x_1\\) as the new \\(x_0\\) and so on.\nThis algorithm is known as Newton’s Method. The method was originally proposed by Isaac Newton, and later modified by Joseph Raphson, for approximating roots of the equation \\(f(x)=0\\). The method is therefore also known as the Newton-Raphson method.\n\n\n\n\n\n\nFigure 3.8: Using successive tangent line approximations to find the root of a function\n\n\n\n\n\nExercise 3.29 If we had started not at \\(x_0\\) in Figure 3.8 but instead at the very end of the x-axis in that figure, what would have happened? Would this initial guess have worked to eventually approximate the root?\n\n\n\nExercise 3.30 Sketch some other function \\(f(x)\\) with a root and choose an initial point \\(x_0\\) and graphically perform the Newton iteration a few times, similar to Figure 3.8. Does the algorithm appear to converge to the root in your example? Do you think that this will generally take more or fewer steps than the Bisection Method?\n\n\n\nExercise 3.31 Using your result from Exercise 3.28, write the formula for the \\(x\\)-intercept of the tangent line to \\(f(x)\\) at the point \\((x_0, f(x_0))\\). This is the formula for the next guess in Newton’s Method. Newton’s method is a fixed point iteration method with the formula \\[\nx_{n} = x_{n-1} - \\dots.\n\\] Fill in the blank in the above formula.\n\n\n\nExercise 3.32 Apply Newton’s method to find the root of the function \\(f(x) = x^2 - 2\\) with an initial guess of \\(x_0=1\\). Calculate the first two iterations of the sequence by hand (you do not need a calculator or computer for this). Use a calculator or computer to calculate the next two iterations and fill in the following table:\n\n\n\n\n\n\n\n\n\n\\(n\\)\n\\(x_n\\)\n\\(f(x_n)\\)\n\\(f'(x_n)\\)\n\n\n\n\n\\(0\\)\n\\(x_0 = 1\\)\n\\(f(x_0) = -1\\)\n\\(f'(x_0) = 2\\)\n\n\n\\(1\\)\n\\(x_1 = 1 - \\frac{-1}{2} = \\frac{3}{2}\\)\n\\(f(x_1) =\\)\n\\(f'(x_1) =\\)\n\n\n\\(2\\)\n\\(x_2 =\\)\n\\(f(x_2) =\\)\n\\(f'(x_2) =\\)\n\n\n\\(3\\)\n\\(x_3 =\\)\n\\(f(x_3) =\\)\n\\(f'(x_3) =\\)\n\n\n\\(4\\)\n\\(x_4 =\\)\n\n\n\n\n\n\n\n\nExercise 3.33 Repeat the previous exercise but with an initial guess of \\(x_0=4\\). What do you observe.\n\n\n\nExercise 3.34 Make a complete list of what you must know about the function \\(f(x)\\) for Newton’s method to work?\n\n\n\nExercise 3.35 Create a Python function called newton() and write comments giving pseudo-code for Newton’s method. Your function needs to accept a Python function for \\(f(x)\\), a Python function for \\(f'(x)\\), an initial guess, and an optional error tolerance. You do not need to set aside any code for calculating the derivative.\n\n\n\nExercise 3.36 Using your pseudocode from the previous problem, write the full newton() function. The only output should be the solution to the equation that you are solving. Write a test script to verify that your Newton’s method code indeed works.\n\n\n\n\n3.4.2 Analysis\nThere are several ways in which Newton’s Method will behave unexpectedly – or downright fail. Some of these issues can be foreseen by examining the Newton iteration formula \\[\\begin{equation}\nx_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)}.\n\\end{equation}\\] Some of the failures that we will see are a little more surprising. Also in this section we will look at the convergence rate of Newton’s Method and we will show that we can greatly outperform the Bisection method.\n\n\nExercise 3.37 There are several reasons why Newton’s method could fail. Work with your partners to come up with a list of reasons. Support each of your reasons with a sketch or an example.\n\n\n\nExercise 3.38 One of the failures of Newton’s Method is that it requires a division by \\(f'(x_n)\\). If \\(f'(x_n)\\) is zero then the algorithm completely fails. Go back to your Python function and put an if statement in the function that catches instances when Newton’s Method fails in this way.\n\n\n\nExercise 3.39 An interesting failure can occur with Newton’s Method that you might not initially expect. Consider the function \\(f(x) = x^3 - 2x + 2\\). This function has a root near \\(x=-1.77\\). Fill in the table below and draw the tangent lines on the figure for approximating the solution to \\(f(x) = 0\\) with a starting point of \\(x=0\\).\n\n\n\n\n\n\n\n\n\n\\(n\\)\n\\(x_n\\)\n\\(f(x_n)\\)\n\\(f'(x_n)\\)\n\n\n\n\n\\(0\\)\n\\(x_0 = 0\\)\n\\(f(x_0) = 2\\)\n\\(f'(x_0) = -2\\)\n\n\n\\(1\\)\n\\(x_1 = 0 - \\frac{f(x_0)}{f'(x_0)} = 1\\)\n\\(f(x_1) = 1\\)\n\\(f'(x_1) = 1\\)\n\n\n\\(2\\)\n\\(x_2 = 1 - \\frac{f(x_1)}{f'(x_1)} =\\)\n\\(f(x_2) =\\)\n\\(f'(x_2) =\\)\n\n\n\\(3\\)\n\\(x_3 =\\)\n\\(f(x_3) =\\)\n\\(f'(x_3) =\\)\n\n\n\\(4\\)\n\\(x_4 =\\)\n\\(f(x_4) =\\)\n\\(f'(x_4) =\\)\n\n\n\\(\\vdots\\)\n\\(\\vdots\\)\n\\(\\vdots\\)\n\\(\\vdots\\)\n\n\n\n\n\n\n\n\n\nFigure 3.9: An interesting Newton’s Method failure.\n\n\n\n\n\n\nExercise 3.40 Now let us consider the function \\(f(x) = \\sqrt[3]{x}\\). This function has a root \\(x=0\\). Furthermore, it is differentiable everywhere except at \\(x=0\\) since \\[\\begin{equation}\nf'(x) = \\frac{1}{3} x^{-2/3} = \\frac{1}{3x^{2/3}}.\n\\end{equation}\\] The point of this exercise is to show what can happen when the point of non-differentiability is precisely the point that you are looking for.\n\nFill in the table of iterations starting at \\(x=-1\\), draw the tangent lines on the plot, and make a general observation of what is happening with the Newton iterations.\n\n\n\n\n\n\n\n\n\n\n\\(n\\)\n\\(x_n\\)\n\\(f(x_n)\\)\n\\(f(x_n)\\)\n\n\n\n\n\\(0\\)\n\\(x_0 = -1\\)\n\\(f(x_0) = -1\\)\n\\(f'(x_0) =\\)\n\n\n\\(1\\)\n\\(x_1 = -1 - \\frac{f(-1)}{f'(-1)} =\\)\n\\(f(x_1) =\\)\n\\(f'(x_1) =\\)\n\n\n\\(2\\)\n\n\n\n\n\n\\(3\\)\n\n\n\n\n\n\\(4\\)\n\n\n\n\n\n\\(\\vdots\\)\n\\(\\vdots\\)\n\\(\\vdots\\)\n\\(\\vdots\\)\n\n\n\n\n\n\n\n\n\nFigure 3.10: Another surprising Newton’s Method failure.\n\n\n\n\nNow let us look at the Newton iteration in a bit more detail. Since \\(f(x) = x^{1/3}\\) and \\(f'(x) = \\frac{1}{3} x^{-2/3}\\) the Newton iteration can be simplified as \\[\\begin{equation}\nx_{n+1} = x_n - \\frac{x^{1/3}}{ \\left( \\frac{1}{3} x^{-2/3} \\right)} = x_n - 3 \\frac{x^{1/3}}{x^{-2/3}} = x_n - 3x_n = -2x_n.\n\\end{equation}\\] What does this tell us about the Newton iterations?\nHint: You should have found the exact same thing in the numerical experiment in part (a).\nWas there anything special about the starting point \\(x_0=-1\\)? Will this problem exist for every starting point?\n\n\n\n\nExercise 3.41 Repeat the previous exercise with the function \\(f(x) = x^3 - 5x\\) with the starting point \\(x_0 = -1\\).\n\n\n\n\n\n\nFigure 3.11: Another surprising Newton’s Method failure.\n\n\n\n\n\nNewton’s Method is known to have a quadratic convergence rate. This means that there is some constant \\(C\\) such that \\[\\begin{equation}\n|x_{k+1} - x_*| \\leq C |x_{k} - x_*|^2,\n\\end{equation}\\] where \\(x_*\\) is the root that we are hunting for.\nThe quadratic convergence implies that if we plot the error in the new iterate on the \\(y\\)-axis and the error in the old iterate on the \\(x\\) axis of a log-log plot then we will see a constant slope of 2. To see this we can take the log of both sides of the previous equation to get \\[\\begin{equation}\n\\log(|x_{k+1} - x_*|) = \\log(C) + 2 \\log(|x_{k} - x_*|),\n\\end{equation}\\] and we see that this is a linear function (on a log-log plot) and the slope is 2. We created plots like this back in Example 3.2.\n\n\nExercise 3.42  \n\nPick an equation where you know the solution.\nCreate the error plot with \\(|x_{k} - x_*|\\) on the horizontal axis and \\(|x_{k+1} - x_*|\\) on the vertical axis. You can re-use some code from Example 3.2.\nDemonstrate that this plot has a slope of 2.\nGive a thorough explanation for how to interpret the plot that you just made.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "nmAlgebra.html#sec-secant_method",
    "href": "nmAlgebra.html#sec-secant_method",
    "title": "3  Algebra",
    "section": "3.5 The Secant Method",
    "text": "3.5 The Secant Method\n\n3.5.1 Intuition and Implementation\nNewton’s Method has second-order (quadratic) convergence and, as such, will perform faster than the Bisection method. However, Newton’s Method requires that you have a function and a derivative of that function. The conundrum here is that sometimes the derivative is cumbersome or impossible to obtain but you still want to have the great quadratic convergence exhibited by Newton’s method.\nRecall that Newton’s method is \\[\\begin{equation}\nx_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)}.\n\\end{equation}\\] If we replace \\(f'(x_n)\\) with an approximation of the derivative then we may have a method that is close to Newton’s method in terms of convergence rate but is less troublesome to compute. Any method that replaces the derivative in Newton’s method with an approximation is called a Quasi-Newton Method.\nThe first, and most obvious, way to approximate the derivative is just to use the slope of a secant line instead of the slope of the tangent line in the Newton iteration. If we choose two starting points that are quite close to each other then the slope of the secant line through those points will be approximately the same as the slope of the tangent line.\n\n\n\n\n\n\nFigure 3.12: Using successive secant line approximations to find the root of a function\n\n\n\n\n\nExercise 3.43 Use the backward difference \\[\\begin{equation}\nf'(x_n) \\approx \\frac{f(x_n) - f(x_{n-1})}{x_n - x_{n-1}}\n\\end{equation}\\] to approximate the derivative of \\(f\\) at \\(x_n\\).  Discuss why this approximates the derivative. Use this approximation of \\(f'(x_n)\\) in the expression for \\(x_{n+1}\\) of Newton’s method. Show that that the result simplifies to \\[\\begin{equation}\nx_{n+1} = x_n - \\frac{f(x_n)\\left( x_n - x_{n-1} \\right)}{f(x_n) - f(x_{n-1})}.\n\\end{equation}\\]\n\n\n\nExercise 3.44 Notice that the iteration formula for \\(x_{n+1}\\) that you derived depends on both \\(x_n\\) and \\(x_{n-1}\\). So to start the iteration you need to choose two points \\(x_0\\) and \\(x_1\\) before you can calculate \\(x_2, x_3, \\dots\\). Draw several pictures showing what the secant method does pictorially. Discuss whether it is important to choose these starting points close to the root and close to each other.\n\n\n\nExercise 3.45 Write pseudo-code to outline how you will implement the Secant Method.\n\n\n\nExercise 3.46 Write Python code for solving equations of the form \\(f(x) = 0\\) with the Secant method. Your function should accept a Python function, two starting points, and an optional error tolerance. Also write a test script that clearly shows that your code is working.\n\n\n\n\n3.5.2 Analysis\nUp to this point we have done analysis work on the Bisection Method and Newton’s Method. We have found that the methods are first order and second order respectively. We end this chapter by doing the same for the Secant Method.\n\n\nExercise 3.47 Choose a non-trivial equation for which you know the solution and write a script to empirically determine the convergence rate of the Secant method.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "nmAlgebra.html#algorithm-summaries",
    "href": "nmAlgebra.html#algorithm-summaries",
    "title": "3  Algebra",
    "section": "3.6 Algorithm Summaries",
    "text": "3.6 Algorithm Summaries\nThe following four problems are meant to have you re-build each of the algorithms that we developed in this chapter. Write all of the mathematical details completely and clearly. Do not just write “how” the method works, but give all of the mathematical details for “why” it works.\n\n\nExercise 3.48 Let \\(f(x)\\) be a continuous function on the interval \\([a,b]\\) where \\(f(a) \\cdot f(b) &lt; 0\\). Clearly give all of the mathematical details for how the Bisection Method approximates the root of the function \\(f(x)\\) in the interval \\([a,b]\\).\n\n\n\nExercise 3.49 Let \\(f(x)\\) be a differentiable function with a root near \\(x=x_0\\). Clearly give all of the mathematical details for how Newton’s Method approximates the root of the function \\(f(x)\\).\n\n\n\nExercise 3.50 Let \\(f(x)\\) be a continuous function with a root near \\(x=x_0\\). Clearly give all of the mathematical details for how the Secant Method approximates the root of the function \\(f(x)\\).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "nmAlgebra.html#problems",
    "href": "nmAlgebra.html#problems",
    "title": "3  Algebra",
    "section": "3.7 Problems",
    "text": "3.7 Problems\n\nExercise 3.51 Can the Bisection Method or Newton’s Method be used to find the roots of the function \\(f(x) = \\cos(x) + 1\\)? Explain why or why not for each technique?\n\n\n\nExercise 3.52 How many iterations of the bisection method are necessary to approximate \\(\\sqrt{3}\\) to within \\(10^{-3}\\), \\(10^{-4}\\), …, \\(10^{-15}\\) using the initial interval \\([a,b]=[0,2]\\)? See Theorem 3.2.\n\n\n\nExercise 3.53 Refer back to Example 3.1 and demonstrate that you get the same results for the order of convergence when solving the problem \\(x^3 - 3 = 0\\). Generate versions of all of the plots from that example and give thorough descriptions of what you learn from each plot.\n\n\n\nExercise 3.54 In this problem you will demonstrate that all of your root finding codes work. At the beginning of this chapter we proposed the equation solving problem \\[\\begin{equation}\n3\\sin(x) + 9 = x^2 - \\cos(x).\n\\end{equation}\\] Write a script that calls upon your Bisection, Newton, and Secant methods one at a time to find the positive solution to this equation. Your script needs to output the solutions in a clear and readable way so you can tell which answer came from which root finding algorithm.\n\n\n\nExercise 3.55 A root-finding method has a convergence rate of order \\(M\\) if there is a constant \\(C\\) such that \\[\\begin{equation}\n|x_{k+1} - x_*| \\leq C |x_k - x_*|^M.\n\\end{equation}\\] Here, \\(x_*\\) is the exact root, \\(x_k\\) is the \\(k^{th}\\) iteration of the root finding technique, and \\(x_{k+1}\\) is the \\((k+1)^{st}\\) iteration of the root finding technique.\n\nIf we consider the equation \\[\\begin{equation}\n|x_{k+1} - x_*| \\leq C |x_k - x_*|^M\n\\end{equation}\\] and take the logarithm (base 10) of both sides then we get \\[\\begin{equation}\n\\log\\left( |x_{k+1} - x_*| \\right) \\leq \\underline{\\hspace{1in}} + \\underline{\\hspace{1in}}\n\\end{equation}\\]\nIn part (a) you should have found that the log of new error is a linear function of the log of the old error. What is the slope of this linear function on a log-log plot?\nIn the plots below you will see six different log-log plots of the new error to the old error for different root finding techniques. What is the order of the approximate convergence rate for each of these methods?\n\n\n\n\n\n\n\nFigure 3.13: Six Error Plots\n\n\n\n\nIn your own words, what does it mean for a root finding method to have a “first order convergence rate?” “Second order convergence rate?” etc.\n\n\n\n\nExercise 3.56 There are MANY other root finding techniques beyond the four that we have studied thus far. We can build these methods using Taylor Series as follows:\nNear \\(x=x_0\\) the function \\(f(x)\\) is approximated by the Taylor Series \\[\\begin{equation}\nf(x) \\approx y = f(x_0) + \\sum_{n=1}^N \\frac{f^{(n)}(x_0)}{n!} (x-x_0)^n\n\\end{equation}\\] where \\(N\\) is a positive integer. In a root-finding algorithm we set \\(y\\) to zero to find the root of the approximation function. The root of this function should be close to the actual root that we are looking for. Therefore, to find the next iterate we solve the equation \\[\\begin{equation}\n0 = f(x_0) + \\sum_{n=1}^N \\frac{f^{(n)}(x_0)}{n!} (x-x_0)^n\n\\end{equation}\\] for \\(x\\). For example, if \\(N=1\\) then we need to solve \\(0 = f(x_0) + f'(x_0)(x-x_0)\\) for \\(x\\). In doing so we get \\(x = x_0 - f(x_0)/f'(x_0)\\). This is exactly Newton’s method. If \\(N=2\\) then we need to solve \\[\\begin{equation}\n0 = f(x_0) + f'(x_0)(x-x_0) + \\frac{f''(x_0)}{2!}(x-x_0)^2\n\\end{equation}\\] for \\(x\\).\n\nSolve for \\(x\\) in the case that \\(N=2\\). Then write a Python function that implements this root-finding method.\nDemonstrate that your code from part (a) is indeed working by solving several problems where you know the exact solution.\nShow several plots that estimates the order of the method from part (a). That is, create a log-log plot of the successive errors for several different equation-solving problems.\nWhat are the pro’s and con’s to using this new method?\n\n\n\n\nExercise 3.57 (modified from (Burden and Faires 2010)) An object falling vertically through the air is subject to friction due to air resistance as well as gravity. The function describing the position of such an object is \\[\\begin{equation}\ns(t) = s_0 - \\frac{mg}{k} t + \\frac{m^2 g}{k^2}\\left( 1- e^{-kt/m} \\right),\n\\end{equation}\\] where \\(m\\) is the mass measured in kg, \\(g\\) is gravity measured in meters per second per second, \\(s_0\\) is the initial position measured in meters, and \\(k\\) is the coefficient of air resistance.\n\nWhat are the dimensions of the parameter \\(k\\)?\nIf \\(m = 1\\)kg, \\(g=9.8\\)m/s\\(^2\\), \\(k=0.1kg/s\\), and \\(s_0 = 100\\)m how long will it take for the object to hit the ground? Find your answer to within 0.01 seconds.\nThe value of \\(k\\) depends on the aerodynamics of the object and might be challenging to measure. We want to perform a sensitivity analysis on your answer to part (b) subject to small measurement errors in \\(k\\). If the value of \\(k\\) is only known to within 10% then what are your estimates of when the object will hit the ground?\n\n\n\n\nExercise 3.58 In Single Variable Calculus you studied methods for finding local and global extrema of functions. You likely recall that part of the process is to set the first derivative to zero and to solve for the independent variable (remind yourself why you are doing this). The trouble with this process is that it may be very very challenging to solve by hand. This is a perfect place for Newton’s method or any other root finding technique!\nFind the local extrema for the function \\(f(x) = x^3(x-3)(x-6)^4\\) using numerical techniques where appropriate.\n\n\n\nExercise 3.59 (scipy.optimize.fsolve()) The scipy library in Python has many built-in numerical analysis routines much like the ones that we have built in this chapter. Of particular interest to the task of root finding is the fsolve command in the scipy.optimize library.\n\nGo to the help documentation for scipy.optimize.fsolve and make yourself familiar with how to use the tool.\nFirst solve the equation \\(x\\sin(x) - \\log(x) = 0\\) for \\(x\\) starting at \\(x_0 = 3\\).\n\nMake a plot of the function on the domain \\([0,5]\\) so you can eyeball the root before using the tool.\nUse the scipy.optimize.fsolve() command to approximate the root.\nFully explain each of the outputs from the scipy.optimize.fsolve() command. You should use the fsolve() command with full_output=1 so you can see all of the solver diagnostics.\n\nDemonstrate how to use fsolve() using any non-trivial nonlinear equation solving problem. Demonstrate what some of the options of fsolve() do.\nThe scipy.optimize.fsolve() command can also solve systems of equations (something we have not built algorithms for in this chapter). Consider the system of equations \\[\\begin{equation}\n\\begin{aligned} x_0 \\cos(x_1) &= 4 \\\\ x_0 x_1 - x_1 &= 5 \\end{aligned}\n\\end{equation}\\] The following Python code allows you to use scipy.optimize.fsolve() so solve this system of nonlinear equations in much the same way as we did in part (b) of this problem. However, be aware that we need to think of x as a vector of \\(x\\)-values. Go through the code below and be sure that you understand every line of code.\n\nimport numpy as np\nfrom scipy.optimize import fsolve\n\ndef F(x):\n return [x[0]*np.cos(x[1])-4, x[0]*x[1] - x[1] - 5]\n\nfsolve(F, [6,1], full_output=1) \n# Note: full_output=1 gives the solver diagnostics\n\nSolve the system of nonlinear equations below using .fsolve(). \\[\\begin{equation}\n\\begin{aligned} x^2-xy^2 &=2 \\\\ xy &= 2 \\end{aligned}\n\\end{equation}\\]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "nmAlgebra.html#projects",
    "href": "nmAlgebra.html#projects",
    "title": "3  Algebra",
    "section": "3.8 Projects",
    "text": "3.8 Projects\nAt the end of every chapter we propose a few projects related to the content in the preceding chapter(s). In this section we propose two ideas for a project related to numerical algebra. The projects in this book are meant to be open ended, to encourage creative mathematics, to push your coding skills, and to require you to write and communicate your mathematics.\n\n3.8.1 Basins of Attraction\nLet \\(f(x)\\) be a differentiable function with several roots. Given a starting \\(x\\) value we should be able to apply Newton’s Method to that starting point and we will converge to one of the roots (so long as you are not in one of the special cases discussed earlier in the chapter). It stands to reason that starting points near each other should all end up at the same root, and for some functions this is true. However, it is not true in general.\nA basin of attraction for a root is the set of \\(x\\) values that converges to that root under Newton iterations. In this problem you will produce coloured plots showing the basins of attraction for all of the following functions. Do this as follows:\n\nFind the actual roots of the function by hand (this should be easy on the functions below).\nAssign each of the roots a different colour.\nPick a starting point on the \\(x\\) axis and use it to start Newton’s Method.\nColour the starting point according to the root that it converges to.\nRepeat this process for many many starting points so you get a coloured picture of the \\(x\\) axis showing where the starting points converge to.\n\nThe set of points that are all the same colour are called the basin of attraction for the root associated with that colour. In Figure 3.14 there is an image of a sample basin of attraction image.\n\n\n\n\n\n\nFigure 3.14: A sample basin of attraction image for a cubic function.\n\n\n\n\nCreate a basin on attraction image for the function \\(f(x) = (x-4)(x+1)\\).\nCreate a basin on attraction image for the function \\(g(x) = (x-1)(x+3)\\).\nCreate a basin on attraction image for the function \\(h(x) = (x-4)(x-1)(x+3)\\).\nFind a non-trivial single-variable function of your own that has an interesting picture of the basins of attraction. In your write up explain why you thought that this was an interesting function in terms of the basins of attraction.\nNow for the fun part! Consider the function \\(f(z) = z^3 - 1\\) where \\(z\\) is a complex variable. That is, \\(z = x + iy\\) where \\(i = \\sqrt{-1}\\). From the Fundamental Theorem of Algebra we know that there are three roots to this polynomial in the complex plane. In fact, we know that the roots are \\(z_0 = 1\\), \\(z_1 = \\frac{1}{2}\\left( -1 + \\sqrt{3} i \\right)\\), and \\(z_2 = \\frac{1}{2} \\left( -1 - \\sqrt{3} i \\right)\\) (you should stop now and check that these three numbers are indeed roots of the polynomial \\(f(z)\\)). Your job is to build a picture of the basins of attraction for the three roots in the complex plane. This picture will naturally be two-dimensional since numbers in the complex plane are two dimensional (each has a real and an imaginary part). When you have your picture give a thorough write up of what you found.\nNow pick your favourite complex-valued function and build a picture of the basins of attraction. Consider this an art project! See if you can come up with the prettiest basin of attraction picture.\n\n\n\n3.8.2 Artillery\nAn artillery officer wishes to fire his cannon on an enemy brigade. He wants to know the angle to aim the cannon in order to strike the target. If we have control over the initial velocity of the cannon ball, \\(v_0\\), and the angle of the cannon above horizontal, \\(\\theta\\), then the initial vertical component of the velocity of the ball is \\(v_y(0) = v_0 \\sin(\\theta)\\) and the initial horizontal component of the velocity of the ball is \\(v_x(0) = v_0 \\cos(\\theta)\\). In this problem we will assume the following:\n\nWe will neglect air resistance1 so, for all time, the differential equations \\(v_y'(t) = -g\\) and \\(v_x'(t) = 0\\) must both hold.\nWe will assume that the position of the cannon is the origin of a coordinate system so \\(s_x(0) = 0\\) and \\(s_y(0) = 0\\).\nWe will assume that the target is at position \\((x_*,y_*)\\) which you can measure accurately relative to the cannon’s position. The landscape is relatively flat but \\(y_*\\) could be a bit higher or a bit lower than the cannon’s position.\n\nUse the given information to write a nonlinear equation2 that relates \\(x_*\\), \\(y_*\\), \\(v_0\\), \\(g\\), and \\(\\theta\\). We know that \\(g = 9.8m/s^2\\) is constant and we will assume that the initial velocity can be adjusted between \\(v_0 = 100m/s\\) and \\(v_0 = 150m/s\\) in increments of \\(10m/s\\). If we then are given a fixed value of \\(x_*\\) and \\(y_*\\) the only variable left to find in your equation is \\(\\theta\\). A numerical root-finding technique can then be applied to your equation to approximate the angle. Create several look up tables for the artillery officer so they can be given \\(v_0\\), \\(x_*\\), and \\(y_*\\) and then use your tables to look up the angle at which to set the cannon. Be sure to indicate when a target is out of range.\nWrite a brief technical report detailing your methods. Support your work with appropriate mathematics and plots. Include your tables at the end of your report.\n\n\n\n\nBurden, Richard L., and J. Douglas Faires. 2010. Numerical Analysis. 9th ed. Brooks Cole.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "nmAlgebra.html#footnotes",
    "href": "nmAlgebra.html#footnotes",
    "title": "3  Algebra",
    "section": "",
    "text": "Strictly speaking, neglecting air resistance is a poor assumption since a cannon ball moves fast enough that friction with the air plays a non-negligible role. However, the assumption of no air resistance greatly simplifies the maths and makes this version of the problem more tractable. The second version of the artillery problem in Chapter 6 will look at the effects of air resistance on the cannon ball.↩︎\nHint: Symbolically work out the amount of time that it takes until the vertical position of the cannon ball reaches \\(y_*\\). Then substitute that time into the horizontal position, and set the horizontal position equation to \\(x_*\\)↩︎",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "nmCalculus.html",
    "href": "nmCalculus.html",
    "title": "4  Calculus",
    "section": "",
    "text": "4.1 Intro to Numerical Calculus\nIn this chapter we build some of the common techniques for approximating the two primary computations in calculus: taking derivatives and evaluating definite integrals. The primary goal of this chapter is to build a solid understanding of the basic techniques for numerical differentiation and integration. These will be crucial in the later chapters of this book when we numerically integrate ordinary and partial differential equations.\nRecall the typical techniques from differential calculus: the power rule, the chain rule, the product rule, the quotient rule, the differentiation rules for exponentials, inverses, and trig functions, implicit differentiation, etc. With these rules, and enough time and patience, we can find a derivative of any algebraically defined function. The truth of the matter is that not all functions are given to us algebraically, and even the ones that are given algebraically are sometimes really cumbersome.\nIntegration, on the other hand, is a more difficult situation. You may recall some of the techniques of integral calculus such as the power rule, \\(u\\)-substitution, and integration by parts. However, these tools are not enough to find an antiderviative for every given function. Furthermore, not every function can be written algebraically.\nWhat you have seen here are just a few examples of why you might need to use numerical calculus instead of the classical routines that you learned earlier in your mathematical career. Another typical need for numerical derivatives and integrals arises when we approximate the solutions to differential equations in the later chapters of this book.\nThroughout this chapter we will make heavy use of Taylor’s Theorem to build approximations of derivatives and integrals. If you find yourself still a bit shaky on Taylor’s Theorem it would probably be wise to go back to Section 2.4 and do a quick review.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Calculus</span>"
    ]
  },
  {
    "objectID": "nmLinAlg.html",
    "href": "nmLinAlg.html",
    "title": "8  Linear Algebra",
    "section": "",
    "text": "You cannot learn too much linear algebra.\n– Every mathematician\n\nComing in week 5.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Linear Algebra</span>"
    ]
  },
  {
    "objectID": "nmODE.html",
    "href": "nmODE.html",
    "title": "6  Ordinary Differential Equations",
    "section": "",
    "text": "6.1 Euler’s Method\nThe notion of approximating solutions to differential equations is simple in principle:\nThe challenging part is making the approximation to the derivative(s). There are many methods for approximating derivatives, and that is exactly where we will start.\nA way to think about Euler’s method is that at a given point, the slope is approximated by the value of the right-hand side of the differential equation and then we step forward \\(h\\) units in time following that slope. Figure 6.3 shows a depiction of the idea. Notice in the figure that in regions of high curvature Euler’s method will overshoot the exact solution to the differential equation. However, taking the limit as \\(h\\) tends to \\(0\\) theoretically gives the exact solution at the trade off of needing infinite computational resources.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Ordinary Differential Equations</span>"
    ]
  },
  {
    "objectID": "nmPDE.html",
    "href": "nmPDE.html",
    "title": "7  Partial Differential Equations",
    "section": "",
    "text": "When you open the toolkit of differential equations you see the hammers and saws of engineering and physics for the past two centuries and for the foreseeable future.\n–Benoit Mandelbrot\n\nComing in week 9.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Partial Differential Equations</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Acton, Forman S. 1990. Numerical Methods That\nWork. 1St Edition edition. Washington, D.C: The\nMathematical Association of America.\n\n\nBurden, Richard L., and J. Douglas Faires. 2010. Numerical\nAnalysis. 9th ed. Brooks Cole.\n\n\nButcher, J. C. 2016. Numerical Methods for Ordinary Differential\nEquations. Third edition. Wiley. https://yorsearch.york.ac.uk/permalink/f/1kq3a7l/44YORK_ALMA_DS51336126850001381.\n\n\nGreenbaum, Anne, and Tim P. Chartier. 2012. Numerical Methods:\nDesign, Analysis, and Computer Implementation of Algorithms.\nPrinceton University Press.\n\n\nKincaid, D. R., and E. W. Cheney. 2009. Numerical\nAnalysis: Mathematics of\nScientific Computing. Pure and Applied\nUndergraduate Texts. American Mathematical Society.\n\n\nPress, William H., Saul A. Teukolsky, William T. Vetterling, and Brian\nP. Flannery. 2007. Numerical Recipes: The Art of Scientific\nComputing. Cambridge University Press. https://numerical.recipes/.\n\n\n“Project Euler.” n.d. Accessed December 14, 2023. https://projecteuler.net/.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "nmCalculus.html#intro-to-numerical-calculus",
    "href": "nmCalculus.html#intro-to-numerical-calculus",
    "title": "4  Calculus",
    "section": "",
    "text": "Exercise 4.1 When a police officer fires a radar gun at a moving car it uses a laser to measure the distance from the officer to the car:\n\nThe speed of light is constant.\nThe time between when the laser is fired and when the light reflected off of the car is received can be measured very accurately.\nUsing the formula \\(\\text{distance} = \\text{rate} \\cdot \\text{time}\\), the time for the laser pulse to be sent and received can then be converted to a distance.\n\nHow does the radar gun then use that information to calculate the speed of the moving car?\n\n\n\n\n\nExercise 4.2 In statistics the function known as the normal distribution (the bell curve) is defined as \\[\\begin{equation}\nN(x) = \\frac{1}{\\sqrt{2\\pi}} e^{-x^2/2}.\n\\end{equation}\\] One of the primary computations of introductory statistics is to find the area under a portion of this curve since this area gives the probability of some event \\[\\begin{equation}\nP(a &lt; x &lt; b) = \\int_a^b \\frac{1}{\\sqrt{2\\pi}} e^{-x^2/2} dx.\n\\end{equation}\\] The trouble is that there is no known antiderivative of this function. Propose a method for approximating this area.\n\n\n\nExercise 4.3 A dam operator has control of the rate at which water is flowing out of a hydroelectric dam. He has records for the approximate flow rate through the dam over the course of a day. Propose a way for the operator to use his data to determine the total amount of water that has passed through the dam during that day.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Calculus</span>"
    ]
  },
  {
    "objectID": "nmCalculus.html#differentiation",
    "href": "nmCalculus.html#differentiation",
    "title": "4  Calculus",
    "section": "4.2 Differentiation",
    "text": "4.2 Differentiation\n\n4.2.1 The First Derivative\n\nExercise 4.4 Recall from your first-semester Calculus class that the derivative of a function \\(f(x)\\) is defined as \\[\\begin{equation}\nf'(x) = \\lim_{\\Delta x \\to 0} \\frac{f(x+\\Delta x) - f(x)}{\\Delta x}.\n\\end{equation}\\] A Calculus student proposes that it would just be much easier if we dropped the limit and instead just always choose \\(\\Delta x\\) to be some small number, like \\(0.001\\) or \\(10^{-6}\\). Discuss the following questions:\n\nWhen might the Calculus student’s proposal actually work pretty well in place of calculating an actual derivative?\nWhen might the Calculus student’s proposal fail in terms of approximating the derivative?\n\n\n\nIn this section we will build several approximation of first and second derivatives. The primary idea for each of these approximations is:\n\nPartition the interval \\([a,b]\\) into \\(N\\) sub intervals\nDefine the distance between two points in the partition as \\(\\Delta x\\).\nApproximate the derivative at any point \\(x\\) in the interval \\([a,b]\\) by using linear combinations of \\(f(x-\\Delta x)\\), \\(f(x)\\), \\(f(x+\\Delta x)\\), and/or other points in the partition.\n\nPartitioning the interval into discrete points turns the continuous problem of finding a derivative at every real point in \\([a,b]\\) into a discrete problem where we calculate the approximate derivative at finitely many points in \\([a,b]\\).\nThis distance \\(\\Delta x\\) between neighbouring points in the partition is often referred to as the step size. It is also common to denote the step size by the letter \\(h\\). We will use both notations for the step size interchangeably, using mostly \\(h\\) in this section on differentiation and \\(\\Delta x\\) in the next section on integration. Note that in general the points in the partition do not need to be equally spaced, but that is the simplest place to start. Figure 4.1 shows a depiction of the partition as well as making clear that \\(h\\) is the separation between each of the points in the partition.\n\n\n\n\n\n\nFigure 4.1: A partition of the interval \\([a,b]\\).\n\n\n\n\n\nExercise 4.5 Let us take a close look at partitions before moving on to more details about numerical differentiation.\n\nIf we partition the interval \\([0,1]\\) into \\(3\\) equal sub intervals each with length \\(h\\) then:\n\n\\(h = \\underline{\\hspace{1in}}\\)\n\\([0,1] = [0,\\underline{\\hspace{0.25in}}] \\cup [\\underline{\\hspace{0.25in}},\\underline{\\hspace{0.25in}}] \\cup [\\underline{\\hspace{0.25in}},1]\\)\nThere are four total points that define the partition. They are \\(0, \\underline{\\hspace{0.25in}}, \\underline{\\hspace{0.25in}}, 1\\).\n\nIf we partition the interval \\([3,7]\\) into \\(5\\) equal sub intervals each with length \\(h\\) then:\n\n\\(h = \\underline{\\hspace{1in}}\\)\n\\([3,7] = [3,\\underline{\\hspace{0.25in}}] \\cup [\\underline{\\hspace{0.25in}},\\underline{\\hspace{0.25in}}] \\cup [\\underline{\\hspace{0.25in}},\\underline{\\hspace{0.25in}}] \\cup [\\underline{\\hspace{0.25in}},\\underline{\\hspace{0.25in}}] \\cup [\\underline{\\hspace{0.25in}},7]\\)\nThere are 6 total points that define the partition. They are \\(0, \\underline{\\hspace{0.25in}}, \\underline{\\hspace{0.25in}}, \\underline{\\hspace{0.25in}}, \\underline{\\hspace{0.25in}}, 7\\).\n\nMore generally, if a closed interval \\([a,b]\\) contains \\(N\\) equal sub intervals where \\[\\begin{equation}\n[a,b] = \\underbrace{[a,a+h] \\cup [a+h, a+2h] \\cup \\cdots \\cup [b-2h,b-h] \\cup [b-h,b]}_{\\text{$N$ total sub intervals}}\n\\end{equation}\\] then the length of each sub interval, \\(h\\), is given by the formula \\[\\begin{equation}\nh = \\frac{\\underline{\\hspace{0.25in}} - \\underline{\\hspace{0.25in}}}{\\underline{\\hspace{0.25in}}}.\n\\end{equation}\\]\n\n\n\n\nExercise 4.6 In Python’s numpy library there is a nice tool called np.linspace() that partitions an interval in exactly the way that we want. The command takes the form np.linspace(a, b, n) where the interval is \\([a,b]\\) and \\(n\\) the number of points used to create the partition. For example, np.linspace(0,1,5) will produce the list of numbers 0, 0.25, 0.5, 0.75, 1. Notice that there are 5 total points, the first point is \\(a\\), the last point is \\(b\\), and there are \\(4\\) total sub intervals in the partition. Hence, if we want to partition the interval \\([0,1]\\) into 20 equal sub intervals then we would use the command np.linspace(0,1,21) which would result in a list of numbers starting with 0, 0.05, 0.1, 0.15, etc. What command would you use to partition the interval \\([5,10]\\) into \\(100\\) equal sub intervals?\n\n\n\nExercise 4.7 Consider the Python command np.linspace(0,1,50).\n\nWhat interval does this command partition?\nHow many points are going to be returned?\nHow many equal length subintervals will we have in the resulting partition?\nWhat is the length of each of the subintervals in the resulting partition?\n\n\n\nNow let us get back to the discussion of numerical differentiation. If we recall that the definition of the first derivative of a function is \\[\\begin{equation}\n\\begin{aligned} \\frac{df(x)}{dx} = \\lim_{h \\to 0} \\frac{f(x+h) - f(x)}{h}. \\label{eqn:derivative_definition}\\end{aligned}\n\\end{equation}\\] our first approximation for the first derivative is naturally \\[\\begin{equation}\n\\begin{aligned} \\frac{df(x)}{dx} \\approx \\frac{f(x+h) - f(x)}{h}=:\\Delta f(x). \\label{eqn:derivative_first_approx}\\end{aligned}\n\\end{equation}\\] In this approximation of the derivative we have simply removed the limit and instead approximated the derivative as the slope. It should be clear that this approximation is only good if the step size \\(h\\) is small. In Figure 4.2 we see a graphical depiction of what we are doing to approximate the derivative. The slope of the tangent line (\\(\\Delta y / \\Delta x\\)) is what we are after, and a way to approximate it is to calculate the slope of the secant line formed by looking \\(h\\) units forward from the point \\(x\\).\n\n\n\n\n\n\nFigure 4.2: The forward difference differentiation scheme for the first derivative.\n\n\n\nWhile this is the simplest and most obvious approximation for the first derivative there is a much more elegant technique, using Taylor series, for arriving at this approximation. Furthermore, the Taylor series technique gives us information about the approximation error and later will suggest an infinite family of other techniques.\n\n\n\n4.2.2 Truncation error\n\nExercise 4.8 From Taylor’s Theorem we know that for an infinitely differentiable function \\(f(x)\\), \\[\\begin{equation}\nf(x) = f(x_0) + \\frac{f'(x_0)}{1!} (x-x_0)^1 + \\frac{f''(x_0)}{2!}(x-x_0)^2 + \\frac{f^{(3)}(x_0)}{3!}(x-x_0)^3 + \\cdots.\n\\end{equation}\\] What do we get if we replace every “\\(x\\)” in the Taylor Series with “\\(x+h\\)” and replace every “\\(x_0\\)” in the Taylor Series with “\\(x\\)?” In other words, in Figure 4.1 we want to centre the Taylor series at \\(x\\) and evaluate the resulting series at the point \\(x+h\\). \\[\\begin{equation}\nf(x+h) = \\underline{\\hspace{3in}}\n\\end{equation}\\]\n\n\n\nExercise 4.9 Solve the result from the previous exercise for \\(f'(x)\\) to create an approximation for \\(f'(x)\\) using \\(f(x+h)\\), \\(f(x)\\), and some higher order terms. (fill in the blanks and the question marks) \\[\\begin{equation}\nf'(x) = \\frac{f(x+h) - ???}{??} + \\underline{\\hspace{2in}}\n\\end{equation}\\]\n\n\n\nExercise 4.10 In the formula that you developed in Exercise 4.9, if we were to truncate after the first fraction and drop everything else (called the remainder), we know that we would be introducing a truncation error into our derivative computation. If \\(h\\) is taken to be very small then the first term in the remainder is the largest and everything else in the remainder can be ignored (since all subsequent terms should be extremely small … pause and ponder this fact). Therefore, the amount of error we make in the derivative computation by dropping the remainder depends on the power of \\(h\\) in that first term in the remainder.\nWhat is the power of \\(h\\) in the first term of the remainder from Exercise 4.9?\n\n\n\nDefinition 4.1 (Order of a Numerical Differentiation Scheme) The order of a numerical derivative is the power of the step size in the first term of the remainder of the rearranged Taylor Series. For example, a first order method will have “\\(h^1\\)” in the first term of the remainder. A second order method will have “\\(h^2\\)” in the first term of the remainder. Etc.\nFor sufficiently small step size \\(h\\), the error that you make by truncating the series is dominated by the first term in the remainder, which is proportional to the power of \\(h\\) in that term. Hence, the order of a numerical differentiation scheme tells you how the error you are making by using the approximation scheme decreases as you decrease the step-size \\(h\\).\n\n\n\nDefinition 4.2 (Big O Notation) We say that the error in a differentiation scheme is \\(\\mathcal{O}(h)\\) (read: “big O of \\(h\\)”), if and only if there is a positive constant \\(M\\) such that \\[\\begin{equation}\n|\\text{Error}| \\le M \\cdot h\n\\end{equation}\\] when \\(h\\) is sufficiently small. This is equivalent to saying that a differentiation method is “first order.”\nMore generally, we say that the error in a differentiation scheme is \\(\\mathcal{O}(h^k)\\) (read: “big O of \\(h^k\\)”) if and only if there is a positive constant \\(M\\) such that \\[\\begin{equation}\n|\\text{Error}| \\leq M \\cdot h^k.\n\\end{equation}\\] when \\(h\\) is sufficiently small. This is equivalent to saying that a differentiation scheme is “\\(k^{th}\\) order.”\n\n\n\nTheorem 4.1 The approximation you derived in Exercise 4.9 gives a first order approximation of the first derivative: \\[\\begin{equation}\nf'(x) = \\frac{f(x+h) - f(x)}{h} + \\mathcal{O}(h).\n\\end{equation}\\] This is called the forward difference approximation of the first derivative.\n\n\n\nExercise 4.11 Consider the function \\(f(x) = \\sin(x) (1- x)\\). The goal of this exercise is to make sense of the discussion of the “order” of the derivative approximation. You may want to pause first and reread the previous couple of pages.\n\nFind \\(f'(x)\\) by hand.\nUse your answer to part (a) to verify that \\(f'(1) = -\\sin(1) \\approx -0.8414709848\\).\nTo approximate the first derivative at \\(x=1\\) numerically with the forward-difference approximation formula from Theorem 4.1 we calculate \\[\\begin{equation}\nf'(1) \\approx \\frac{f(1+h) - f(1)}{h}=:\\Delta f(1).\n\\end{equation}\\] We want to see how the error in the approximation behaves as \\(h\\) is made smaller and smaller. Fill in the table below with the derivative approximation and the absolute error associated with each given \\(h\\). You may want to use a spreadsheet to organize your data (be sure that you are working in radians!).\n\n\n\n\n\n\n\n\n\\(h\\)\n\\(\\Delta f(1)\\)\n\\(|f'(1)-\\Delta f(1)|\\)\n\n\n\n\n\\(2^{-1} = 0.5\\)\n\\(\\frac{f(1+0.5)-f(1)}{0.5} \\approx -0.99749\\)\n\\(0.15602\\)\n\n\n\\(2^{-2} = 0.25\\)\n\\(\\frac{f(1+0.25)-f(1)}{0.25} \\approx -0.94898\\)\n\\(0.10751\\)\n\n\n\\(2^{-3} = 0.125\\)\n\n\n\n\n\\(2^{-4}=0.0625\\)\n\n\n\n\n\\(2^{-5}\\)\n\n\n\n\n\\(2^{-6}\\)\n\n\n\n\n\\(2^{-7}\\)\n\n\n\n\n\\(2^{-8}\\)\n\n\n\n\n\\(2^{-9}\\)\n\n\n\n\n\\(2^{-10}\\)\n\n\n\n\n\nThere was nothing really special in part (c) about powers of 2. Use your spreadsheet to build similar tables for the following sequences of \\(h\\): \\[\\begin{equation}\n\\begin{aligned} h &= 3^{-1}, \\, 3^{-2}, \\, 3^{-3}, \\, \\ldots \\\\ h &= 5^{-1}, \\, 5^{-2}, \\, 5^{-3}, \\, \\ldots \\\\ h &= 10^{-1}, \\, 10^{-2}, \\, 10^{-3}, \\, \\ldots \\\\ h &= \\pi^{-1}, \\, \\pi^{-2}, \\, \\pi^{-3}, \\, \\ldots. \\\\ \\end{aligned}\n\\end{equation}\\]\nObservation: If you calculate a numerical derivative with a forward difference and then calculate the absolute error with a fixed value of \\(h\\), then what do you expect to happen to the absolute error if you divide the value of \\(h\\) by some positive constant \\(M\\)? It may be helpful at this point to go back to your table and include a column called the error reduction factor where you find the ratio of two successive absolute errors. Observe what happens to this error reduction factor as \\(h\\) gets smaller and smaller.\nWhat does your answer to part (e) have to do with the approximation order of the numerical derivative method that you used?\n\n\n\n\nExercise 4.12 The following incomplete block of Python code will help to streamline the previous exercise so that you do not need to do the computation with a spreadsheet.\n\nComment every existing line with a thorough description.\nFill in the blanks in the code to perform the spreadsheet computations from the previous exercise.\nRun the code for several different sequences of values for \\(h\\). Do you still observe the same result that you observed in part (e) of the previous exercise?\nRun the code for several different choices of the function \\(f\\) and several different choices for the point \\(x\\). What do you observe?\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nf = lambda x: np.sin(x) * (1-x) # what does this line do?\nexact = -np.sin(1) # what does this line do?\nH = 2.0**(-np.arange(1,10)) # what does this line do?\nAbsError = [] # start off with a blank list of errors\nfor h in H:\n    approx = # FINISH THIS LINE OF CODE\n    AbsError.append(np.abs((approx - exact)/exact))\n    if h==H[0]:\n      print(\"h=\",h,\"\\t\\t Absolute Pct Error=\", AbsError[-1])\n    else:\n      err_reduction_factor = AbsError[-2]/AbsError[-1]\n      print(\"h=\",h,\"\\t Absolute Error=\", AbsError[-1],\n              \"with error reduction\",err_reduction_factor)\nplt.loglog(H,AbsError,'b-*') # Why are we building a loglog plot?\nplt.grid()\nplt.show()\n\n\n\nExercise 4.13 Explain the phrase: The forward difference approximation \\(f'(x) \\approx \\frac{f(x+h)-f(x)}{h}\\) is first order.\n\n\n\n\n4.2.3 Efficient Coding\nNow that we have a handle on how the forward-difference approximation scheme for the first derivative works and how the error depends on the step size, let us build some code that will take in a function and output the approximate first derivative on an entire interval instead of just at a single point.\n\n\nExercise 4.14 We want to build a Python function that accepts:\n\na mathematical function,\nthe bounds of an interval,\nand the number of subintervals.\n\nThe function will return the forward-difference approximation of the first derivative at every point in the interval except at the right-hand side. For example, we could send the function \\(f(x) = \\sin(x)\\), the interval \\([0,2\\pi]\\), and tell it to split the interval into 100 subintervals. We would then get back an approximate value of the derivative \\(f'(x)\\) at all of the points except at \\(x=2\\pi\\).\n\nFirst of all, why can we not compute the forward-difference approximation of the derivative at the last point?\nNext, fill in the blanks in the partially complete code below. Every line needs to have a comment explaining exactly what it does.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef ForwardDiff(f,a,b,N):\n    x = np.linspace(a,b,N+1) # What does this line of code do? \n    # What's up with the N+1 in the previous line?\n    h = x[1] - x[0] # What does this line of code do?\n    df = [] # What does this line of code do?\n    for j in np.arange(len(x)-1): # What does this line of code do?  \n        # What's up with the -1 in the definition of the loop?\n        # \n        # Now we want to build the approximation \n        # (f(x+h) - f(x)) / h.\n        # Obviously \"x+h\" is just the next item in the list of \n        # x values so when we do f(x+h) mathematically we should \n        # write f( x[j+1] ) in Python (explain this).  \n        # Fill in the question marks below\n        df.append( (f( ??? ) - f( ??? )) / h )\n    return df\n\nNow we want to call upon this function to build the first order approximation of the first derivative for some function. We will use the function \\(f(x) = \\sin(x)\\) on the interval \\([0,2\\pi]\\) with 100 sub intervals (since we know what the answer should be). Complete the code below to call upon your ForwardDiff() function and to plot \\(f(x)\\), \\(f'(x)\\), and the approximation of \\(f'(x)\\).\n\nf = lambda x: np.sin(x)\nexact_df = lambda x: np.cos(x)\na = ???\nb = ???\nN = 100 # What is this?\nx = np.linspace(a,b,N+1) \n# What does the previous line do?  \n# What's up with the N+1?\n\ndf = ForwardDiff(f,a,b,N) # What does this line do?\n\n# In the next line we plot three curves: \n# 1) the function f(x)\n# 2) the function f'(x)\n# 3) the approximation of f'(x)\n# However, we do something funny with the x in the last plot. Why?\nplt.plot(x,f(x),'b',x,exact_df(x),'r--',x[0:-1], df, 'k-.')\nplt.grid()\nplt.legend(['f(x) = sin(x)',\n            'exact first deriv',\n            'approx first deriv'])\nplt.show()\n\nImplement your completed code and then test it in several ways:\n\nTest your code on functions where you know the derivative. Be sure that you get the plots that you expect.\nTest your code with a very large number of sub intervals, \\(N\\). What do you observe?\nTest your code with small number of sub intervals, \\(N\\). What do you observe?\n\n\n\n\n\nExercise 4.15 Now let us build the first derivative function in a much smarter way – using NumPy arrays in Python. Instead of looping over all of the \\(x\\) values, we can take advantage of the fact that NumPy operations can act on all the elements of an array at once and hence we can do all of the function evaluations and all the subtractions and divisions at once without a loop.\n\nThe line of code x = np.linspace(a,b,N+1) builds a numpy vector of \\(N+1\\) values of \\(x\\) starting at \\(a\\) and ending at \\(b\\). Then y = f(x) builds a vector with the function values at all the elements in x. In the following questions remember that Python indexes all lists starting at 0. Also remember that you can call on the last element of a list using an index of -1. Finally, remember that if you do x[p:q] in Python you will get a list of x values starting at index p and ending at index q-1.\n\nWhat will we get if we evaluate the code y[1:]?\nWhat will we get if we evaluate the code y[:-1]?\nWhat will we get if we evaluate the code y[1:] - y[:-1]?\nWhat will we get if we evaluate the code (y[1:] - y[:-1]) / h?\n\nUse the insight from part (1) to simplify your first order first derivative function to look like the code below.\n\ndef ForwardDiff(f,a,b,N):\n    x = np.linspace(a,b,N+1)\n    h = x[1] - x[0]\n    y = f(x)\n    df = # your line of code goes here?  \n    return df\n\n\nExercise 4.16 Write code that finds a first order approximation for the first derivative of \\(f(x) = \\sin(x) - x\\sin(x)\\) on the interval \\(x \\in (0,15)\\). Your script should output two plots (side-by-side).\n\nThe left-hand plot should show the function in blue and the approximate first derivative as a red dashed curve. Sample code for this exercise is given below.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nf = lambda x: np.sin(x) - x*np.sin(x)\na = 0\nb = 15\nN = # make this an appropriately sized number of subintervals\nx = np.linspace(a,b,N+1) # what does this line do?\ny = f(x) # what does this line do?\ndf = ForwardDiff(f,a,b,N) # what does this line do?\n\nfig, ax = plt.subplots(1,2) # what does this line do?\nax[0].plot(x,y,'b',x[0:-1],df,'r--') # what does this line do?\nax[0].grid()\n\nThe right-hand plot should show the absolute error between the exact derivative and the numerical derivative. You should use a logarithmic \\(y\\) axis for this plot.\n\nexact = lambda x: # write a function for the exact derivative\n# There is a lot going on the next line of code ... explain it.\nax[1].semilogy(x[0:-1],abs(exact(x[0:-1]) - df))\nax[1].grid()\n\nPlay with the number of sub intervals, \\(N\\), and demonstrate the fact that we are using a first order method to approximate the first derivative.\n\n\n\n\n\n4.2.4 A Better First Derivative\nNext we will build a more accurate numerical first derivative scheme. The derivation technique is the same: play a little algebra game with the Taylor series and see if you can get the first derivative to simplify out. This time we will be hoping to get a second order method.\n\n\nExercise 4.17 Consider again the Taylor series for an infinitely differentiable function \\(f(x)\\): \\[\\begin{equation}\nf(x) = f(x_0) + \\frac{f'(x_0)}{1!} (x-x_0)^1 + \\frac{f''(x_0)}{2!}(x-x_0)^2 + \\frac{f^{(3)}(x_0)}{3!}(x-x_0)^3 + \\cdots .\n\\end{equation}\\]\n\nReplace the “\\(x\\)” in the Taylor Series with “\\(x+h\\)” and replace the “\\(x_0\\)” in the Taylor Series with “\\(x\\)” and simplify. \\[\\begin{equation}\nf(x+h) = \\underline{\\hspace{3in}}.\n\\end{equation}\\]\nNow replace the “\\(x\\)” in the Taylor Series with “\\(x-h\\)” and replace the “\\(x_0\\)” in the Taylor Series with “\\(x\\)” and simplify. \\[\\begin{equation}\nf(x-h) = \\underline{\\hspace{3in}}.\n\\end{equation}\\]\nFind the difference between \\(f(x+h)\\) and \\(f(x-h)\\) and simplify. Be very careful of your signs. \\[\\begin{equation}\nf(x+h) - f(x-h) = \\underline{\\hspace{3in}}.\n\\end{equation}\\]\nSolve for \\(f'(x)\\) in your result from part (3). Fill in the question marks and blanks below once you have finished simplifying. \\[\\begin{equation}\nf'(x) = \\frac{??? - ???}{2h} + \\underline{\\hspace{3in}}.\n\\end{equation}\\]\nUse your result from part (4) to verify that \\[\\begin{equation}\nf'(x) = \\underline{\\hspace{2in}} + \\mathcal{O}(h^2).\n\\end{equation}\\]\nDraw a picture similar to Figure 4.2 showing what this scheme is doing graphically.\n\n\n\n\nExercise 4.18 Let us return to the function \\(f(x) = \\sin(x)(1- x)\\) but this time we will approximate the first derivative at \\(x=1\\) using the formula \\[\\begin{equation}\nf'(1) \\approx \\frac{f(1+h) - f(1-h)}{2h}=:\\delta f(1).\n\\end{equation}\\] You should already have the first derivative and the exact answer from Exercise 4.11 (if not, then go get them by hand again).\n\nFill in the table below with the derivative approximation and the absolute error associated with each given \\(h\\). You may want to use a spreadsheet to organize your data (be sure that you are working in radians!).\n\n\n\n\n\n\n\n\n\\(h\\)\n\\(\\delta f(1)\\)\n\\(|f'(1)-\\delta f(1)|\\)\n\n\n\n\n\\(2^{-1} = 0.5\\)\n\\(-0.73846\\)\n\\(0.10301\\)\n\n\n\\(2^{-2} = 0.25\\)\n\\(-0.81531\\)\n\\(0.02616\\)\n\n\n\\(2^{-3} = 0.125\\)\n\n\n\n\n\\(2^{-4}=0.0625\\)\n\n\n\n\n\\(2^{-5}\\)\n\n\n\n\n\\(2^{-6}\\)\n\n\n\n\n\\(2^{-7}\\)\n\n\n\n\n\\(2^{-8}\\)\n\n\n\n\n\\(2^{-9}\\)\n\n\n\n\n\\(2^{-10}\\)\n\n\n\n\n\nThere was nothing really special in part (1) about powers of 2. Use your spreadsheet to build similar tables for the following sequences of \\(h\\): \\[\\begin{equation}\n\\begin{aligned} h &= 3^{-1}, \\, 3^{-2}, \\, 3^{-3}, \\, \\ldots \\\\ h &= 5^{-1}, \\, 5^{-2}, \\, 5^{-3}, \\, \\ldots \\\\ h &= 10^{-1}, \\, 10^{-2}, \\, 10^{-3}, \\, \\ldots \\\\ h &= \\pi^{-1}, \\, \\pi^{-2}, \\, \\pi^{-3}, \\, \\ldots. \\end{aligned}\n\\end{equation}\\]\nObservation: If you calculate a numerical derivative with a central difference and calculate the resulting absolute error with a fixed value of \\(h\\), then what do you expect to happen to the absolute error if you divide the value of \\(h\\) by some positive constant \\(M\\)? It may be helpful to include a column in your table that tracks the error reduction factor as we decrease \\(h\\).\nWhat does your answer to part (c) have to do with the approximation order of the numerical derivative method that you used?\n\n\n\n\nExercise 4.19 Write a Python function CentralDiff(f, a, b, N) that takes a mathematical function f, the start and end values of an interval [a, b] and the number N of subintervals to use. It should return a second order numerical approximation to the first derivative on the interval. This should be a vector with \\(N-1\\) entries (why?). You should try to write this code without using any loops. (Hint: This should really be a minor modification of your first order first derivative code.) Test the code on functions where you know the first derivative.\n\n\n\nExercise 4.20 The plot shown in Figure 4.3 shows the maximum absolute error between the exact first derivative of a function \\(f(x)\\) and a numerical first derivative approximation scheme. At this point we know two schemes: \\[\\begin{equation}\nf'(x) = \\frac{f(x+h) - f(x)}{h} + \\mathcal{O}(h)\n\\end{equation}\\] and \\[\\begin{equation}\nf'(x) = \\frac{f(x+h) - f(x-h)}{2h} + \\mathcal{O}(h^2).\n\\end{equation}\\]\n\nWhich curve in the plot matches with which method. How do you know?\nRecreate the plot with a function of your choosing.\n\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Choose a function f\nf = lambda x: np.sin(x)\n# Give its derivative\ndf = lambda x: np.cos(x)\n# Choose interval\na = 0\nb = 2*np.pi\n\nm = 16 # Number of different step sizes to plot\n# Pre-allocate vectors for errors\nfd_error = np.zeros(m)\ncd_error = np.zeros(m)\n# Pre-allocate vector for step sizes\nH = np.zeros(m)\n\n# Loop over the different step sizes\nfor n in range(m):\n    N = 2**(n+2) # Number of subintervals\n    x = np.linspace(a, b, N+1)\n    y = f(x)\n    h = x[1]-x[0] # step size\n\n    # Calculate the derivative and approximations\n    exact = df(x)\n    forward_diff = (y[1:]-y[:-1])/h\n    central_diff = (y[2:]-y[:-2])/(2*h)\n\n    # save the maximum of the errors for this step size\n    fd_error[n] = max(abs(forward_diff - df(x[:-1])))\n    cd_error[n] = max(abs(central_diff - df(x[1:-1])))\n    H[n] = h\n\n# Make a loglog plot of the errors agains step size\nplt.loglog(H,fd_error,'b-', label='Approximation Method A')\nplt.loglog(H,cd_error,'r-', label='Approximation Method B')\nplt.xlabel('Steps size h')\nplt.ylabel('Maximum Absolute Error')\nplt.title('Comparing Two First Derivative Approximations')\nplt.grid()\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 4.3: Maximum absolute error between the first derivative and two different approximations of the first derivative.\n\n\n\n\n\n\n\n\n\n4.2.5 The Second Derivative\nNow we will search for an approximation of the second derivative. Again, the game will be the same: experiment with the Taylor series and some algebra with an eye toward getting the second derivative to pop out cleanly. This time we will do the algebra in such a way that the first derivative cancels.\nFrom the previous exercises you already have Taylor expansions of the form \\(f(x+h)\\) and \\(f(x-h)\\). Let us summarize them here since you are going to need them for future computations. \\[\\begin{equation}\n\\begin{aligned} f(x+h) &= f(x) + \\frac{f'(x)}{1!} h + \\frac{f''(x)}{2!} h^2 + \\frac{f^{(3)}(x)}{3!} h^3 + \\cdots \\\\ f(x-h) &= f(x) - \\frac{f'(x)}{1!} h + \\frac{f''(x)}{2!} h^2 - \\frac{f^{(3)}(x)}{3!} h^3 + \\cdots. \\end{aligned}\n\\end{equation}\\]\n\n\nExercise 4.21 The goal of this exercise is to use the Taylor series for \\(f(x+h)\\) and \\(f(x-h)\\) to arrive at an approximation scheme for the second derivative \\(f''(x)\\).\n\nAdd the Taylor series for \\(f(x+h)\\) and \\(f(x-h)\\) and combine all like terms. You should notice that several terms cancel. \\[\\begin{equation}\nf(x+h) + f(x-h) = \\underline{\\hspace{3in}}.\n\\end{equation}\\]\nSolve your answer in part (1) for \\(f''(x)\\). \\[\\begin{equation}\nf''(x) = \\frac{?? - 2 \\cdot ?? + ??}{h^2} + \\underline{\\hspace{1in}}.\n\\end{equation}\\]\nIf we were to drop all of the terms after the fraction on the right-hand side of the previous result we would be introducing some error into the derivative computation. What does this tell us about the order of the error for the second derivative approximation scheme we just built?\n\n\n\n\nExercise 4.22 Again consider the function \\(f(x) = \\sin(x)(1 - x)\\).\n\nCalculate the derivative of this function and calculate the exact value of \\(f''(1)\\).\nIf we calculate the second derivative with the central difference scheme that you built in the previous exercise using \\(h = 0.5\\) then we get an absolute error of about 0.044466. Stop now and verify this error calculation.\nBased on our previous work with the order of the error in a numerical differentiation scheme, what do you predict the error will be if we calculate \\(f''(1)\\) with \\(h = 0.25\\)? With \\(h = 0.05\\)? With \\(h = 0.005\\)? Defend your answers.\n\n\n\n\nExercise 4.23 Write a Python function SecondDiff(f, a, b, N) that takes a mathematical function f, the start and end values of an interval [a, b] and the number N of subintervals to use. It should return a second order numerical approximation to the second derivative on the interval. This should be a vector with \\(N-1\\) entries (why?). As before, you should write your code without using any loops.\n\n\n\nExercise 4.24 Test your second derivative code on the function \\(f(x) = \\sin(x) - x\\sin(x)\\) by doing the following.\n\nFind the analytic second derivative by hand (you did this already in Exercise 4.22).\nFind the numerical second derivative with the code that you just wrote.\nFind the absolute difference between your numerical second derivative and the actual second derivative. This is point-by-point subtraction so you should end up with a vector of errors.\nFind the maximum of your errors.\nNow we want to see how the code works if you change the number of points used. Build a plot showing the value of \\(h\\) on the horizontal axis and the maximum error on the vertical axis. You will need to write a loop that gets the error for many different values of \\(h\\). Finally, it is probably best to build this plot on a log-log scale.\nDiscuss what you see? How do you see the fact that the numerical second derivative is second order accurate?\n\n\n\nThe table below summarizes the formulas that we have for derivatives thus far. The exercises at the end of this chapter contain several more derivative approximations. We will return to this idea when we study numerical differential equations in Chapter 6.\n\n\n\n\n\n\n\n\n\nDerivative\nFormula\nError\nName\n\n\n\n\n\\(1^{st}\\)\n\\(f'(x) \\approx \\frac{f(x+h) - f(x)}{h}\\)\n\\(\\mathcal{O}(h)\\)\nForward Difference\n\n\n\\(1^{st}\\)\n\\(f'(x) \\approx \\frac{f(x) - f(x-h)}{h}\\)\n\\(\\mathcal{O}(h)\\)\nBackward Difference\n\n\n\\(1^{st}\\)\n\\(f'(x) \\approx \\frac{f(x+h) - f(x-h)}{2h}\\)\n\\(\\mathcal{O}(h^2)\\)\nCentral Difference\n\n\n\\(2^{nd}\\)\n\\(f''(x) \\approx \\frac{f(x+h) - 2f(x) + f(x-h)}{h^2}\\)\n\\(\\mathcal{O}(h^2)\\)\nCentral Difference\n\n\n\n\n\nExercise 4.25 Let \\(f(x)\\) be a twice differentiable function. We are interested in the first and second derivative of the function \\(f\\) at the point \\(x = 1.74\\). Use what you have learned in this section to answer the following questions. (For clarity, you can think of “\\(f\\)” as a different function in each of the following questions …it does not really matter exactly what function \\(f\\) is.)\n\nJohnny used a numerical first derivative scheme with \\(h = 0.1\\) to approximate \\(f'(1.74)\\) and found an absolute error of 3.28. He then used \\(h=0.01\\) and found an absolute error of 0.328. What was the order of the error in his first derivative scheme? How can you tell?\nBetty used a numerical first derivative scheme with \\(h = 0.2\\) to approximate \\(f'(1.74)\\) and found an absolute error of 4.32. She then used \\(h=0.1\\) and found an absolute error of 1.08. What numerical first derivative scheme did she likely use?\nHarry wants to compute \\(f''(1.74)\\) to within 1% using a central difference scheme. He tries \\(h=0.25\\) and gets an absolute percentage error of 3.71%. What \\(h\\) should he try next so that his absolute percentage error is close to 1%?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Calculus</span>"
    ]
  },
  {
    "objectID": "nmCalculus.html#integration",
    "href": "nmCalculus.html#integration",
    "title": "4  Calculus",
    "section": "4.3 Integration",
    "text": "4.3 Integration\nNow we begin our work on the second principal computation of Calculus: evaluating a definite integral. Remember that a single-variable definite integral can be interpreted as the signed area between the curve and the \\(x\\) axis. In this section we will study three different techniques for approximating the value of a definite integral.\n\n\nExercise 4.26 Consider the shaded area of the region under the function plotted in Figure 4.4 between \\(x=0\\) and \\(x=2\\).\n\nWhat rectangle with area 6 gives an upper bound for the area under the curve? Can you give a better upper bound?\nWhy must the area under the curve be greater than 3?\nIs the area greater than 4? Why/Why not?\nWork with your group to give an estimate of the area and provide an estimate for the amount of error that you are making.\n\n\n\n\n\n\n\nFigure 4.4: A sample integration\n\n\n\n\n\n\n4.3.1 Riemann Sums\nIn this subsection we will build our first method for approximating definite integrals. Recall from Calculus that the definition of the Riemann integral is \\[\\begin{equation}\n\\begin{aligned} \\int_a^b f(x) dx = \\lim_{\\Delta x \\to 0} \\sum_{j=1}^N f(x_j) \\Delta x, \\label{eqn:Riemann_integral}\\end{aligned}\n\\end{equation}\\] where \\(N\\) is the number of sub intervals on the interval \\([a,b]\\) and \\(\\Delta x\\) is the width of the interval. As with differentiation, we can remove the limit and have a decent approximation of the integral so long as \\(N\\) is large (or equivalently, as long as \\(\\Delta x\\) is small). \\[\\begin{equation}\n\\int_a^b f(x) dx \\approx \\sum_{j=1}^N f(x_j) \\Delta x.\n\\end{equation}\\] You are likely familiar with this approximation of the integral from Calculus. The value of \\(x_j\\) can be chosen anywhere within the sub interval and three common choices are to use the left-aligned, the midpoint-aligned, and the right-aligned.\nWe see a depiction of this in Figure 4.5.\n\n\n\n\n\n\nFigure 4.5: Left-aligned Riemann sum, midpoint-aligned Riemann sum, and right-aligned Riemann sum\n\n\n\nClearly, the more rectangles we choose the closer the sum of the areas of the rectangles will get to the integral.\n\n\nExercise 4.27 Write code to approximate an integral with Riemann sums. You should ALWAYS start by writing pseudo-code as comments in your function. Your Python function should accept a Python Function, a lower bound, an upper bound, the number of subintervals, and an optional input that allows the user to designate whether they want ‘left’, ‘right’, or ‘midpoint’ rectangles. Test your code on several functions for which you know the integral. You should write your code without any loops.\n\n\n\nExercise 4.28 Consider the function \\(f(x) = \\sin(x)\\). We know the antiderivative for this function, \\(F(x) = -\\cos(x) + C\\), but in this question we are going to get a sense of the order of the error when doing Riemann Sum integration.\n\nFind the exact value of \\[\\begin{equation}\n\\int_0^{1} f(x) dx.\n\\end{equation}\\]\nNow build a Riemann Sum approximation (using your code) with various values of \\(\\Delta x\\). For all of your approximation use left-justified rectangles. Fill in the table with your results. If you want to save yourself tedious work, you will let Python create the table. You may need to recall Section 1.7 on Pandas.\n\n\n\n\n\\(\\Delta x\\)\nApprox. Integral\nAbsolute Error\n\n\n\n\n\\(2^{-1} = 0.5\\)\n\n\n\n\n\\(2^{-2} = 0.25\\)\n\n\n\n\n\\(2^{-3}\\)\n\n\n\n\n\\(2^{-4}\\)\n\n\n\n\n\\(2^{-5}\\)\n\n\n\n\n\\(2^{-6}\\)\n\n\n\n\n\\(2^{-7}\\)\n\n\n\n\n\\(2^{-8}\\)\n\n\n\n\n\n\nThere was nothing really special about powers of 2 in part (2) of this exercise. Examine other sequences of \\(\\Delta x\\) with a goal toward answering the question:\n\n\nIf we find an approximation of the integral with a fixed \\(\\Delta x\\) and find an absolute error, then what would happen to the absolute error if we divide \\(\\Delta x\\) by some positive constant \\(M\\)?\n\n\n\n\nExercise 4.29 Repeat the previous exercise using right-justified rectangles.\n\n\n\nExercise 4.30 Create a plot with the width of the subintervals on the horizontal axis and the absolute error between your Riemann sum calculations (left, right, and midpoint) and the exact integral for a known definite integral of your choice. Your plot should be on a log-log scale. Based on your plot, what is the approximate order of the error in the Riemann sum approximation?\n\n\n\n\n4.3.2 Trapezoidal Rule\nNow let us turn our attention to some slightly better algorithms for calculating the value of a definite integral: The Trapezoidal Rule and Simpson’s Rule. There are many others, but in practice these two are relatively easy to implement and have reasonably good error approximations. To motivate the idea of the Trapezoid rule consider Figure 4.6. It is plain to see that trapezoids will make better approximations than rectangles at least in this particular case. Another way to think about using trapezoids, however, is to see the top side of the trapezoid as a secant line connecting two points on the curve. As \\(\\Delta x\\) gets arbitrarily small, the secant lines become better and better approximations for tangent lines and are hence arbitrarily good approximations for the curve. For these reasons it seems like we should investigate how to systematically approximate definite integrals via trapezoids.\n\n\n\n\n\n\nFigure 4.6: Motivation for using trapezoids to approximate a definite integral.\n\n\n\n\n\nExercise 4.31 Consider a single trapezoid approximating the area under a curve. From geometry we recall that the area of a trapezoid is \\[\\begin{equation}\nA = \\frac{1}{2}\\left( b_1 + b_2 \\right) h,\n\\end{equation}\\] where \\(b_1, b_2\\) and \\(h\\) are marked in Figure 4.7. The function shown in the picture is \\(f(x) = \\frac{1}{5} x^2 (5-x)\\). Find the area of the shaded region as an approximation to \\[\\begin{equation}\n\\int_1^4 \\left( \\frac{1}{5} x^2 (5-x) \\right) dx.\n\\end{equation}\\]\nNow use the same idea with \\(h = \\Delta x = 1\\) from Figure 4.6 to approximate the area under the function \\(f(x) = \\frac{1}{5}x^2(5-x)\\) between \\(x=1\\) and \\(x=4\\) using three trapezoids.\n\n\n\n\n\n\nFigure 4.7: A single trapezoid to approximate area under a curve.\n\n\n\n\n\n\nExercise 4.32 Again consider the function \\(f(x) = \\frac{1}{5}x^2(5-x)\\) on the interval \\([1,4]\\). We want to evaluate the integral \\[\\begin{equation}\n\\int_1^4 f(x) dx\n\\end{equation}\\] using trapezoids to approximate the area.\n\nWork out the exact value of the definite integral by hand.\nSummarize your answers to the previous exercises in the following table then extend the data that you have for smaller and smaller values of \\(\\Delta x\\).\n\n\n\n\n\n\n\n\n\n\n\\(\\Delta x\\)\nApprox. Integral\nExact Integral\nAbs. Error\n\n\n\n\n\\(3\\)\n\n\n\n\n\n\\(1\\)\n\n\n\n\n\n\\(1/3\\)\n\n\n\n\n\n\\(1/9\\)\n\n\n\n\n\n\\(\\vdots\\)\n\\(\\vdots\\)\n\\(\\vdots\\)\n\\(\\vdots\\)\n\n\n\n\nFrom the table that you built in part (2), what do you conjecture is the order of the approximation error for the trapezoid method?\n\n\n\n\nDefinition 4.3 (The Trapezoidal Rule) We want to approximate \\(\\displaystyle \\int_a^b f(x) dx\\). One of the simplest ways is to approximate the area under the function with a trapezoid. Recall from basic geometry that area of a trapezoid is \\(A = \\frac{1}{2} (b_1 + b_2) h\\). In terms of the integration problem we can do the following:\n\nFirst partition \\([a,b]\\) into the set \\(\\{x_0=a, x_1, x_2, \\ldots, x_{n-1},x_n=b\\}\\).\nOn each part of the partition approximate the area with a trapezoid: \\[\\begin{equation}\nA_j = \\frac{1}{2} \\left[ f(x_j) + f(x_{j-1}) \\right]\\left(x_j - x_{j-1} \\right).\n\\end{equation}\\]\nApproximate the integral as \\[\\begin{equation}\n\\int_a^b f(x) dx = \\sum_{j=1}^n A_j.\n\\end{equation}\\]\n\n\n\n\nExercise 4.33 Write code to give the trapezoidal rule approximation for the definite integral \\(\\int_a^b f(x) dx\\). Test your code on functions where you know the definite area. Then test your code on functions where you have approximated the area by examining a plot (i.e. you have a visual estimate of the area).\n\n\n\nExercise 4.34 Use the code that you wrote in the previous exercise to test your conjecture about the order of the approximation error for the trapezoid rule. Integrate the function \\(f(x) = \\sin(x)\\) from \\(x=0\\) to \\(x=1\\) with more and more trapezoids. In each case compare to the exact answer and find the absolute error. The goal is to answer the question:\n\nIf we calculate the definite integral with a fixed \\(\\Delta x\\) and get an absolute error, \\(P\\), then what absolute error will we get if we use a width of \\(\\Delta x / M\\) for some positive number \\(M\\)?\n\n\n\n\n\n4.3.3 Simpsons Rule\nThe trapezoidal rule does a decent job approximating integrals, but ultimately you are using linear functions to approximate \\(f(x)\\) and the accuracy may suffer if the step size is too large or the function too non-linear. You likely notice that the trapezoidal rule will give an exact answer if you were to integrate a linear or constant function. A potentially better approach would be to get an integral that evaluates quadratic functions exactly. In order to do this we need to evaluate the function at three points (not two like the trapezoidal rule). Let us integrate a function \\(f(x)\\) on the interval \\([a,b]\\) by using the three points \\((a,f(a))\\), \\((m,f(m))\\), and \\((b,f(b))\\) where \\(m=\\frac{a+b}{2}\\) is the midpoint of the two boundary points.\nWe want to find constants \\(A_1\\), \\(A_2\\), and \\(A_3\\) such that the integral \\(\\int_a^b f(x) dx\\) can be written as a linear combination of \\(f(a)\\), \\(f(m)\\), and \\(f(b)\\). Specifically, we want to find constants \\(A_1\\), \\(A_2\\), and \\(A_3\\) in terms of \\(a\\), \\(b\\), \\(f(a)\\), \\(f(b)\\), and \\(f(m)\\) such that \\[\\begin{equation}\n\\int_a^b f(x) dx = A_1 f(a) + A_2 f(m) + A_3 f(b)\n\\end{equation}\\] is exact for all constant, linear, and quadratic functions. This would guarantee that we have an exact integration method for all polynomials of order 2 or less but should serve as a decent approximation if the function is not quadratic.\n\n\nExercise 4.35 Draw a picture showing what the previous two paragraphs discussed.\n\n\n\nExercise 4.36 Follow these steps to find \\(A_1\\), \\(A_2\\), and \\(A_3\\).\n\nVerify that \\[\\begin{equation}\n\\int_a^b 1 dx = b-a = A_1 + A_2 + A_3.\n\\end{equation}\\]\nVerify that \\[\\begin{equation}\n\\int_a^b x dx = \\frac{b^2 - a^2}{2} = A_1 a + A_2 \\left( \\frac{a+b}{2} \\right) + A_3 b.\n\\end{equation}\\]\nVerify that \\[\\begin{equation}\n\\int_a^b x^2 dx = \\frac{b^3 - a^3}{3} = A_1 a^2 + A_2 \\left( \\frac{a+b}{2} \\right)^2 + A_3 b^2.\n\\end{equation}\\]\nVerify that the above linear system of equations has the solution \\[\\begin{equation}\nA_1 = \\frac{b-a}{6}, \\quad A_2 = \\frac{4(b-a)}{6}, \\quad \\text{and} \\quad A_3 = \\frac{b-a}{6}.\n\\end{equation}\\]\n\n\n\n\nExercise 4.37 At this point we can see that an integral can be approximated as \\[\\begin{equation}\n\\int_a^b f(x) dx \\approx \\left( \\frac{b-a}{6} \\right) \\left( f(a) + 4f\\left( \\frac{a+b}{2} \\right) + f(b) \\right)\n\\end{equation}\\] and the technique will give an exact answer for any polynomial of order 2 or below.\nVerify the previous sentence by integrating \\(f(x) = 1\\), \\(f(x) = x\\) and \\(f(x) = x^2\\) by hand on the interval \\([0,1]\\) and using the approximation formula \\[\\begin{equation}\n\\int_a^b f(x) dx \\approx \\left( \\frac{b-a}{6} \\right) \\left( f(a) + 4f\\left( \\frac{a+b}{2} \\right) + f(b) \\right).\n\\end{equation}\\]\n\nUse the method described above to approximate the area under the curve \\(f(x) = (1/5) x^2 (5-x)\\) on the interval \\([1,4]\\). To be clear, you will be using the points \\(a=1, m=2.5\\), and \\(b=4\\) in the above derivation.\nNext find the exact area under the curve \\(f(x) = (1/5) x^2 (5-x)\\) on the interval \\([1,4]\\).\nWhat do you notice about the two areas? What does this sample exercise tell you about the formula that we derived above?\n\n\n\nTo make the punchline of the previous exercises a bit more clear, using the formula \\[\\begin{equation}\n\\int_a^b f(x) dx \\approx \\left( \\frac{b-a}{6} \\right) \\left( f(a) + 4 f(m) + f(b) \\right)\n\\end{equation}\\] is the same as fitting a parabola to the three points \\((a,f(a))\\), \\((m,f(m))\\), and \\((b,f(b))\\) and finding the area under the parabola exactly. That is exactly the step up from the trapezoid rule and Riemann sums that we were after:\n\nRiemann sums approximate the function with constant functions,\nthe trapezoid rule uses linear functions, and\nnow we have a method for approximating with parabolas.\n\nTo improve upon this idea we now examine the problem of partitioning the interval \\([a,b]\\) into small pieces and running this process on each piece. This is called Simpson’s Rule for integration.\n\n\nDefinition 4.4 (Simpson’s Rule) Now we put the process explained above into a form that can be coded to approximate integrals. We call this method Simpson’s Rule after Thomas Simpson (1710-1761) who, by the way, was a basket weaver in his day job so he could pay the bills and keep doing math.\n\nFirst partition \\([a,b]\\) into the set \\(\\{x_0=a, x_1, x_2, \\ldots, x_{n-1}, x_n=b\\}\\).\nOn each part of the partition approximate the area with a parabola: \\[\\begin{equation}\nA_j = \\frac{1}{6} \\left[ f(x_j) + 4 f\\left( \\frac{x_j+x_{j-1}}{2} \\right) + f(x_{j-1}) \\right]\\left( x_j - x_{j-1} \\right).\n\\end{equation}\\]\nApproximate the integral as \\[\\begin{equation}\n\\int_a^b f(x) dx = \\sum_{j=1}^n A_j.\n\\end{equation}\\]\n\n\n\n\nExercise 4.38 Write a Python function that implements Simpson’s Rule. You should ALWAYS start by writing pseudo-code as comments in your file. You should not need a loop in your function.\n\n\n\nExercise 4.39 Test your function on known integrals and approximate the order of the error based on the mesh size.\n\n\n\nExercise 4.40 We have spent a lot of time over the past many pages building approximations of the order of the error for numerical integration and differentiation schemes. It is now up to you. Build a numerical experiment that allows you to conjecture the order of the approximation error for Simpson’s rule. Remember that the goal is to answer the question:\n\nIf I approximate the integral with a fixed \\(\\Delta x\\) and find an absolute error of \\(P\\), then what will the absolute error be using a width of \\(\\Delta x / M\\)?\n\n\n\nThus far we have three numerical approximations for definite integrals: Riemann sums (with rectangles), the trapezoidal rule, and Simpsons’s rule. There are MANY other approximations for integrals and we leave the further research to the curious reader.\n\n\nTheorem 4.2 (Numerical Integration Schemes) Let \\(f(x)\\) be a continuous function on the interval \\([a,b]\\). The integral \\(\\int_a^b f(x) dx\\) can be approximated with any of the following. \\[\\begin{equation}\n\\begin{aligned} &\\text{Riemann Sum: } \\int_a^b f(x) dx \\approx \\sum_{j=1}^N f(x_j) \\Delta x \\\\ & \\qquad \\text{Error for Left and Right Riemann Sums: } \\mathcal{O}(\\Delta x) \\\\ & \\qquad \\text{Error for Midpoint Riemann Sums: } \\mathcal{O}(\\Delta x^2) \\\\ &\\text{Trapezoidal Rule: } \\int_a^b f(x) dx \\approx \\frac{1}{2} \\sum_{j=1}^N \\left( f(x_j) + f(x_{j-1}) \\right) \\Delta x \\\\ & \\qquad \\text{Error for Trapezoidal Rule: } \\mathcal{O}(\\Delta x^2) \\\\ &\\text{Simpson's Rule: } \\int_a^b f(x) dx \\approx \\frac{1}{6} \\sum_{j=1}^N \\left( f(x_j) + 4 f\\left( \\frac{x_j + x_{j-1}}{2} \\right) + f(x_{j-1}) \\right) \\Delta x \\\\ & \\qquad \\text{Error for Simpson's Rule: } \\mathcal{O}(\\Delta x^4) \\\\ \\end{aligned}\n\\end{equation}\\] where \\(\\Delta x = x_j - x_{j-1}\\) and \\(N\\) is the number of subintervals.\n\n\n\nExercise 4.41 Theorem 4.2 simply states the error rates for our three primary integration schemes. For this exercise you need to empirically verify these error rates. Use the integration problem and exact answer \\[\\begin{equation}\n\\int_0^{\\pi/4} e^{3x} \\sin(2x) dx = \\frac{3}{13} e^{3\\pi/4} + \\frac{2}{13}\n\\end{equation}\\] and write code that produces a log-log error plot with \\(\\Delta x\\) on the horizontal axis and the absolute error on the vertical axis. Fully explain how the error rates show themselves in your plot.\n\n\n\n\n4.3.4 Integration with numpy and scipy\nIn numpy there is a nice tool called np.trapz() that implements the trapezoidal rule. In the following exercise you will find several examples of the np.trapz() command. Use these examples to determine how the command works to integrate functions.\n\n\nExercise 4.42 First we will approximate the integral \\(\\int_{-2}^2 x^2 dx\\). The exact answer is \\[\\begin{equation}\n\\int_{-2}^2 x^2 dx = \\frac{x^3}{3} \\Big|_{-2}^2 = \\frac{16}{3} = 5.3333\\dots.\n\\end{equation}\\]\nimport numpy as np\nx = np.linspace(-2,2,100)\ndx = x[1]-x[0]\ny = x**2\nprint(\"Approximate integral is \",np.trapz(y)*dx)\nNext we will approximate \\(\\int_0^{2\\pi} \\sin(x) dx\\). We know that the exact value is 0.\nimport numpy as np\nx = np.linspace(0,2*np.pi,100)\ndx = x[1]-x[0]\ny = np.sin(x)\nprint(\"Approximate integral is \",np.trapz(y)*dx)\nPick a function and an interval for which you know the exact definite integral. Demonstrate how to use np.trapz() on your definite integral.\n\n\n\nExercise 4.43 Notice in the last examples that we multiplied the result of the np.trapz() command by dx. Why did we do this? What is the np.trapz() command doing without the dx?\n\n\nIn the scipy library there is a more general tool called scipy.integrate.quad(). The term “quad” is short for “quadrature.” In numerical analysis literature rules like Simpson’s rule are called quadrature rules for integration. The function scipy.integrate.quad() accepts a Python function (or a lambda function) and the bounds of the definite integral. It outputs an approximation of the integral along with an approximation of the error in the integral calculation. See the Python code below.\nimport numpy as np\nimport scipy.integrate\nf = lambda x: x**2\nI = scipy.integrate.quad(f,-2,2)\nprint(I)\n\n\nExercise 4.44 What are the advantages and disadvantages to using the scipy.integrate.quad() command as compared to the np.trapz() command.\n\n\n\nExercise 4.45 If you have data for the hourly rate at which water is being drained from a dam and you want to find the total amount of water drained over the course of the time in the dataset, then which of the tools that we know would you use? Why?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Calculus</span>"
    ]
  },
  {
    "objectID": "nmCalculus.html#algorithm-summaries",
    "href": "nmCalculus.html#algorithm-summaries",
    "title": "4  Calculus",
    "section": "4.4 Algorithm Summaries",
    "text": "4.4 Algorithm Summaries\n\nExercise 4.46 Starting from Taylor series prove that \\[\\begin{equation}\nf'(x) \\approx \\frac{f(x+h) - f(x)}{h}\n\\end{equation}\\] is a first-order approximation of the first derivative of \\(f(x)\\). Clearly describe what “first-order approximation” means in this context.\n\n\n\nExercise 4.47 Starting from Taylor series prove that \\[\\begin{equation}\nf'(x) \\approx \\frac{f(x+h) - f(x-h)}{2h}\n\\end{equation}\\] is a second-order approximation of the first derivative of \\(f(x)\\). Clearly describe what “second-order approximation” means in this context.\n\n\n\nExercise 4.48 Starting from Taylor series prove that \\[\\begin{equation}\nf''(x) \\approx \\frac{f(x+h) - 2f(x) + f(x-h)}{h^2}\n\\end{equation}\\] is a second-order approximation of the second derivative of \\(f(x)\\). Clearly describe what “second-order approximation” means in this context.\n\n\n\nExercise 4.49 Explain how to approximate the value of a definite integral with Riemann sums. When will the Riemann sum approximation be exact? The Riemann sum approximation is first order. Explain what “first order” means for calculating a definite integral.\n\n\n\nExercise 4.50 Explain how to approximate the value of a definite integral with the Trapezoid rule. When will the Trapezoid rule approximation be exact? The Trapezoidal rule approximation is second order. Explain what “second order” means for calculating a definite integral.\n\n\n\nExercise 4.51 Explain how to approximate the value of a definite integral with Simpson’s rule. Give the full mathematical details for where Simpson’s rule comes from. When will the Simpson’s rule approximation be exact? The Simpson’s rule approximation is fourth order. Explain what “fourth order” means for calculating a definite integral.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Calculus</span>"
    ]
  },
  {
    "objectID": "nmCalculus.html#problems",
    "href": "nmCalculus.html#problems",
    "title": "4  Calculus",
    "section": "4.5 Problems",
    "text": "4.5 Problems\n\nExercise 4.52 For each of the following numerical differentiation formulas\n\nprove that the formula is true and\nfind the order of the method.\n\nTo prove that each of the formulas is true you will need to write the Taylor series for all of the terms in the numerator on the right and then simplify to solve for the necessary derivative. The highest power of the remainder should reveal the order of the method.\n\n\\(f'(x) \\approx \\frac{\\frac{1}{12} f(x-2h) - \\frac{2}{3} f(x-h) + \\frac{2}{3} f(x+h) - \\frac{1}{12} f(x+2h)}{h}\\)\n\\(f'(x) \\approx \\frac{-\\frac{3}{2} f(x) + 2 f(x+h) - \\frac{1}{2} f(x+2h)}{h}\\)\n\\(f''(x) \\approx \\frac{-\\frac{1}{12} f(x-2h) + \\frac{4}{3} f(x-h) - \\frac{5}{2} f(x) + \\frac{4}{3} f(x+h) - \\frac{1}{12} f(x+2h)}{h^2}\\)\n\\(f'''(x) \\approx \\frac{-\\frac{1}{2} f(x-2h) + f(x-h) - f(x+h) + \\frac{1}{2} f(x+2h)}{h^3}\\)\n\n\n\n\nExercise 4.53 Write a function that accepts a list of \\((x,y)\\) ordered pairs from a spreadsheet and returns a list of \\((x,y)\\) ordered pairs for a first order approximation of the first derivative of the underlying function. Create a test spreadsheet file and a test script that have graphical output showing that your function is finding the correct derivative.\n\n\n\nExercise 4.54 Write a function that accepts a list of \\((x,y)\\) ordered pairs from a spreadsheet or a *.csv file and returns a list of \\((x,y)\\) ordered pairs for a second order approximation of the second derivative of the underlying function. Create a test spreadsheet file and a test script that have graphical output showing that your function is finding the correct derivative.\n\n\n\nExercise 4.55 Write a function that implements the trapezoidal rule on a list of \\((x,y)\\) order pairs representing the integrand function. The list of ordered pairs should be read from a spreadsheet file. Create a test spreadsheet file and a test script showing that your function is finding the correct integral.\n\n\n\nExercise 4.56 Use numerical integration to answer the question in each of the following scenarios\n\nWe measure the rate at which water is flowing out of a reservoir (in gallons per second) several times over the course of one hour. Estimate the total amount of water which left the reservoir during that hour.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntime (min)\n0\n7\n19\n25\n38\n47\n55\n\n\n\n\nflow rate (gal/sec)\n316\n309\n296\n298\n305\n314\n322\n\n\n\nYou can download the data directly from the github repository for this course with the code below.\nimport numpy as np\nimport pandas as pd\ndata = np.array(pd.read_csv('https://github.com/gustavdelius/NumericalAnalysis2024/raw/main/data/Calculus/waterflow.csv'))\n\nThe department of transportation finds that the rate at which cars cross a bridge can be approximated by the function \\[\\begin{equation}\nf(t) = \\frac{22.8 }{3.5 + 7(t-1.25)^4} ,\n\\end{equation}\\] where \\(t=0\\) at 4pm, and is measured in hours, and \\(f(t)\\) is measured in cars per minute. Estimate the total number of cars that cross the bridge between 4 and 6pm. Make sure that your estimate has an error less than 5% and provide sufficient mathematical evidence of your error estimate.\n\n\n\n\nExercise 4.57 Consider the integrals \\[\\begin{equation}\n\\int_{-2}^2 e^{-x^2/2} dx \\quad \\text{and} \\quad \\int_0^1 \\cos(x^2) dx.\n\\end{equation}\\] Neither of these integrals have closed-form solutions so a numerical method is necessary. Create a log-log plot that shows the errors for the integrals with different values of \\(h\\) (log of \\(h\\) on the \\(x\\)-axis and log of the absolute error on the \\(y\\)-axis). Write a complete interpretation of the log-log plot. To get the exact answer for these plots use Python’s scipy.integrate.quad command. (What we are really doing here is comparing our algorithms to Python’s scipy.integrate.quad() algorithm).\n\n\n\nExercise 4.58 Go to data.gov or the World Health Organization Data Repository and find data sets for the following tasks.\n\nFind a data set where the variables naturally lead to a meaningful derivative. Use appropriate code to evaluate and plot the derivative. If your data appears to be subject to significant noise then you may want to smooth the data first before doing the derivative. Write a few sentences explaining what the derivative means in the context of the data.\nFind a data set where the variables naturally lead to a meaningful definite integral. Use appropriate code to evaluate the definite integral. If your data appears to be subject to significant noise then you might want to smooth the data first before doing the integral. Write a few sentences explaining what the integral means in the context of the data.\n\nIn both of these tasks be very cautious of the units on the data sets and the units of your answer.\n\n\n\nExercise 4.59 Numerically integrate each of the functions over the interval \\([-1,2]\\) with an appropriate technique and verify mathematically that your numerical integral is correct to 10 decimal places. Then provide a plot of the function along with its numerical first derivative.\n\n\\(f(x) = \\frac{x}{1+x^4}\\)\n\\(g(x) = (x-1)^3 (x-2)^2\\)\n\\(h(x) = \\sin\\left(x^2\\right)\\)\n\n\n\n\nExercise 4.60 A bicyclist completes a race course in 90 seconds. The speed of the biker at each 10-second interval is determined using a radar gun and is given in the table in feet per second. How long is the race course?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTime (sec)\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n\n\n\n\nSpeed (ft/sec)\n34\n32\n29\n33\n37\n40\n41\n36\n38\n39\n\n\n\nYou can download the data with the following code.\nimport numpy as np\nimport pandas as pd\ndata = np.array(pd.read_csv('https://github.com/gustavdelius/NumericalAnalysis2024/raw/main/data/Calculus/bikespeed.csv'))",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Calculus</span>"
    ]
  },
  {
    "objectID": "nmCalculus.html#projects",
    "href": "nmCalculus.html#projects",
    "title": "4  Calculus",
    "section": "4.6 Projects",
    "text": "4.6 Projects\nIn this section we propose several ideas for projects related to numerical Calculus. These projects are meant to be open ended, to encourage creative mathematics, to push your coding skills, and to require you to write and communicate your mathematics.\n\n4.6.1 Galaxy Integration\nTo analyse the light from stars and galaxies, scientists use a spectral grating (fancy prism) to split it up into the different frequencies (colours). We can then measure the intensity (brightness) of the light (in units of Watts per square meter) at each frequency (measured in Hertz), to get intensity per frequency (Watts per square meter per Hertz, W/(m\\(^2\\) Hz)). Light from the dense opaque surface of a star produces a smooth rainbow, which produces a continuous curve when we plot intensity versus frequency. However, stars are also surrounded by thin gas which either emits or absorbs light at only a specific set of frequencies, called spectral lines. Every chemical element produces a specific set of lines (or peaks) at fixed frequencies, so by identifying the lines, we can tell what types of atoms and molecules a star is made of. If the gas is cool, then it will absorb light at these wavelengths, and if the gas is hot then it will emit light at these wavelengths. For galaxies, on the other hand, we expect mostly emission spectra: light emitted from the galaxy.\nFor this project we will be analysing the galaxy “ngc 1275.” The black hole at the centre of this galaxy is often referred to as the “Galactic Spaghetti Monster” since the magnetic field “sustains a mammoth network of spaghetti-like gas filaments around it.” You can download the data file associated with this project with the following Python code.\nimport numpy as np\nimport pandas as pd\nngc1275 = np.array(pd.read_csv('https://github.com/gustavdelius/NumericalAnalysis2024/raw/main/data/Calculus/ngc1275.csv'))\nIn the data you will see the spectral data measuring the light intensity from ncg 1275 at several different wavelengths (measured in Angstroms ). You will notice in this data set that there are several emission lines at various wavelengths. Of particular interest are the peaks near \\(3800\\) Angstroms, \\(5100\\) Angstroms, \\(6400\\) Angstroms, and the two peaks around \\(6700\\) Angstroms. The data set contains 1,727 data points at different wavelengths. Your first job will be to transform the wavelength data to frequency via the formula \\[\\begin{equation}\n\\lambda = \\frac{c}{f},\n\\end{equation}\\] where \\(\\lambda\\) is the wavelength, \\(c\\) is the speed of light, and \\(f\\) is the frequency (measured in Hertz). Be sure to double check the units. Given the inverse relationship between frequency and wavelength you should see the emission lines flip to the other side of the plot (right-to-left or left-to-right).\nThe strength of each emission line (in W/m\\(^2\\)) is defined as the relative intensity of each peak across the associated frequencies. Note that you are not interested in the intensity of the continuous spectrum – just the peaks. That is to say that you are only interested in the area above the background curve and the background noise.\nYour primary task is to develop a process for analysing data sets like this so as to determine the strength of each emission lines. You must demonstrate your process on this particular data set, but your process must be generalizable to any similar data set. Your process must clearly determine the strength of peaks in data sets like this and you must apply your procedure to determine the strength of each of these four lines with an associated margin of error. Keep in mind that you will first want to first develop a method for removing the background noise. Finally, the double peak near \\(6700\\) Angstroms needs to be handled with care: the strength of each emission line is only the integral over one peak, not two, so you will need to determine a way to separate these peaks.\nFinally, it would be cool, but is not necessary, to report on which chemicals correspond to the emission lines in the data. Remember that the galaxy is far away and hence there is a non-trivial red-shift to consider. This will take some research but if done properly will likely give a lot more merit to your paper.\n\n\n4.6.2 Higher Order Integration\nRiemann sums can be used to approximate integrals and they do so by using piecewise constant functions to approximate the function. The trapezoidal rule uses piece wise linear functions to approximate the function and then the area of a trapezoid to approximate the area. We saw earlier that Simpson’s rule uses piece wise parabolas to approximate the function. The process which we used to build Simpson’s rule can be extended to any higher-order polynomial. Your job in this project is to build integration algorithms that use piece wise cubic functions, quartic functions, etc. For each you need to show all of the mathematics necessary to derive the algorithm, provide several test cases to show that the algorithm works, and produce a numerical experiment that shows the order of accuracy of the algorithm.\n\n\n4.6.3 Dam Integration\nGo to the USGS water data repository:\nhttps://maps.waterdata.usgs.gov/mapper/index.html.\nHere you will find a map with information about water resources around the country.\n\nZoom in to a dam of your choice (make sure that it is a dam).\nClick on the map tag then click “Access Data”\nFrom the drop down menu at the top select either “Daily Data” or “Current / Historical Data.” If these options do not appear then choose a different dam.\nChange the dates so you have the past year’s worth of information.\nSelect “Tab-separated” under “Output format” and press Go. Be sure that the data you got has a flow rate (ft\\(^3\\)/sec).\nAt this point you should have access to the entire data set. Copy it into a csv file and save it to your computer.\n\nFor the data that you just downloaded you have three tasks: (1) plot the data in a reasonable way giving appropriate units, (2) find the total amount of water that has been discharged from the dam during the past calendar year, and (3) report any margin of error in your calculation based on the numerical method that you used in part (2).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Calculus</span>"
    ]
  },
  {
    "objectID": "nmPython.html#sec-pandas",
    "href": "nmPython.html#sec-pandas",
    "title": "1  Essential Python",
    "section": "1.7 Dataframes with Pandas",
    "text": "1.7 Dataframes with Pandas\nThe Pandas package provides Python with the ability to work with tables of data similar to what R provides via its dataframes. As we will not work with data in this module, we do not need to dive deep into the Pandas package. We will only use it to collect computational results into tables for easier display.\n\nExample 1.48 In this example we will build a simple dataframe with Pandas. We will build a table of the first 10 natural numbers and their squares and. We will then display the table.\n\nimport pandas as pd\nimport numpy as np\n\n# Calculate the columns for the table\nn = np.arange(1,11)\nn2 = n**2\nn3 = n**3\n\n# Combine the columns into a data frame with headers\ndf = pd.DataFrame({'n': n, 'n^2': n2, 'n^3': n3})\ndf\n\n\n\n\n\n\n\n\nn\nn^2\nn^3\n\n\n\n\n0\n1\n1\n1\n\n\n1\n2\n4\n8\n\n\n2\n3\n9\n27\n\n\n3\n4\n16\n64\n\n\n4\n5\n25\n125\n\n\n5\n6\n36\n216\n\n\n6\n7\n49\n343\n\n\n7\n8\n64\n512\n\n\n8\n9\n81\n729\n\n\n9\n10\n100\n1000",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Essential Python</span>"
    ]
  },
  {
    "objectID": "nmOptimization.html",
    "href": "nmOptimization.html",
    "title": "5  Optimization",
    "section": "",
    "text": "5.1 Single Variable Optimization\nThe preceding thought exercises have given you intuition about finding extrema in a two-dimensional landscape. But first we will reduce back to one-dimensional optimization problems before generalising to multiple dimensions in the next section.\nOne obvious method would be to simply evaluate the function at many points and choose the smallest value. This is called a brute force search.\nThis method is not very efficient. Just think about how often you would need to evaluate the function for the above approach to give the answer to 12 decimal places. It would be a lot! Your method should be more efficient.\nThe advantage of this brute force method is that it is guaranteed to find the global minimum in the interval. Any other, more efficient method can get stuck in local minima.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "nmOptimization.html#sec-1D-optimization",
    "href": "nmOptimization.html#sec-1D-optimization",
    "title": "5  Optimization",
    "section": "",
    "text": "Exercise 5.5 Try to turn your intuitions into algorithms. If \\(f(x)\\) is the function that you are trying to maximize then turn your ideas from the previous exercises into step-by-step algorithms which could be coded. Then try out your codes on the function \\[\\begin{equation}\nf(x) = -e^{-x^2} - \\sin(x^2)\n\\end{equation}\\] to see if your algorithms can find the local minimum near \\(x \\approx 1.14\\). Try to generate several different algorithms.\n\n\n\nimport numpy as np\nx = np.linspace(0,1.5,1000)\nf = -np.exp(-x**2) - np.sin(x**2)\nprint(x[np.argmin(f)])\n\n\n\n\n5.1.1 Golden Section Search\n\nExercise 5.6 Here is an idea for a method that is similar to the bisection method for root finding.\nIn the bisection method we needed a starting interval so that the function values had opposite signs at the endpoints. You were therefore guaranteed that there would be at least one root in that interval. Then you chose a point in the middle of the interval and by looking at the function value at that new point were able to choose an appropriate smaller interval that was still guaranteed to contain a root. By repeating this you honed in on the root.\nUnfortunately by just looking at the function values at two point there is no way of knowing whether there is a minimum between them. However, if you were to look at the function values at three points and found that the value at the middle point was less than the values at the endpoints then you would know that there was a minimum between the endpoints.\nThe idea now is to choose a new point between the two outer points, compare the function value there to those at the previous three points, and then choose a new triplet of points that is guaranteed to contain a minimum. By repeating this process you would hone in on the minimum.\nComplete the following function to implement this idea. You need to think about how to choose the new point and then how to choose the new triplet.\ndef bracketing(f, a, b, c, tol = 1e-12):\n    \"\"\"\n    Find an approximation of a local minimum of a function f within the \n    interval [a, b] using a bracketing method.\n\n    The function narrows down the interval [a, b] by maintaining a \n    triplet (a, c, b) where f(c) &lt; f(a) and f(c) &lt; f(b).\n    The process iteratively updates the triplet to home in on the minimum, \n    stopping when the interval is smaller than `tol`.\n\n    Parameters:\n    f (function): A unimodal function to minimize.\n    a, b (float): The initial interval bounds where the minimum is to be \n                  searched. It is assumed that a &lt; b.\n    c (float): An initial point within the interval (a, b) where \n               f(c) &lt; f(a) and f(c) &lt; f(b).\n    tol (float): The tolerance for the convergence of the algorithm. \n                 The function stops when b - a &lt; tol.\n\n    Returns:\n    float: An approximation of a point where f achieves a local minimum.\n    \"\"\"\n\n    # Check that the point are ordered a &lt; c &lt; b\n\n    # Check that the function value at `c` is lower than at both `a` and `b`\n\n    # Loop until you have an interval smaller than the tolerance\n    while b-a &gt; tol:\n\n        # Choose a new point `d` between `a` and `b`\n        # Think about what is the most efficient choice\n\n        # Compare f(d) with f(c) and use the result\n        # to choose a new triplet `a`, `b`, `c` in such a way that\n        # b-a has decreased but f(c) is still lower than both f(a) and f(b)\n\n        # While debugging, include a print statement to let you know what\n        # is happening within your loop\n    \n    return c\n    \n\n\n\n\n5.1.2 Gradient Descent\nLet us next explore the intuitive method of simply taking steps in the downhill direction. That should eventually bring us to a local minimum. The problem is only to know how to choose the step size and the direction. The gradient descent method is a simple and effective way to do this. By making the step be proportional to the negative gradient of the function we are guaranteed to be moving in the right direction and we are also automatically reducing the step size as we get closer to the minimum where the gradient gets smaller.\nLet \\(f(x)\\) be the objective function which you are seeking to minimize.\n\nFind the derivative of your objective function, \\(f'(x)\\).\nPick a starting point, \\(x_0\\).\nPick a small control parameter, \\(\\alpha\\) (in machine learning this parameter is called the “learning rate” for the gradient descent algorithm).\nUse the iteration \\(x_{n+1} = x_n - \\alpha f'(x_n)\\).\nIterate (decide on a good stopping rule)\n\n\n\nExercise 5.7 What is the Gradient Ascent/Descent algorithm doing geometrically? Draw a picture and be prepared to explain to your peers.\n\n\n\nExercise 5.8 Write code to implement the 1D gradient descent algorithm and use it to solve Exercise 5.1. Compare your answer to the analytic solution.\ndef gradient_descent(df, x0, learning_rate, \n                     tol = 1e-12, max_iter=10000):\n    \"\"\"\n    Find an approximation of a local minimum of a function f \n    using the gradient descent method.\n\n    The function iteratively updates the current guess `x0` \n    by moving in the direction of the negative gradient \n    of `f` at `x0` by a distance `alpha`. \n    The process stops when the magnitude of the gradient\n    is smaller than `tol`.\n\n    Parameters:\n    df (function): The derivative of the function you \n                   want to minimize.\n    x0 (float): The initial guess for the minimum.\n    learning_rate (float): The learning rate multiplies the \n                           gradient to give the step size.\n    tol (float): The tolerance for the convergence.\n                 The function stops when |df(x0)| &lt; tol.\n    max_iter (int): The maximal number of iterations to perform.\n\n    Returns:\n    float: An approximation of a point where f achieves\n           a local minimum.\n    \"\"\"\n    # Initialize x with the starting value\n    x = x0\n    # Loop for a maximum of `max_iter` iterations\n    for i in range(max_iter):\n        # Calculate the step size by multiplying the learning \n        # rate with the derivative at the current guess\n        \n        # Update `x` by adding the step\n        \n        # If the step size was smaller than `tol` then \n        # return the new `x`\n        \n    # If the loop finishes without returning then print a \n    # warning that the last step size was larger than `tol`.\n    \n    # Return the last `x` value\n\n\n\nExercise 5.9 Compare an contrast the methods you came up with in Exercise 5.5 with the methods proposed in Exercise 5.6 and Exercise 5.8.\n\nWhat are the advantages to each of the methods proposed?\nWhat are the disadvantages to each of the methods proposed?\nWhich method, do you suppose, will be faster in general? Why?\nWhich method, do you suppose, will be slower in general? Why?\n\n\n\n\nExercise 5.10 Make a plot of the log of the absolute error at iteration \\(k+1\\) agains the log of the absolute error at iteration \\(k\\), similar to Figure 3.5 for several methods and several choices of function. What do you observe?\n\n\nExercise 5.11 Try out your algorithms to find the maximum of the function \\[f(x) = (\\sin(4x)+1)((x-5)^2-25)\\] on the domain \\(0 \\le x \\le 8\\).\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nf = lambda x: (np.sin(4*x)+1)*((x-5)**2-25)\nx = np.linspace(0,8,100)\nplt.plot(x,f(x))\n\n\n\n\n\n\n\n\nFigure 5.3: Graph of the function \\(f(x) = (\\sin(4x)+1)((x-5)^2-25)\\).\n\n\n\n\n\nWhat do you observe?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "nmOptimization.html#multivariable-optimization",
    "href": "nmOptimization.html#multivariable-optimization",
    "title": "5  Optimization",
    "section": "5.2 Multivariable Optimization",
    "text": "5.2 Multivariable Optimization\nNow let us look at multi-variable optimization. The idea is the same as in the single-variable case. We want to find the minimum of a function \\(f(x_1, x_2, \\ldots, x_n)\\). Such higher-dimensional problems are very common and the dimension \\(n\\) can be very large in practical problems. A good example is the loss function of a neural network which is a function of the weights and biases of the network. In a large language model the loss function is a function of many billions of variables and the training of the model is a large optimization problem.\nHere is a two-variable example: Find the minimum of the function \\[f(x,y) = \\sin(x)\\exp\\left(\\sqrt{x^2+y^2}\\right)\\]\n\n\nCode\nimport numpy as np\nimport plotly.graph_objects as go\n\nf = lambda x, y: np.sin(x)*np.exp(-np.sqrt(x**2+y**2))\n\n# Generating values for x and y\nx = np.linspace(-2, 2, 100)\ny = np.linspace(-1, 3, 100)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\n# Creating the plot\nfig = go.Figure(data=[go.Surface(z=Z, x=X, y=Y)])\nfig.update_layout(width=800, height=800)\n\n\n\n\n                                                \n\n\nFigure 5.4: Graph of the function \\(\\sin(x)\\exp\\left(\\sqrt{x^2+y^2}\\right)\\).\n\n\n\n\nFinding the minima of multi-variable functions is a bit more complicated than finding the minima of single-variable functions. The reason is that there are many more directions in which to move. But the basic intuition that we want to move downhill to move towards a minimum of course still works. The gradient descent method is still a good choice for finding the minimum of a multi-variable function. The only difference is that the gradient is now a vector and the step is in the direction of the negative gradient.\n\n\nExercise 5.12 In your group, answer each of the following questions to remind yourselves of multivariable calculus.\n\nWhat is a partial derivative (explain geometrically). For the function \\(f(x,y) = \\sin(x)\\exp\\left(\\sqrt{x^2+y^2}\\right)\\) what is \\(\\frac{\\partial f}{\\partial x}\\) and what is \\(\\frac{\\partial f}{\\partial y}\\)?\nWhat is the gradient of a function? What does it tell us physically or geometrically? If \\(f(x,y) = \\sin(x)\\exp\\left(\\sqrt{x^2+y^2}\\right)\\) then what is \\(\\nabla f\\)?\n\n\n\nBelow we will give the full description of the gradient descent algorithm.\n\n5.2.1 Gradient Descent Algorithm\nWe want to solve the problem \\[\\begin{equation}\n\\text{minimize } f(x_1, x_2, \\ldots, x_n) \\text{ subject to }(x_1, x_2, \\ldots, x_n) \\in S.\n\\end{equation}\\]\n\nChoose an arbitrary starting point \\(\\boldsymbol{x}_0 = (x_1,x_2,\\ldots,x_n)\\in S\\).\nWe are going to define a difference equation that gives successive guesses for the optimal value: \\[\\begin{equation}\n\\boldsymbol{x}_{n+1} = \\boldsymbol{x}_n - \\alpha \\nabla f(\\boldsymbol{x}_n).\n\\end{equation}\\] The difference equation says to follow the negative gradient a certain distance from your present point (why are we doing this). Note that the value of \\(\\alpha\\) is up to you so experiment with a few values (you should probably take \\(\\alpha \\le 1\\) …why?).\nRepeat the iterative process in step 2 until two successive points are close enough to each other.\n\n\nExercise 5.13 Write code to implement the gradient descent algorithm for a function \\(f(x,y)\\). You can build on your code for the single-variable gradient descent from Exercise 5.8. The function should now take as input the two partial derivatives of the function and the starting point (x0, y0), as well as the tolerance and the maximum number of iterations.\nUse your function to find the minimum of the function \\[f(x,y) = \\sin(x)\\exp\\left(\\sqrt{x^2+y^2}\\right).\\]\n\n\nOf course there are many other methods for finding the minimum of a multi-variable function. An important method that does not need the gradient of the function is the Nelder-Mead method. This method is a direct search method that only needs the function values at the points it is evaluating. The method is very robust and is often used when the gradient of the function is not known or is difficult to calculate. There are also clever variants of the gradient descent method that are more efficient than the basic method. The Adam and RMSprop algorithms are two such methods that are used in machine learning. This subject is a large and active area of research and we will not go into more detail here.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "nmOptimization.html#optimization-with-numpy-and-scipy",
    "href": "nmOptimization.html#optimization-with-numpy-and-scipy",
    "title": "5  Optimization",
    "section": "5.3 Optimization with numpy and scipy",
    "text": "5.3 Optimization with numpy and scipy\nYou have already seen that there are many tools built into numpy and scipy that will do some of our basic numerical computations. The same is true for numerical optimization problems. Keep in mind throughout the remainder of this section that the whole topic of numerical optimization is still an active area of research and there is much more to the story than what we will see here. However, the Python tools that we will use are highly optimized and tend to work quite well.\n\n\nExercise 5.14 Let us solve a very simple function minimization problem to get started. Consider the function \\(f(x) = (x-3)^2 - 5\\). A moment’s thought reveals that the global minimum of this parabolic function occurs at \\((3,-5)\\). We can have scipy.optimize.minimize() find this value for us numerically. The routine is much like Newton’s Method in that we give it a starting point near where we think the optimum will be and it will iterate through some algorithm (like a derivative free optimization routine) to approximate the minimum.\nimport numpy as np\nfrom scipy.optimize import minimize\nf = lambda x: (x-3)**2 - 5\nminimize(f,2)\n\nImplement the code above then spend some time playing around with the minimize command to minimize more challenging functions.\nExplain what all of the output information is from the .minimize() command.\n\n\n\n\nExercise 5.15 There is not a function called scipy.optimize.maximize(). Instead, Python expects you to rewrite every maximization problem as a minimization problem. How do you do that?\n\n\n\nExercise 5.16 Solve Exercise 5.1 using scipy.optimize.minimize().",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "nmOptimization.html#least-squares-curve-fitting",
    "href": "nmOptimization.html#least-squares-curve-fitting",
    "title": "5  Optimization",
    "section": "5.4 Least Squares Curve Fitting",
    "text": "5.4 Least Squares Curve Fitting\nIn this section we will change our focus a bit to look at a different question from algebra, and, in turn, reveal a hidden numerical optimization problem where the scipy.optimize.minimize() tool will come in quite handy.\nHere is the primary question of interest:\nIf we have a few data points and a reasonable guess for the type of function fitting the points, how would we determine the actual function?\nYou may recognize this as the basic question of regression from statistics. What we will do here is pose the statistical question of which curve best fits a data set as an optimization problem. Then we will use the tools that we have built so far to solve the optimization problem.\n\n\nExercise 5.17 Consider the function \\(f(x)\\) that goes exactly through the points \\((0,1)\\), \\((1,4)\\), and \\((2,13)\\).\n\nFind a function that goes through these points exactly. Be able to defend your work.\nIs your function unique? That is to say, is there another function out there that also goes exactly through these points?\n\n\n\n\nExercise 5.18 Now let us make a minor tweak to the previous exercise. Let us say that we have the data points \\((0,1.07)\\), \\((1,3.9)\\), \\((2,14.8)\\), and \\((3,26.8)\\). Notice that these points are close to the points we had in the previous exercise, but all of the \\(y\\) values have a little noise in them and we have added a fourth point. If we suspect that a function \\(f(x)\\) that best fits this data is quadratic then \\(f(x) = ax^2 + bx + c\\) for some constants \\(a\\), \\(b\\), and \\(c\\).\n\nPlot the four points along with the function \\(f(x)\\) for arbitrarily chosen values of \\(a\\), \\(b\\), and \\(c\\).\nWork with your group to systematically change \\(a\\), \\(b\\), and \\(c\\) so that you get a good visual match to the data. The Python code below will help you get started.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nxdata = np.array([0, 1, 2, 3])\nydata = np.array([2.37, 4.14, 12.22, 23.68])\na = # conjecture a value of a\nb = # conjecture a value of b\nc = # conjecture a value of c\nx = # build an x domain starting at 0 and going through 4 \nguess = a*x**2 + b*x + c\n# make a plot of the data with `plt.scatter()`\n# add a plot of your function on top of the data with `plt.plot()`\n\n\n\n\n\n\n\n\nFigure 5.5: Initial attempt at matching data with a quadratic.\n\n\n\n\n\n\n\n\nExercise 5.19 Now let us be a bit more systematic about things from the previous exercise. Let us say that you have a pretty good guess that \\(b \\approx 2\\) and \\(c \\approx 0.7\\). We need to get a good estimate for \\(a\\).\n\nPick an arbitrary starting value for \\(a\\) then for each of the four points find the error between the predicted \\(y\\) value and the actual \\(y\\) value. These errors are called the residuals.\nSquare all four of your errors and add them up. (Pause, ponder, and discuss: why are we squaring the errors before we sum them?)\nNow change your value of \\(a\\) to several different values and record the sum of the square errors for each of your values of \\(a\\).\nMake a plot with the value of \\(a\\) on the horizontal axis and the value of the sum of the square errors on the vertical axis. Use your plot to defend the optimal choice for \\(a\\).\n\nClearly the above is calling for some Python code to automate this exploration. Write a loop that tries many values of \\(a\\) in very small increments and calculates the sum of the squared errors. The following partial Python code should help you get started. In the resulting plot you should see a clear local minimum. What does that minimum tell you about solving this problem?\nimport numpy as np\nimport matplotlib.pyplot as plt\nxdata = np.array([0, 1, 2, 3])\nydata = np.array([2.37, 4.14, 12.22, 23.68])\nb = 2\nc = 0.75\nA = # give a numpy array of values for a\nSumSqRes = [] # this is storage for the sum of the sq. residuals\nfor a in A:\n  guess = a*xdata**2 + b*xdata + c\n  residuals = # write code to calculate the residuals\n  SumSqRes.append( ??? ) # calculate the sum of the squ. residuals\nplt.plot(A,SumSqRes,'r*')\nplt.grid()\nplt.xlabel('Value of a')\nplt.ylabel('Sum of squared residuals')\nplt.show()\n\n\nNow let us formalize the process that we have described in the previous exercises.\n\nLeast Squares Regression\nLet \\[\\begin{equation}\nS = \\{ (x_0, y_0), \\, (x_1, y_1), \\, \\ldots, \\, (x_n, y_n) \\}\n\\end{equation}\\] be a set of \\(n+1\\) ordered pairs in \\(\\mathbb{R}^2\\). If we guess that a function \\(f(x)\\) is a best choice to fit the data and if \\(f(x)\\) depends on parameters \\(a_0, a_n, \\ldots, a_n\\) then\n\nPick initial values for the parameters \\(a_0, a_1, \\ldots, a_n\\) so that the function \\(f(x)\\) looks like it is close to the data (this is strictly a visual step …take care that it may take some playing around to guess the initial values of the parameters)\nCalculate the square error between the data point and the prediction from the function \\(f(x)\\) \\[\\begin{equation}\n\\text{error for the point $x_i$: } e_i = \\left( y_i - f(x_i) \\right)^2.\n\\end{equation}\\] Note that squaring the error has the advantages of removing the sign, accentuating errors larger than 1, and decreasing errors that are less than 1.\nAs a measure of the total error between the function and the data, sum the squared errors \\[\\begin{equation}\n\\text{sum of square errors } = \\sum_{i=1}^n \\left( y_i - f(x_i) \\right)^2.\n\\end{equation}\\] (Take note that if there were a continuum of points instead of a discrete set then we would integrate the square errors instead of taking a sum.)\nChange the parameters \\(a_0, a_1, \\ldots\\) so as to minimize the sum of the square errors.\n\n\n\nExercise 5.20 The last step above is a bit vague. That was purposeful since there are many techniques that could be used to minimize the sum of the square errors. However, if we just think about the sum of the squared residuals as a function then we can apply scipy.optimize.minimize() to that function in order to return the values of the parameters that best minimize the sum of the squared residuals. The following blocks of Python code implement the idea in a very streamlined way. Go through the code and comment each line to describe exactly what it does.\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import minimize \nxdata = np.array([0, 1, 2, 3])\nydata = np.array([2.37, 4.14, 12.22, 23.68])\n\ndef SSRes(parameters):\n  # In the next line of code we want to build our \n  # quadratic approximation y = ax^2 + bx + c\n  # We are sending in a list of parameters so \n  # a = parameters[0], b = parameters[1], and c = parameters[2]\n  yapprox = parameters[0]*xdata**2 + \\\n            parameters[1]*xdata + \\\n            parameters[2]\n  residuals = np.abs(ydata-yapprox)\n  return np.sum(residuals**2)\n\n\nBestParameters = minimize(SSRes,[1,1,1])\nprint(\"The best values of a, b, and c are: \\n\",BestParameters.x)\n# If you want to print the diagnositc then use the line below:\n# print(\"The minimization diagnostics are: \\n\",BestParameters)\nplt.plot(xdata,ydata,'bo')\nx = np.linspace(0,4,100)\ny = BestParameters.x[0]*x**2 + \\\n    BestParameters.x[1]*x + \\\n    BestParameters.x[2]\nplt.plot(x,y,'r--')\nplt.grid()\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Best Fit Quadratic')\nplt.show()\n\n\n\nExercise 5.21 Now I’ll let you in on a little secret: the data that you have fitted the quadratic function to above was not real data. I created it with the following script.\n\nimport numpy as np\n# Set a seed for the random number generator\nnp.random.seed(1)\n# Use a quadratic function to generate some fake data\na, b, c = 2, 2, 0.75\nf = lambda x: a*x**2 + b*x + c\n# Choose 4 equally-spaced x-values\nxdata = np.linspace(0,3,4)\n# Add normally distributed errors to the y values\nydata = f(xdata) + np.random.normal(0,1,4)\n# round to two digits\nydata = np.around(ydata, 2)\nprint(xdata)\nprint(ydata)\n\n[0. 1. 2. 3.]\n[ 2.37  4.14 12.22 23.68]\n\n\nSuch fake data that is generated from a know function with known distribution of the error is referred to as “synthetic data” and is very useful for testing parameter fitting methods.\nYou will notice that the parameters that we estimated with the Least Squares method are not at all the same as the parameters that I used to generate the data. This is because we had only 4 noise data points to estimate 3 parameters.\nAdjust the above script so that it generates 100 \\(x\\) values between 0 and 3 and corresponding noise \\(y\\) values. Then try to estimate the parameters of the quadratic function that generated the data. Does the estimate get closer to the original parameter values?\n\n\n\nExercise 5.22 In your group choose a function with a small number of parameters and choose parameter values and then evaluate 50 points on that function. Add a small bit of error into the \\(y\\)-values of your points. Give your 50 points to another group together with the definition of the function. Upon receiving your new points:\n\nPlot your points.\nMake a guess about the basic form of the function that might best fit the data.\nModify the code from above to find the best collection of parameters to minimize the sum of the squares of the residuals between the function and the data.\nPlot the data along with your best fit function.\nGo back to the group who gave you your points and check your work.\n\n\n\nUsing the method of least squares to fit a function to data is not always the right thing to do. It is appropriate if the measurement error in the data is normally distributed with the same variance for all data points and if the errors are independent of each other. If the errors are not normally distributed or if they are not independent of each other then the method of least squares is not appropriate. In such cases a more sophisticated method of fitting the data is needed. This is a large and active area of research and we will not go into more detail here.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "nmOptimization.html#algorithm-summaries",
    "href": "nmOptimization.html#algorithm-summaries",
    "title": "5  Optimization",
    "section": "5.5 Algorithm Summaries",
    "text": "5.5 Algorithm Summaries\n\nExercise 5.23 Explain in clear language how the Golden Section Search method works.\n\n\n\nExercise 5.24 Explain in clear language how the Gradient Descent method works.\n\n\n\nExercise 5.25 Explain in clear language how you use the method of Least Squares to fit a function to data.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "nmOptimization.html#problems",
    "href": "nmOptimization.html#problems",
    "title": "5  Optimization",
    "section": "5.6 Problems",
    "text": "5.6 Problems\n\nExercise 5.26 For each of the following functions write code to numerically approximate the local maximum or minimum that is closest to \\(x=0\\). You may want to start with a plot of the function just to get a feel for where the local extreme value(s) might be.\n\n\\(\\displaystyle f(x) = \\frac{x}{1+x^4} + \\sin(x)\\)\n\\(\\displaystyle g(x) = \\left(x-1\\right)^3\\cdot\\left(x-2\\right)^2+e^{-0.5\\cdot x}\\)\n\n\n\n\nExercise 5.27 (This exercise is modified from (Meerschaert 2013))\nA pig weighing 200 pounds gains 5 pounds per day and costs 45 cents a day to keep. The market price for pigs is 65 cents per pound, but is falling 1 cent per day. When should the pig be sold to maximize the profit?\nWrite the expression for the profit \\(P(t)\\) as a function of time \\(t\\) and maximize this analytically (by hand). Then solve the problem with all three methods outlined in Section 5.1.\n\n\n\nExercise 5.28 (This exercise is modified from (Meerschaert 2013))\nReconsider the pig Exercise 5.27 but now suppose that the weight of the pig after \\(t\\) days is \\[\\begin{equation}\nw = \\frac{800}{1+3e^{-t/30}} \\text{ pounds}.\n\\end{equation}\\] When should the pig be sold and how much profit do you make on the pig when you sell it? Write this situation as a single variable mathematical model. You should notice that the algebra and calculus for solving this problem is no longer really a desirable way to go. Use an appropriate numerical technique to solve this problem.\n\n\n\nExercise 5.29 Go back to your old Calculus textbook or homework and find your favourite optimization problem. State the problem, create the mathematical model, and use any of the numerical optimization techniques in this chapter to get an approximate solution to the problem.\n\n\n\nExercise 5.30 In the code below you can download several sets of noisy data from measurements of elementary single variable functions.\n\nMake a hypothesis about which type of function would best model the data. Be sure to choose the most general (parametrized) form of your function.\nUse appropriate tools to find the parameters for the function that best fits the data. Report you sum of square residuals for each function.\n\nThe functions that you propose must be continuous functions.\nimport numpy as np\nimport pandas as pd\nURL = 'https://github.com/gustavdelius/NumericalAnalysis2024/raw/main/data/Optimization/'\ndatasetA = np.array( pd.read_csv(URL+'Exercise3_datafit5.csv') )\ndatasetB = np.array( pd.read_csv(URL+'Exercise3_datafit6.csv') )\ndatasetC = np.array( pd.read_csv(URL+'Exercise3_datafit7.csv') )\ndatasetD = np.array( pd.read_csv(URL+'Exercise3_datafit8.csv') )\ndatasetE = np.array( pd.read_csv(URL+'Exercise3_datafit9.csv') )\ndatasetF = np.array( pd.read_csv(URL+'Exercise3_datafit10.csv') )\ndatasetG = np.array( pd.read_csv(URL+'Exercise3_datafit11.csv') )\ndatasetH = np.array( pd.read_csv(URL+'Exercise3_datafit12.csv') )\n# Exercise3_datafit5.csv - Exercise3_datafit12.csv\n\n\n\nExercise 5.31 (The Goat Problem) This is a classic problem in recreational mathematics that has a great approximate solution where we can leverage some of our numerical analysis skills. Grab a pencil and a piece of paper so we can draw a picture.\n\nDraw a coordinate plane\nDraw a circle with radius 1 unit centred at the point \\((0,1)\\). This circle will obviously be tangent to the \\(x\\) axis.\nDraw a circle with radius \\(r\\) centred at the point \\((0,0)\\). We will take \\(0 &lt; r &lt; 2\\) so there are two intersections of the two circles.\n\nLabel the left-hand intersection of the two circles as point \\(A\\). (Point \\(A\\) should be in the second quadrant of your coordinate plane.)\nLabel the right-hand intersection of the circles as point \\(B\\). (Point \\(B\\) should be in the first quadrant of your coordinate plane.)\n\nLabel the point \\((0,0)\\) as the point \\(P\\).\n\nA rancher has built a circular fence of radius 1 unit centred at the point \\((0,1)\\) for his goat to graze. He tethers his goat at point \\(P\\) on the far south end of the circular fence. He wants to make the length of the goat’s chain, \\(r\\), just long enough so that it can graze half of the area of the fenced region. How long should he make the chain?\nHints:\n\nIt would be helpful to write equations for both circles. Then you can use the equations to find the coordinates of the intersection points \\(A\\) and \\(B\\).\n\nYou can either solve for the intersection points algebraically or you can use a numerical root finding technique to find the intersection points.\nIn any case, the intersection points will (obviously) depend on the value of \\(r\\)\n\nSet up an integral to find the area grazed by the goat.\n\nYou will likely need to use a numerical integration technique to evaluate the integral.\n\nWrite code to narrow down on the best value of \\(r\\) where the integral evaluates to half the area of the fenced region.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "nmOptimization.html#projects",
    "href": "nmOptimization.html#projects",
    "title": "5  Optimization",
    "section": "5.7 Projects",
    "text": "5.7 Projects\nIn this section we propose several ideas for projects related to numerical optimisation. These projects are meant to be open ended, to encourage creative mathematics, to push your coding skills, and to require you to write and communicate your mathematics.\n\n5.7.1 Edge Detection in Images\nEdge detection is the process of finding the boundaries or edges of objects in an image. There are many approaches to performing edge detection, but one method that is quite robust is to use the gradient vector in the following way:\n\nFirst convert the image to gray scale.\nThen think of the gray scale image as a plot of a multivariable function \\(G(x,y)\\) where the ordered pair \\((x,y)\\) is the pixel location and the output \\(G(x,y)\\) is the value of the gray scale at that point.\nAt each pixel calculate the gradient of the function \\(G(x,y)\\) numerically.\nIf the magnitude of the gradient is larger than some threshold then the function \\(G(x,y)\\) is steep at that location and it is possible that there is an edge (a transition from one part of the image to a different part) at that point. Hence, if \\(\\|\\nabla G(x,y)\\| &gt; \\delta\\) for some threshold \\(\\delta\\) then we can mark the point \\((x,y)\\) as an edge point.\n\nYour Tasks:\n\nChoose several images on which to do edge detection. You should take your own images, but if you choose not to be sure that you cite the source(s) of your images.\nWrite Python code that performs edge detection as described above on the image. In the end you should produce side-by-side plots of the original picture and the image showing only the edges. To calculate the gradient use a centred difference scheme for the first derivatives \\[\\begin{equation}\nf'(x) \\approx \\frac{f(x+h)-f(x-h)}{2h}.\n\\end{equation}\\] In an image we can take \\(h=1\\) (why?), and since the gradient is two dimensional we get \\[\\begin{equation}\n\\nabla G(x,y) \\approx \\left&lt; \\frac{G(x+1,y)-G(x-1,y)}{2} \\, , \\, \\frac{G(x,y+1)-G(x,y-1)}{2} \\right&gt;.\n\\end{equation}\\] Figure 5.6 depicts what this looks like when we zoom in to a pixel and its immediate neighbours. The pixel labelled G[i,j] is the pixel at which we want to evaluate the gradient, and the surrounding pixels are labelled by their indices relative to [i,j].\n\n\n\n\n\n\n\nFigure 5.6: The gradient computation on a single pixel using a central difference scheme for the first derivative.\n\n\n\n\nThere are many ways to approximate numerical first derivatives. The simplest approach is what you did in part (2) – using a centred difference scheme. However, pixels are necessarily tightly packed in an image and the immediate neighbours of a point may not have enough contrast to truly detect edges. If you examine Figure 5.6 you will notice that we only use 4 of the 8 neighbours of the pixel [i,j]. Also notice that we did not reach out any further than a single pixel. Your job now is to build several other approaches to calculating the gradient vector, implement them to perform edge detection, and show the resulting images. For each method you need to give the full mathematical details for how you calculated the gradient as well as give a list of pros and cons for using the new numerical gradient for edge detection based on what you see in your images. As an example, you could use a centred difference scheme that looks two pixels away instead of at the immediate neighbouring pixels \\[\\begin{equation}\nf'(x) \\approx \\frac{??? f(x-2) + ??? f(x+2)}{???}.\n\\end{equation}\\] Of course you would need to determine the coefficients in this approximation scheme.\nAnother idea could use a centred difference scheme that uses pixels that are immediate neighbours AND pixels that are two units away \\[\\begin{equation}\nf'(x) \\approx \\frac{??? f(x-2) + ??? f(x-1) + ??? f(x+1) + ??? f(x+2)}{???}.\n\\end{equation}\\]\nIn any case, you will need to use Taylor Series to derive coefficients in the formulas for the derivatives as well as the order of the error. There are many ways to approximate the first derivatives so be creative. In your exploration you are not restricted to using just the first derivative. There could be some argument for using the second derivatives and/or the Hessian matrix of the gray scale image function \\(G(x,y)\\) and using some function of the concavity as a means of edge detection. Explore and have fun!\n\nThe following code will allow you to read an image into Python as an np.array().\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import image\nI = np.array(image.plt.imread('ImageName.jpg'))\nplt.imshow(I)\nplt.axis(\"off\")\nplt.show()\nYou should notice that the image, I, is a three dimensional array. The three layers are the red, green, and blue channels of the image. To flatten the image to gray scale you can apply the rule \\[\\begin{equation}\n\\text{grayscale value} = 0.3 \\text{Red} + 0.59 \\text{Green} + 0.11 \\text{Blue}.\n\\end{equation}\\] The output should be a 2 dimensional numpy array which you can show with the following Python code.\nplt.imshow(G, cmap='gray') # \"cmap\" stands for \"color map\"\nplt.axis(\"off\")\nplt.show()\nFigure 5.7 shows the result of different threshold values applied to the simplest numerical gradient computations. The image was taken by the author.\n\n\n\n\n\n\nFigure 5.7: Edge detection using different thresholds for the value of the gradient on the grayscale image\n\n\n\n\n\n\n\nMeerschaert, Mark. 2013. Mathematical Modeling. 4th edition. Amsterdam ; Boston: Academic Press.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "nmODE.html#eulers-method",
    "href": "nmODE.html#eulers-method",
    "title": "6  Ordinary Differential Equations",
    "section": "",
    "text": "Exercise 6.1 Consider the differential equation \\(x' = -0.5x\\) with the initial condition \\(x(0) = 6\\).\n\nSince we know that \\(x(0) = 6\\) and we know that \\(x'(0) = -0.5 x(0)\\) we can approximate the value of \\(x\\) at some future time step. Let us go 1 unit forward in time. That is, approximate \\(x(1)\\) knowing that \\(x(0) = 6\\) and \\(x'(0) = -3\\).\nHint: We know a value, a slope, and the size of the step that we would like to move in the \\(t\\) direction. \\[\\begin{equation}\nx(1) \\approx \\underline{\\hspace{1in}}\n\\end{equation}\\]\nUse your answer from part (a) for time \\(t=1\\) to approximate the \\(x\\) value at time \\(t=2\\). Then use that value to approximate the value at time \\(t=3\\). Repeat the process to approximate the value of \\(x\\) at times \\(t=2, 3, 4, 5, \\ldots, 10\\). Record your answers in the table below. Then find the analytic solution to this differential equation and record the \\(x\\) values at the appropriate times.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(t\\)\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\nApproximation of \\(x(t)\\)\n6\n\n\n\n\n\n\n\n\n\n\n\n\nExact value of \\(x(t)\\)\n6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe “approximations of \\(x\\)” that you found in part (b) are a numerical approximation of the solution to the differential equation. You should notice that your numerical solution is pretty far off from the actual solution for most values of \\(t\\). Why? What could be the sources of this error and how could we fix it? Once you have an idea of how to fix it, put your idea into action and devise some measurement of error to analyse your results.\nIn Figure 6.1 you will see a slope field and the exact solution to the differential equation \\(x' = -0.5x\\) with \\(x(0) = 6\\). Mark your approximate solutions at times \\(t=1\\), \\(t=2\\), \\(\\ldots\\), \\(t=10\\) on the plot and connect them with straight lines.\n\nWhy are we using straight lines to connect the points?\nWhat do you notice about your approximate solutions?\nWhy is it helpful to have the slope field in the background on this plot?\n\n\n\n\n\n\n\n\nFigure 6.1: Plot your approximate solution on top of the slope field and the exact solution.\n\n\n\n\n\n\nExercise 6.2 In Figure 6.2 you see the analytic solution at \\(x(0)=5\\) and a slope field for an unknown differential equation.\n\nUse the slope field and a step size of \\(\\Delta t=1\\) to plot approximate solution values at \\(t=1\\), \\(t=2\\), \\(\\ldots\\), \\(t=10\\). Connect your points with straight lines. The collection of line segments that you just drew is an approximation to the solution of the unknown differential equation.\nUse the slope field and a step size of \\(\\Delta t = 0.5\\) to plot approximate solution values at \\(t=0.5\\), \\(t=1\\), \\(t=1.5\\), \\(\\ldots\\), \\(t=10\\). Again, connect your points with straight lines to get an approximation of the solution to the unknown differential equation.\nIf you could take \\(\\Delta t\\) to be very very small, what difference would you see graphically between the exact solution and your collection of line segments? Why?\n\n\n\n\n\n\n\nFigure 6.2: Plot your approximate solution on top of the slope field and the exact solution.\n\n\n\n\n\n\n\nmake a discrete approximation to the derivative and\nstep forward through time as a difference equation.\n\n\n\n\nDefinition 6.1 (Euler’s Method) Euler’s Method is a technique for approximating the solution to the differential equation \\(x'(t) = f(t,x(t))\\). Recall from Exercise 4.9 that the first derivative of a function can be discretized as \\[\\begin{equation}\nx'(t) = \\frac{x(t+h) - x(t)}{h} + \\mathcal{O}(h)\n\\end{equation}\\] where \\(h = \\Delta t\\) is the step size (or the size of each partition in the domain), so the differential equation \\(x'(t) = f(t,x(t))\\) becomes \\[\\begin{equation}\n\\frac{x(t+h) - x(t)}{h} \\approx f(t,x(t)).\n\\end{equation}\\] Rewriting as a difference equation, letting \\(x_{n+1} = x(t_n+h)\\) and \\(x_n = x(t_n)\\), we get \\[\\begin{equation}\n\\begin{aligned} x_{n+1} = x_n + h f(t_n,x_n) \\label{eqn:Eulers_method} \\end{aligned}\n\\end{equation}\\]\n\n\n\n\n\n\n\n\n\nFigure 6.3: Numerical solutions to a differential equation using Euler’s method.\n\n\n\n\n\nExercise 6.3 Why would Euler’s method overshoot the exact solution in regions where the solution exhibits high curvature?\n\n\n\nExercise 6.4 Write code to implement Euler’s method for initial value problems. Your function should accept as input a Python function \\(f(t,x)\\), an initial condition, a start time, an end time, and the value of \\(h = \\Delta t\\). The output should be vectors for \\(t\\) and \\(x\\) that you can easily plot to show the numerical solution. The code below will get you started.\ndef euler1d(f,x0,t0,tmax,dt):\n    t = # set up the domain based on t0, tmax, and dt\n    # next set up an array for x that is the same size a t\n    x = np.zeros_like(t)\n    x[0] = # fill in the initial condition\n    for n in range( ??? ): # think about how far we should loop\n        x[n+1] = # advance the solution forward in time with Euler\n    return t, x\n\n\n\nExercise 6.5 Test your code from the previous exercise on a first order differential equation where you know the answer. Then test your code on the differential equation \\[\\begin{equation}\nx' = -\\frac{1}{3}x+\\sin(t) \\quad \\text{where} \\quad x(0) = 1.\n\\end{equation}\\] The partial code below should get you started.\nimport numpy as np\nimport matplotlib.pyplot as plt\n# put the f(t,x) function on the next line \n# (be sure to specify t even if it does not show up in your ODE)\nf = lambda t, x: # your function goes here\nx0 = # initial condition\nt0 = # initial time\ntmax = # final time (your choice)\ndt = # Delta t (your choice, but make it small)\nt, x = euler1d(f,x0,t0,tmax,dt)\nplt.plot(t,x,'b-')\nplt.grid()\nplt.show()\n\n\n\nExercise 6.6 The differential equation \\(x' = -\\frac{1}{3}x + \\sin(t)\\) with \\(x(0) = 1\\) has an analytic solution \\[\\begin{equation}\nx(t) = \\frac{1}{10} \\left( 19 e^{-t/3} + 3\\sin(t) - 9\\cos(t) \\right).\n\\end{equation}\\] The goal of this problem will be to compare the maximum error on the interval \\(t \\in [0,5]\\) for various values of \\(\\Delta t\\) in your Euler solver.\n\nWrite code that gives the maximum point-wise error between your numerical solution and the analytic solution given a value of \\(\\Delta t\\).\nUsing your code from part (1), build a plot with the value of \\(\\Delta t\\) on the horizontal axis and the value of the associated error on the vertical axis. You should use a log-log plot. Obviously you will need to run your code many times at many different values of \\(\\Delta t\\) to build your data set.\nIn general, if you were to cut your value of \\(\\Delta t\\) in half, what would that do to the value of the error? What about dividing \\(\\Delta t\\) by 10? 100? 1000?\n\n\n\n\nExercise 6.7 Shelby solved a first order ODE \\(x' = f(t,x)\\) using Euler’s method with a step size of \\(dt = 0.1\\) on a domain \\(t \\in [0,3]\\). To test her code she used a differential equation where she new the exact analytic solution and she found the maximum absolute error on the interval to be \\(0.15\\). Jackson then solves the exact same differential equation, on the same interval, with the same initial condition using Euler’s method and a step size of \\(dt = 0.01\\). What is Jackson’s expected maximum absolute error?\n\n\n\nTheorem 6.1 Euler’s method is a first order method for approximating the solution to the differential equation \\(x' = f(t,x)\\). Hence, if the step size \\(h\\) of the partition of the domain were to be divided by some positive constant \\(M\\) then the maximum absolute error between the numerical solution and the exact solution would ???\n(Complete the last sentence.)\n\n\n\nExercise 6.8 If a mass is hanging from a spring then Newton’s second law, \\(\\sum F=ma\\), gives us the differential equation \\(mx'' = F_{restoring} + F_{damping}\\) where \\(x\\) is the displacement of the mass from equilibrium, \\(m\\) is the mass of the object hanging from the spring, \\(F_{restoring}\\) is the force pulling the mass back to equilibrium, and \\(F_{damping}\\) is the force due to friction or air resistance that slows the mass down.\n\nWhich of the following is a good candidate for a restoring force in a spring? Defend your answer.\n\n\\(F_{restoring} = kx\\): The restoring force is proportional to the displacement away from equilibrium.\n\\(F_{restoring} = kx'\\): The restoring force is proportional to the velocity of the mass.\n\\(F_{restoring} = kx''\\): The restoring force is proportional to the acceleration of the mass.\n\nWhich of the following is a good candidate for a damping force in a spring? Defend your answer.\n\n\\(F_{damping} = bx\\): The damping force is proportional to the displacement away from equilibrium.\n\\(F_{damping} = bx'\\): The damping force is proportional to the velocity of the mass.\n\\(F_{damping} = bx''\\): The damping force is proportional to the acceleration of the mass.\n\nPut your answers to parts (1) and (2) together and simplify to form a second-order differential equation for position: \\[\\begin{equation}\n\\underline{\\hspace{0.25in}} x'' + \\underline{\\hspace{0.25in}} x' + \\underline{\\hspace{0.25in}} x = 0\n\\end{equation}\\]\nIf we want to solve a second order differential equation numerically we need to convert it to first order differential equations (Euler’s method is only designed to deal with first order differential equations, not second order). To do so we can introduce a new variable, \\(x_1\\), such that \\(x_1 = x'\\). For the sake of notational consistency we define \\(x_0 = x\\). The result is a system of first-order differential equations. \\[\\begin{equation}\n\\begin{aligned} x_0' &= x_1 \\\\ x_1' &= \\underline{\\hspace{2in}} \\end{aligned}\n\\end{equation}\\]\nThe code and Euler’s method algorithm that we have created thus far in this chapter are only designed to work with a single differential equation instead of a system, so we need to make some modifications. We can discretize the system of differential equations using Euler’s method so that \\[\\begin{equation}\n\\boldsymbol{x}' = F(t,\\boldsymbol{x})\n\\end{equation}\\] where \\(F\\) is a function that accepts a vector of inputs, plus time, and returns a vector of outputs. In the context of this particular problem, \\[\\begin{equation}\nF(t,\\boldsymbol{x}) = \\begin{pmatrix} x_0' \\\\ x_1' \\end{pmatrix} = \\begin{pmatrix} x_1 \\\\ \\underline{\\hspace{1in}} \\end{pmatrix}\n\\end{equation}\\]\nWe now need to discretize the derivatives in the system. As with 1D Euler’s method, we will use a first-order approximation of the first derivative so that \\[\\begin{equation}\n\\frac{\\boldsymbol{x}_{n+1} - \\boldsymbol{x}_n }{h} = F(t_n,\\boldsymbol{x}_n) + \\mathcal{O}(h).\n\\end{equation}\\] Rearranging and solving for \\(\\boldsymbol{x}_{n+1}\\) gives \\[\\begin{equation}\n\\boldsymbol{x}_{n+1} = \\underline{\\hspace{0.5in}} + h F( \\underline{\\hspace{0.25in}} , \\underline{\\hspace{0.25in}}).\n\\end{equation}\\]\nWe now have a choice about how we are going to code this new 2D version of Euler’s method. We could just include one more input function and one more input initial condition into the euler() function so that the Python function call is euler(f0,f1,x0,x1,t0,tmax,dt) where f0 and f1 are the two right-hand sides of the system, and x0 and x1 are the two initial conditions. Alternatively, we could rethink our euler() function so that it accepts an array of functions and an array of initial conditions so that the Python function call is euler(F,X,t0,tmax,dt) where F is a Python array of functions and X is a Python array of initial conditions. Discuss the pros and cons of each approach.\nThe following Python function and associated script will implement the vector version of Euler’s method. Complete the code and then use it to solve the system of equations from part (d). Use a mass of \\(m=2\\)kg, a damping force of \\(b=40\\)kg/s, and a spring constant of \\(k=128\\)N/m. Consider an initial position of \\(x=0\\)m (equilibrium) and an initial velocity of \\(x_1 = 0.6\\)m/s. Show two plots: a plot that shows both position and velocity versus time and a second plot, called a phase plot, that shows position versus velocity.\n\ndef euler(F,x0,t0,tmax,dt):\n    t = # same code as before to set up a vector for time\n    # Next we set up x so that it is an array where the columns \n    # are the different dimensions of the problem.  For example, \n    # in this problem there will be 2 columns and len(t) rows\n    x = np.zeros( (len(t), len(x0)) ) \n    x[0,:] = x0 # store the initial condition in the first row\n    for n in range(len(t)-1):\n        x[n+1,:] = x[ ??? , ??? ] + dt*F(t[ ??? ], x[ ??? , ??? ])\n    return t, x\nTo use the euler() function defined above we can use the following code. Fill in the code for this system of differential equations with this problem.\nF = lambda t, x: np.array([ x[1] , ??? ])\nx0 = [ ??? , ??? ] # initial conditions\nt0 = 0\ntmax = 5 # pick something reasonable here\ndt = 0.01 # your choice.  pick something small\nt, x = euler(F,x0,t0,tmax,dt)\n# Next we plot the solutions against time \nplt.plot(t,x[ ??? , ???],'b-',t,x[ ??? , ???],'r--')\nplt.grid()\nplt.title('Time Evolution of Position and Velocity')\nplt.legend(['which legend entry here','which legend entry here'])\nplt.xlabel('time')\nplt.ylabel('position and velocity')\nplt.show()\n# Then we plot one solution against the other for a phase plot\n# In a phase plot time is implicit (not one of the axes)\nplt.plot(x[ ??? , ???], x[ ??? , ???], 'k--')\nplt.grid()\nplt.title('Phase Plot')\nplt.xlabel('???')\nplt.ylabel('???')\nplt.show()\n\n\n\nExercise 6.9 (A Lotka-Volterra Model) Test your code from the previous exercise on the following system of differential equations by showing a time evolution plot (time on the x-axis and populations on the y-axis) as well as a phase plot (\\(x_0\\) on the x-axis and \\(x_1\\) on the y-axis with time understood implicitly):\nThe Lotka-Volterra Predator-Prey Model:\nLet \\(x_0(t)\\) denote the number of rabbits (prey) and \\(x_1(t)\\) denote the number of foxes (predator) at time \\(t\\). The relationship between the species can be modelled by the classic 1920’s Lotka-Volterra Model: \\[\\begin{equation}\n\\left\\{ \\begin{array}{ll} x_0' &= \\alpha x_0 - \\beta x_0 x_1 \\\\ x_1' &= \\delta x_0 x_1 - \\gamma x_1 \\end{array} \\right.\n\\end{equation}\\] where \\(\\alpha, \\beta, \\gamma,\\) and \\(\\delta\\) are positive constants. For this problems take \\(\\alpha \\approx 1.1\\), \\(\\beta \\approx 0.4\\), \\(\\gamma \\approx 0.1\\), and \\(\\delta \\approx 0.4\\).\n\nFirst rewrite the system of ODEs in the form \\(\\boldsymbol{x}' = F(t,\\boldsymbol{x})\\) so you can use your euler() code.\nModify your code from the previous problem so that it works for this problem. Use tmax = 200 and an appropriately small time step. Start with initial conditions \\(x_0(0)=20\\) rabbits and \\(x_1(0)=1\\) fox.\nCreate the time evolution plot. What does this plot tell you in context?\nCreate a phase plot. What does this plot tell you in context?\nIf you cut your time step in half, what do you see in the two plots? Why? What is Euler’s method doing here?\n\n\n\n\nExercise 6.10 (The SIR Model) A classic model for predicting the spread of a virus or a disease is the SIR Model. In these models, \\(S\\) stands for the proportion of the population which is susceptible to the virus, \\(I\\) is the proportion of the population that is currently infected with the virus, and \\(R\\) is the proportion of the population that has recovered from the virus. The idea behind the model is that\n\nSusceptible people become infected by having interaction with the infected people. Hence, the rate of change of the susceptible people is proportional to the number of interactions that can occur between the \\(S\\) and the \\(I\\) populations.\n\n\n\\[\\begin{equation}\nS' = -\\beta SI\n\\end{equation}\\]\n\nThe infected population gains people from the interactions with the susceptible people, but at the same time, infected people recover at a predictable rate. \\[\\begin{equation}\nI' = \\beta SI - \\gamma I\n\\end{equation}\\]\nThe people in the recovered class are then immune to the virus, so the recovered class \\(R\\) only gains people from the recoveries from the \\(I\\) class. \\[\\begin{equation}\nR' = \\gamma I\n\\end{equation}\\]\n\n\nExplain the minus sign in the \\(S'\\) equation in the context of the spread of a virus.\nExplain the product \\(SI\\) in the \\(S'\\) equation in the context of the spread of a virus.\nFind a numerical solution to the system of equations using your euler() function. Use the parameters \\(\\beta = 0.4\\) and \\(\\beta = 0.04\\) with initial conditions \\(S(0) = 0.99\\), \\(I(0) = 0.01\\), and \\(R(0) = 0\\). Explain all three curves in context.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Ordinary Differential Equations</span>"
    ]
  },
  {
    "objectID": "nmODE.html#the-midpoint-method",
    "href": "nmODE.html#the-midpoint-method",
    "title": "6  Ordinary Differential Equations",
    "section": "6.2 The Midpoint Method",
    "text": "6.2 The Midpoint Method\nNow we get to improve upon Euler’s method. There is a long history of wonderful improvements to the classic Euler’s method – some that work in special cases, some that resolve areas where the error is going to be high, and some that are great for general purpose numerical solutions to ODEs with relatively high accuracy. In this section we will make a simple modification to Euler’s method that has a surprisingly great payoff in the error rate.\n\n\nExercise 6.11 In Euler’s method, if we are at the point \\(t_n\\) then we approximate the slope \\(x'(t_n) = f(t_n,x_n)\\) and use the slope to propagate forward one time step. As you have seen, this method can lead to an overshooting of the exact solution in regions of high curvature. It would be nice to be able to look into the future and get a better approximation of the slope so that we did not miss upcoming curvature. If you could build such a method that looks in to the future, finds a slope in the future, and then uses that slope (instead of the slope from Euler’s method) to advance forward in time, how far into the future would you look? Why?\n\n\n\nExercise 6.12 Let us return to the simple differential equation \\(x' = -0.5x\\) with \\(x(0) = 6\\) that we saw in Exercise 6.1. Now we will propose a slightly different method for approximating the solution.\n\nAt \\(t=0\\) we know that \\(x(0)=6\\). If we use the slope at time \\(t=0\\) to step forward in time then we will get the Euler approximation of the solution. Consider this alternative approach:\n\n\nUse the slope at time \\(t=0\\) and move half a step forward.\nFind the slope at the half-way point\nThen use the slope from the half way point to go a full step forward from time \\(t=0\\).\n\nPerhaps a bit confusing …let us build this idea together:\n\nWhat is the slope at time \\(t=0\\)? \\(x'(0) = \\underline{\\hspace{0.5in}}\\)\nUse this slope to step a half step forward and find the \\(x\\) value: \\(x(0.5) \\approx \\underline{\\hspace{0.5in}}\\)\nNow use the differential equation to find the slope at time \\(t=0.5\\). \\(x'(0.5) = \\underline{\\hspace{0.5in}}\\)\nNow take your answer from the previous step, and go one full step forward from time \\(t=0\\). What \\(x\\) value do you end up with?\nYour answers to the previous bullets should be: \\(x'(0) = -3\\), \\(x(0.5) \\approx 4.5\\), \\(x'(0.5) = -2.25\\), so if we take a full step forward with slope \\(m=-2.25\\) starting from \\(t=0\\) we get \\(x(1) \\approx 3.75\\).\n\n\nRepeat the process outlined in part (a) to approximate the solution to the differential equation at times \\(t=2, 3, \\ldots, 10\\). Also record the exact answer at each of these times by noting that the exact solution is \\(x(t) = 6e^{-0.5t}\\).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(t\\)\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\nEuler approx of \\(x(t)\\)\n6\n\n\n\n\n\n\n\n\n\n\n\n\nNew approx of \\(x(t)\\)\n6\n\n\n\n\n\n\n\n\n\n\n\n\nExact value of \\(x(t)\\)\n6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDraw a clear picture of what this method is doing in order to approximate the slope at each individual step.\nHow does your approximation compare to the Euler approximation that you found in Exercise 6.1?\n\n\n\n\nDefinition 6.2 (The Midpoint Method) The midpoint method is defined by first taking a half step with Euler’s method to approximate a solution at time \\(t_{n+1/2}\\) There is not grid point at \\(t_{n+1/2}\\) so we define this as \\(t_{n+1/2} = (t_n + t_{n+1})/2\\). We then take a full step using the value of \\(f\\) at \\(t_{n+1/2}\\) and the approximate \\(x_{n+1/2}\\). \\[\\begin{equation}\n\\begin{aligned} x_{n+1/2} &= x_n + \\frac{h}{2} f(t_n,x_n) \\\\ x_{n+1} &= x_n + h f(t_{n+1/2},x_{n+1/2}) \\end{aligned}\n\\end{equation}\\] Note: Indexing by \\(1/2\\) in a computer is nonsense. Instead, we implement the midpoint method with: \\[\\begin{equation}\n\\begin{aligned} m_n &= f(t_n,x_n) \\\\ x_{temp} &= x_n + \\frac{h}{2} m_n \\\\ x_{n+1} &= x_n + h f\\left( t_n + \\frac{\\Delta t}{2}, x_{temp}\\right) \\end{aligned}\n\\end{equation}\\]\n\n\n\nExercise 6.13 Complete the code below to implement the midpoint method in one dimension.\ndef midpoint1d(f,x0,t0,tmax,dt):\n    t = # build the times\n    x = # build an array for the x values\n    x[0] = # build the initial condition\n    # On the next line: be careful about how far you're looping\n    for n in range( ??? ): \n        # The interesting part of the code goes here.\n    return t, x\nTest your code on several differential equations where you know the solution (just to be sure that it is working).\nf = lambda t, x: # your ODE right hand side goes here\nx0 = # initial condition\nt0 = 0\ntmax = # ending time (up to you)\ndt = # pick something small\nt, x = midpoint1d( ??? , ??? , ??? , ??? , ??? )\nplt.plot( ??? , ??? , ??? )\nplt.grid()\nplt.show()\n\n\n\nExercise 6.14 The goal in building the midpoint method was to hopefully capture some of the upcoming curvature in the solution before we overshot it. Consider the differential equation \\(x' = -\\frac{1}{3}x + \\sin(t)\\) with initial condition \\(x(0) = 1\\) on the domain \\(t \\in [0,4]\\). First get a numerical solution with Euler’s method using \\(\\Delta t = 0.1\\). Then get a numerical solution with the midpoint method using the same value for \\(\\Delta t\\). Plot the two solutions on top of each other along with the exact solution \\[\\begin{equation}\nx(t) = \\frac{1}{10} \\left( 19e^{-t/3} + 3\\sin(t) - 9\\cos(t) \\right).\n\\end{equation}\\] What do you observe? What do you observe if you make \\(\\Delta t\\) a bit larger (like 0.2 or 0.3)? What do you observe if you make \\(\\Delta t\\) very very small (like 0.001 or 0.0001)?\nThere are several key takeaways from this problem. Discuss.\n\n\n\nExercise 6.15 Repeat Exercise 6.6 with the midpoint method. Compare your results to what you found with Euler’s method.\n\n\n\nExercise 6.16 We have studied two methods thus far: Euler’s method and the Midpoint method. In Figure 6.4 we see a graphical depiction of how each method works on the differential equation \\(y' = y\\) with \\(\\Delta t = 1\\) and \\(y(0) = 1\\). The exact solution at \\(t=1\\) is \\(y(1) = e^1 \\approx 2.718\\) and is shown in red in each figure. The methods can be summarized in the table below.\nDiscuss what you observe as the pros and cons of each method based on the table and on the Figure.\n\n\n\n\n\n\n\nEuler’s Method\nMidpoint Method\n\n\n\n\n1. Get the slope at time \\(t_n\\)\n1. Get the slope at time \\(t_n\\)\n\n\n2. Follow the slope for time \\(\\Delta t\\)\n2. Follow the slope for time \\(\\Delta t/2\\)\n\n\n\n3. Get the slope at the point \\(t_n + \\Delta t/2\\)\n\n\n\n4. Follow the new slope from time \\(t_n\\) for time \\(\\Delta t\\)\n\n\n\n\n\n\n\n\n\nFigure 6.4: Graphical depictions of two numerical methods: Euler (left) and Midpoint (right). The exact solution is shown in red.\n\n\n\n\n\n\nExercise 6.17 When might you want to use Euler’s method instead of the midpoint method? When might you want to use the midpoint method instead of Euler’s method?\n\n\n\nExercise 6.18 (Midpoint Method in Several Dimensions) Modify your euler() code from Exercise 6.8 so that you can use the midpoint method in as many dimensions as you like. You should only have to add one line of code and then be careful about the size of the arrays that are in play. Test your code on several problems. Compare and contrast what you see with your Euler solutions and with your Midpoint solutions.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Ordinary Differential Equations</span>"
    ]
  },
  {
    "objectID": "nmODE.html#the-runge-kutta-4-method",
    "href": "nmODE.html#the-runge-kutta-4-method",
    "title": "6  Ordinary Differential Equations",
    "section": "6.3 The Runge-Kutta 4 Method",
    "text": "6.3 The Runge-Kutta 4 Method\nOK. Ready for some experimentation? We are going to build a few experiments that eventually lead us to a very powerful method for finding numerical solutions to first order differential equations.\n\nExercise 6.19 Let us talk about the Midpoint Method for a moment. The geometric idea of the midpoint method is outlined in the bullets below. Draw a picture along with the bullets.\n\nYou are sitting at the point \\((t_n,x_n)\\).\nThe slope of the solution curve to the ODE where you are standing is \\[\\begin{equation}\n\\text{slope at the point $(t_n,x_n)$ is: } m_n = f(t_n,x_n)\n\\end{equation}\\]\nYou take a half a step forward using the slope where you are standing. The new point, denoted \\(x_{n+1/2}\\), is given by \\[\\begin{equation}\n\\text{location a half step forward is: } x_{n+1/2} = x_n + \\frac{\\Delta t}{2} m_n.\n\\end{equation}\\]\nNow you are standing at \\((t_n + \\frac{\\Delta t}{2} , x_{n+1/2})\\) so there is a new slope here given by \\[\\begin{equation}\n\\text{slope after a half of an Euler step is: } m_{n+1/2} = f(t_n+\\Delta t/2,x_{n+1/2}).\n\\end{equation}\\]\nGo back to the point \\((t_n,x_n)\\) and step a full step forward using slope \\(m_{n+1/2}\\). Hence the new approximation is \\[\\begin{equation}\nx_{n+1} = x_n + \\Delta t \\cdot m_{n+1/2}\n\\end{equation}\\]\n\n\n\n\nExercise 6.20 One of the troubles with the midpoint method is that it does not actually use the information at the point \\((t_n,x_n)\\). Moreover, it does not leverage a slope at the next time step \\(t_{n+1}\\). Let us see what happens when we try a solution technique that combined the ideas of Euler and Midpoint as follows:\n\nThe slope at the point \\((t_n,x_n)\\) can be called \\(m_n\\) and we find it by evaluating \\(f(t_n,x_n)\\).\nThe slope at the point \\((t_{n+1/2}, x_{n+1/2})\\) can be called \\(m_{n+1/2}\\) and we find it by evaluating \\(f(t_{n+1/2}, x_{n+1/2})\\).\nWe can now take a full step using slope \\(m_{n+1/2}\\) to get the point \\(x_{n+1}\\) and the slope there is \\(m_{n+1} = f(t_{n+1}, x_{n+1})\\).\nNow we have three estimates of the slope that we can use to actually propagate forward from \\((t_n,x_n)\\):\n\nWe could just use \\(m_n\\). This is Euler’s method.\nWe could just use \\(m_{n+1/2}\\). This is the midpoint method.\nWe could use \\(m_{n+1}\\). Would this approach be any good?\nWe could use the average of the three slopes.\nWe could use a weighted average of the three slopes where some preference is given to some slopes over the others.\n\n\nIn the code below you will find a function called ode_test() that you can use as a starting point to test our the last three ideas. After the function you will see several lines of code that test your method against the differential equation \\(x'(t) = -\\frac{1}{3}x + \\sin(t)\\) with \\(x(0) = 1\\). The plots that come out are our typical error plots with the step size on the horizontal axis and our maximum absolute error between the numerical solution and the exact solution on the vertical axis. Recall that the exact solution to this differential equation is \\[\\begin{equation}\nx(t) = \\frac{1}{10} \\left( 19 e^{-t/3} + 3\\sin(t) - 9\\cos(t) \\right)\n\\end{equation}\\]\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# *********\n# You should copy your euler and midpoint functions here. \n# We will be comparing to these two existing methods.\n# *********\n\ndef ode_test(f,x0,t0,tmax,dt):\n    t = np.arange(t0,tmax+dt,dt) # set up the times\n    x = np.zeros(len(t)) # set up the x\n    x[0] = x0 # initial condition\n    for n in range(len(t)-1):\n        m_n = f(t[n],x[n])\n        x_n_plus_half = x[n] + (dt/2)*m_n\n        m_n_plus_half = f( t[n]+dt/2 , x_n_plus_half )\n        x_n_plus_1 = x[n] + dt * m_n_plus_half\n        m_n_plus_1 = f(t[n]+dt, x_n_plus_1 )\n        estimate_of_slope = # This is where you get to play\n        x[n+1] = x[n] + dt * estimate_of_slope\n    return t, x\n\n\nf = lambda t, x: -(1/3.0)*x + np.sin(t)\nexact = lambda t: (1/10.0)*(19*np.exp(-t/3) + \\\n                  3*np.sin(t) - \\\n                  9*np.cos(t))\n\nx0 = 1 # initial condition\nt0 = 0 # initial time\ntmax = 3 # max time\n# set up blank arrays to keep track of the maximum absolute errorrs\nerr_euler = [] \nerr_midpoint = []\nerr_ode_test = []\n# Next give a list of Delta t values (what list did we give here)\nH = 10.0**(-np.arange(1,7,1)) \nfor dt in H:\n    # Build an euler approximation\n    t, xeuler = euler(f,x0,t0,tmax,dt) \n    # Measure the max abs error\n    err_euler.append( np.max( np.abs( xeuler - exact(t) ) ) ) \n    # Build a midpoint approximation\n    t, xmidpoint = midpoint(f,x0,t0,tmax,dt) \n    # Measure the max abs error\n    err_midpoint.append( np.max( np.abs( xmidpoint - exact(t) ) ) ) \n    # Build your new approximation\n    t, xtest = ode_test(f,x0,t0,tmax,dt) \n    # Measure the max abs error\n    err_ode_test.append( np.max( np.abs( xtest - exact(t) ) ) ) \n\n# Finally, we make a loglog plot of the errors.  \n# Keep an eye on the slopes since they tell you the order of \n# the error for the method.\nplt.loglog(H,err_euler,'r*-',\n           H,err_midpoint,'b*-',\n           H,err_ode_test,'k*-')\nplt.grid()\nplt.legend(['euler','midpoint','test method'])\nplt.show()\n\n\n\nExercise 6.21 In the previous exercise you should have found that an average of the three slopes did just a little bit better than the midpoint method but the order of the error (the slope in the log-log plot) stayed about the same. You should have also found that the weighted average \\[\\begin{equation}\n\\text{estimate of slope} = \\frac{m_n + 2m_{n+1/2} + m_{n+1}}{4}\n\\end{equation}\\] did just a little bit better than just a plain average. Why might this be? (If you have not tried this weighted average then go back and try it.) Do other weighted averages of this sort work better or worse? Does it appear that we can improve upon the order of the error (the slope in the log-log plot) using any of these methods?\n\n\n\nExercise 6.22 OK. Let us make one more modification. What if we built a fourth slope that resulted from stepping a half step forward using \\(m_{n+1/2}\\)? we will call this \\(m_{n+1/2}^*\\) since it is a new estimate of \\(m_{n+1/2}\\). \\[\\begin{equation}\nx_{n+1/2}^* = x_n + \\frac{\\Delta t}{2} m_{n+1/2}\n\\end{equation}\\]\n\\[\\begin{equation}\nm_{n+1/2}^* = f(t_n + \\Delta t/2, x_{n+1/2}^*)\n\\end{equation}\\] Then calculate \\(m_{n+1}\\) using this new slope instead of what we did in the previous problem.\n\nDraw a picture showing where this slope was calculated.\nModify the code from above to include this fourth slope.\nExperiment with several ideas about how to best combine the four slopes: \\(m_n\\), \\(m_{n+1/2}\\), \\(m_{n+1/2}^*\\), and \\(m_{n+1}\\).\n\nShould we just take an average of the four slopes?\nShould we give one or more of the slopes preferential treatment and do some sort of weighted average?\nShould we do something else entirely?\n\n\nRemember that we are looking to improve the slope in the log-log plot since that indicates an improvement in the order of the error (the accuracy) of the method.\n\n\n\nExercise 6.23 In the previous exercise you no doubt experimented with many different linear combinations of \\(m_n\\), \\(m_{n+1/2}\\), \\(m_{n+1/2}^*\\), and \\(m_n\\). Many of the resulting numerical ODE methods likely had the same order of accuracy (again, the order of the method is the slope in the error plot), but some may have been much better or much worse. Work with your team to fill in the following summary table of all of the methods that you devised. If you generated linear combinations that are not listed below then just add them to the list (we have only listed the most common ones here).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(m_n\\)\n\\(m_{n+1/2}\\)\n\\(m_{n+1/2}^*\\)\n\\(m_n\\)\nOrder of Error\nName\n\n\n\n\n1\n1\n0\n0\n0\n\\(\\mathcal{O}(\\Delta t)\\)\nEuler’s Method\n\n\n2\n0\n1\n0\n0\n\\(\\mathcal{O}(\\Delta t^2)\\)\nMidpoint Method\n\n\n3\n1/2\n1/2\n0\n0\n\n\n\n\n4\n1/3\n1/3\n0\n1/3\n\n\n\n\n5\n1/4\n2/4\n0\n1/4\n\n\n\n\n6\n0\n0\n1\n0\n\n\n\n\n7\n0\n1/2\n1/2\n0\n\n\n\n\n8\n1/3\n1/3\n1/3\n0\n\n\n\n\n9\n1/4\n1/4\n1/4\n1/4\n\n\n\n\n10\n1/5\n2/5\n1/5\n1/5\n\n\n\n\n11\n1/5\n1/5\n2/5\n1/5\n\n\n\n\n12\n1/6\n2/6\n2/6\n1/6\n\n\n\n\n13\n1/6\n3/6\n1/6\n1/6\n\n\n\n\n14\n1/6\n1/6\n3/6\n1/6\n\n\n\n\n15\n1/7\n2/7\n3/7\n1/7\n\n\n\n\n16\n1/8\n3/8\n3/8\n1/8\n\n\n\n\n17\n\n\n\n\n\n\n\n\n18\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 6.24 In the previous exercise you should have found at least one of the many methods to be far superior to the others. State which linear combination of slopes seems to have done the trick, draw a picture of what this method does to numerically approximate the next slope for a numerical solution to an ODE, and clearly state what the order of the error means about this method.\n\n\n\nTheorem 6.2 (The Runge-Kutta 4 Method) The Runge-Kutta 4 (RK4) method for approximating the solution to the differential equation \\(x' = f(t,x)\\) approximates the slope at the point \\(t_n\\) by using the following weighted sum: \\[\\begin{equation}\n\\text{estimated slope } = \\frac{m_n + 2 m_{n+1/2} + 2 m_{n+1/2}^* + m_n}{6}.\n\\end{equation}\\] The order of the error in the RK4 method is \\(\\mathcal{O}(\\Delta t^4)\\).\n\n\n\nExercise 6.25 In Theorem 6.2 we state the Runge-Kutta 4 method in terms of the estimates of the slope built up previously in this section. The notation that is commonly used in most numerical analysis sources is slightly different. Typically, the RK4 method is presented as follows: \\[\\begin{equation}\n\\begin{aligned} k_1 &= f(t_n, x_n) \\\\ k_2 &= f(t_n + \\frac{h}{2}, x_n + \\frac{h}{2} k_1) \\\\ k_3 &= f(t_n + \\frac{h}{2}, x_n + \\frac{h}{2} k_2) \\\\ k_4 &= f(t_n + h, x_n + h k_3) \\\\ x_{n+1} &= x_n + \\frac{h}{6} \\left( k_1 + 2 k_2 + 2 k_3 + k_4 \\right) \\end{aligned}\n\\end{equation}\\]\n\nShow that indeed we have derived the same exact algorithm.\nWhat is the advantage to posing the RK4 method in this way?\nHow many evaluations of the function \\(f(t,x)\\) do we need to make at every time step of the RK4 method? Compare this Euler’s method and the midpoint method. Why is this important?\n\n\n\n\nExercise 6.26 Jackson wants to solve the differential equation \\(x' = f(t,x)\\) on the domain \\(t \\in [0,1]\\) so that the maximum absolute error is less than \\(10^{-8}\\).\n\nWhat value of \\(\\Delta t\\) would Jackson need if he were using Euler’s method? How many function evaluations would Jackson’s Euler algorithm end up doing in order to achieve his desired level of accuracy.\nWhat value of \\(\\Delta t\\) would Jackson need if he were using the midpoint method? How many function evaluations would Jackson’s midpoint algorithm end up doing in order to achieve his desired level of accuracy.\nWhat value of \\(\\Delta t\\) would Jackson need if he were using the RK4 method? How many function evaluations would Jackson’s RK4 algorithm end up doing in order to achieve his desired level of accuracy.\nDiscuss the implications of what you found in parts (a) - (c) of this problem.\n\n\n\n\nExercise 6.27 It would nice, but it would be completely impractical, to have a numerical method compute the approximate solution so that the maximum absolute error is less than machine precision \\(10^{-16}\\). That is an impracticality since we cannot actually detect errors that small on a computer using double precision arithmetic. However, what if we wanted accuracy of \\(10^{-15}\\) instead? Repeat the previous exercise with \\(10^{-15}\\) as the goal for the maximum absolute error.\n\n\n\nExercise 6.28 Let us step back for a second and just see what the RK4 method does from a nuts-and-bolts point of view. Consider the differential equation \\(x' = x\\) with initial condition \\(x(0) = 1\\). The solution to this differential equation is clearly \\(x(t) = e^t\\). For the same of simplicity, take \\(\\Delta t = 1\\) and perform 1 step of the RK4 method BY HAND to approximate the value \\(x(1)\\).\n\n\n\nExercise 6.29 Write a Python function that implements the Runge-Kutta 4 method in one dimension. Test the problem on several differential equations where you know the solution.\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef rk41d(f,x0,t0,tmax,dt):\n    t = np.arange(t0,tmax+dt,dt)\n    x = np.zeros_like(t)\n    x[0] = x0\n    for n in range(len(t)-1):\n        # the interesting bits of the code go here\n    return t, x\n\nf = lambda t, x: -(1/3.0)*x + np.sin(t)\nx0 = # initial condition\nt0 = 0\ntmax = # your choice\ndt = # pick something reasonable\nt, x = rk41d(f,x0,t0,tmax,dt)\nplt.plot(t,x,'b.-')\nplt.grid()\nplt.show()\n\n\n\nExercise 6.30 (RK4 in Several Dimensions) Modify your Runge-Kutta 4 code to work for any number of dimensions. You may want to start from your euler() and midpoint() functions that already do this. you will only need to make minor modifications from there. Then test your new generalized RK4 method on all of the same problems which you used to test your euler() and midpoint() functions.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Ordinary Differential Equations</span>"
    ]
  },
  {
    "objectID": "nmODE.html#animating-ode-solutions",
    "href": "nmODE.html#animating-ode-solutions",
    "title": "6  Ordinary Differential Equations",
    "section": "6.4 Animating ODE Solutions",
    "text": "6.4 Animating ODE Solutions\nDifferential equations that depend on time are often best visualized when they are animated. This can also be said about any parametrised function, but in this present case we will focus on visualizing differential equations. There are several animation tools with python and we will demonstrate only two primary technique here:\n\nipywidgets.interactive is a tool that will produce an image with sliders that can be used to manually control an animation. The big advantage to ipywidgets.iteractive is that you can animate over several parameters, and hence use this tool as a playground for learning how parameters interact with each other.\nmatplotlib.animation is a tool built directly into matplotlib that gives a playable animation (like a small movie). In this sort of animation we can only animate over one parameter or variable (like time), but this is most like what we would expect when animating a function that changes over time.\n\nThe reader should take careful note that the tools described here are meant to be used in Google Colab. These tools may not work as expected in other instances of Python and you may have to do some playing around (and Googling) to get it to work properly on your Python installation. Moreover, the animations are not built directly into the book since this book is delivered in several formats (HTML, PDF, and print). Instead you will find links to Google Colab documents that have the contain the code and animations.\n\n6.4.1 ipywidgets.interactive\nConsider the differential equation \\(x' = f(t,x)\\) with \\(x(0) = x_0\\). We would like to build an animation of the numerical solution to this differential equation over the parameters \\(t\\) but also over \\(x_0\\) and \\(\\Delta t\\). The following blocks of python code walk through this animation.\n\n\nExample 6.1 (ipywidgets.interactive) Let us say that we want to control the numerical solution to the differential equation \\(x' = -\\frac{1}{3}x + \\sin(t)\\) by manually altering the values of \\(x(0) = x_0\\), \\(t_{max}\\), and \\(\\Delta t\\). In this case we will solve the differential equation using Euler’s method but note that our code could be easily modified to use other solvers.\nFirst we import all of the appropriate libraries. Of particular interest is the ipywidgets.interactive library. This allows for images to be interactive with the use of sliders. Moving the sliders will provide a nice way to animate a plot manually.\nfrom ipywidgets import interactive\nimport matplotlib.pyplot as plt\nimport numpy as np\nIn the next block of code we define our euler() solver. This particular step is only included because we are using Euler’s method to solve this specific problem. In general, include any functions or code that are going to be used to produce the data that you will be plotting. We will also introduce the function f and the parameter t0 since we will not be animating over these parameters.\ndef euler(f,x0,t0,tmax,dt):\n  N = int(np.floor((tmax-t0)/dt)+1)\n  t = np.linspace(t0,tmax,N+1)\n  x = np.zeros_like(t)\n  x[0] = x0\n  for n in range(len(t)-1):\n    x[n+1] = x[n] + dt*f(t[n],x[n])\n  return t, x\n\nf = lambda t, x: -(1/3.0)*x + np.sin(t)\nt0 = 0\nNext we build a function that accepts only the parameters that we want to animate over and produces only a plot. This function will be called later by the ipywidgets.interactive function every time we change one of the parameters so be sure that this is a clean and fast function to evaluate (keep the code simple).\ndef eulerAnimator(x0,tmax,dt):\n    # call on the euler function to build the solution\n    t, x = euler(f,x0,t0,tmax,dt) \n    plt.plot(t, x, 'b-') # plot the solution\n    plt.xlim(0,30)\n    plt.ylim( np.min(x)-1, np.max(x)+1)\n    plt.grid()\n    plt.show() \nNow that we have everything set up we need to call on the ipywidgets.interactive command to turn the graphic into a visualization which can be controlled by sliders. In the code below we are allowing the initial condition to range between \\(x_0 = -2\\) and \\(x_0 = 5\\) in steps of \\(0.5\\), the time to range from \\(t_{max}=1\\) to \\(t_{max}=30\\) in steps of \\(0.1\\), and the time step to range from \\(\\Delta t = 0.01\\) to \\(\\Delta t = 0.75\\) in steps of \\(0.005\\).\ninteractive_plot = interactive(eulerAnimator, \n                               x0=(-2, 5, 0.5), \n                               tmax=(1, 30, 0.1), \n                               dt=(0.01, 0.75, 0.005))\ninteractive_plot\nA static snapshot of the animation applet is shown in Figure 6.5. When you build this animation you will have control over all three parameters. Like we mentioned before, this sort of animation can be a great playground for building insight into the interplay between parameters.\n\n\n\n\n\n\nFigure 6.5: Snapshot of the ODE animation applet with ipywidgets.\n\n\n\n\n\n\nExercise 6.31 Modify the previous exercise to use a different numerical solver (e.g. the midpoint method) instead of Euler’s method.\n\n\n\nExercise 6.32 Modify the animation routine above to simultaneously show the Euler, Midpoint, and RK4 solutions to a differential equation on top of each other. Animate over different values of \\(\\Delta t\\) for fixed values of \\(x_0\\) and \\(t_{max}\\).\n\n\n\n\n6.4.2 matplotlib.animation\nThe next animation package that we discuss is the matplotlib.animation package. This particular package is very similar to ipywidgets.interactive, but results only in a playable movie that is embedded within the Google Colab environment.\n\n\nExercise 6.33 Again we will consider the differential equation \\(x' = -\\frac{1}{3}x + \\sin(t)\\) but this time we will only be interested in an animation over time.\nWe start the code by importing all of the necessary libraries. Take note that we import the matplotlib.animation and matplotlib.rc libraries in order to build the animation. We then import the IPython.display.HTML library to take care of embedding the player into the Google Colab environment.\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import animation, rc\nfrom IPython.display import HTML\nNext we write all of the code necessary to build an Euler solution for the differential equation. Take note, of course, that much of this code is specific only to this problem and what we really need here is code that produces data for the animation.\ndef euler(f,x0,t0,tmax,dt): # this is the Euler function\n  N = int(np.floor((tmax-t0)/dt)+1)\n  t = np.linspace(t0,tmax,N+1)\n  x = np.zeros_like(t)\n  x[0] = x0\n  for n in range(len(t)-1):\n    x[n+1] = x[n] + dt*f(t[n],x[n])\n  return t, x\n\n# Now we define the parameters for the Euler function\ndt = 1e-2\nx0 = 3 # initial condition\nt0 = 0\ntmax = 10\nf = lambda t, x: -(1/3.0)*x + np.sin(t)\n\n# Next we get the full Euler solution associate with these \n# parameters.  Be careful that you put this outside your \n# animation loop so that you do not build this over and over.\nt, x = euler(f,x0,t0,tmax,dt) \nNext we have to set up the figure that we are going to animate. This involves:\n\nsetting up the axes,\nbuilding any features onto the axes that we want (e.g. a grid, axis labels, axis limits, etc)\nand then we build a variable that we call frame.\n\nThe variable frame contains a blank plot with no data.\nNotice that we define the line and marker styles here.\nAlso notice the comma in the definition of the frame variable. This is here since there are several Python objects inside ax.plot() and we only want to unpack the first one into frame.\n\n\nfig, ax = plt.subplots()\nplt.close()\n# Below we set up many of the global parameters for the plot.\n# Much of what we do here depends on what we are trying to animate.\nax.grid()\nax.set_xlabel('Time')\nax.set_ylabel('Approximate Solution')\nax.set_xlim(( t0, tmax)) \nax.set_ylim((np.min(x)-0.5, np.max(x)+0.5)) \nframe, = ax.plot([], [], linewidth=2, linestyle='--') \n# notice we also set line and marker parameters here\nNow we build a function that accepts only the animation frame number, N, and adds appropriate elements to the plot defined by frame.\ndef animator(N): # N is the animation frame number\n  T = t[:N] # get t data up to the frame number\n  X = x[:N] # get x data up to the frame number\n  # display the current simulation time in the title\n  ax.set_title('Time='+str(t[N])) \n  # put the data for the current frame into the varable \"frame\"\n  frame.set_data(T,X) \n  return (frame,)\nIn the next block of code we define which frames we want to use in the animation and then we call upon the matplotlib.animation function to build the animation.\n# The Euler solution takes many very small time steps.  \n# To speed up the animation we view every 10th iteration.\nPlotFrames = range(0,len(t),10) \nanim = animation.FuncAnimation(fig, # call on the figure\n# next call the function that builds the animation frame\n                               animator, \n# next tell which frames to pass to animator\n                               frames=PlotFrames, \n# lastly give the delay between frames                         \n                               interval=100 \n                               ) \nFinally, we embed the animation into the Google Colab environment. Take note that if you are using a different Python IDE then you may need to experiment with how to show the resulting animation.\nrc('animation', html='jshtml') # embed in the HTML for Google Colab\nanim # show the animation\nA static snapshot of the resulting animation can be seen in Figure 6.6. The controls for the animation should be familiar from other media players.\n\n\n\n\n\n\nFigure 6.6: Snapshot of the ODE animation applet with matplotlib animation.\n\n\n\n\n\n\nExercise 6.34 Modify the code from the previous exercise to show faster and slower animations.\n\n\n\nExercise 6.35 Modify the matplotlib.animation code from Exercise 6.33 to use a different differential equation solver.\n\n\n\nExercise 6.36 Modify the matplotlib.animation code from Exercise 6.33 to show the Euler, Midpoint, and RK4 solutions to a differential equation on top of each other for a fixed value of \\(\\Delta t\\).",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Ordinary Differential Equations</span>"
    ]
  },
  {
    "objectID": "nmODE.html#the-backwards-euler-method",
    "href": "nmODE.html#the-backwards-euler-method",
    "title": "6  Ordinary Differential Equations",
    "section": "6.5 The Backwards Euler Method",
    "text": "6.5 The Backwards Euler Method\nWe have now built up a fairly large variety of numerical ODE solvers. All of the solvers that we have built thus far are called explicit numerical differential equation solvers since they try to advance the solution explicitly forward in time. Wouldn’t it be nice if we could literally just say, what slope is going to work best in the future time steps … let us use that? Seems like an unrealistic hope, but that is exactly what the last method covered in this section does.\n\n\nDefinition 6.3 (Backward Euler Method) We want to solve \\(x' = f(t,x)\\) so:\n\nApproximate the derivative by looking forward in time(!) \\[\\begin{equation}\n\\frac{x_{n+1} - x_n}{h} \\approx f(t_{n+1}, x_{n+1})\n\\end{equation}\\]\nRearrange to get the difference equation \\[\\begin{equation}\nx_{n+1} = x_n + h f(t_{n+1},x_{n+1}).\n\\end{equation}\\]\nWe will always know the value of \\(t_{n+1}\\) and we will always know the value of \\(x_n\\), but we do not know the value of \\(x_{n+1}\\). In fact, that is exactly what we want. The major trouble is that \\(x_{n+1}\\) shows up on both sides of the equation. Can you think of a way to solve for it? …you have code that does this step!!!\nThis method is called the Backward Euler method and is known as an implicit method since you do not explicitly calculate \\(x_{n+1}\\) but instead there is some intermediate calculation that needs to happen to solve for \\(x_{n+1}\\). The (usual) advantage to an implicit method such as Backward Euler is that you can take far fewer steps with reasonably little loss of accuracy. we will see that in the coming problems.\n\n\n\n\nExercise 6.37 Let us take a few steps through the backward Euler method on a problem that we know well: \\(x' = -0.5x\\) with \\(x(0) = 6\\).\nLet us take \\(h=1\\) for simplicity, so the backward Euler iteration scheme for this particular differential equation is \\[\\begin{equation}\nx_{n+1} = x_n - \\frac{1}{2} x_{n+1}.\n\\end{equation}\\] Notice that \\(x_{n+1}\\) shows up on both sides of the equation. A little bit of rearranging gives \\[\\begin{equation}\n\\frac{3}{2} x_{n+1} = x_n \\quad \\implies \\quad x_{n+1} = \\frac{2}{3} x_n.\n\\end{equation}\\]\n\nComplete the following table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(t\\)\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\nEuler Approx. of \\(x\\)\n6\n3\n1.5\n0.75\n\n\n\n\n\n\n\n\n\nBack. Euler Approx.of \\(x\\)\n6\n4\n2.667\n1.778\n\n\n\n\n\n\n\n\n\nExact value of \\(x\\)\n6\n3.64\n2.207\n1.339\n\n\n\n\n\n\n\n\n\n\n\nCompare now to what we found for the midpoint method on this problem as well.\n\n\n\n\nExercise 6.38 The previous problem could potentially lead you to believe that the backward Euler method will always result in some other nice difference equation after some algebraic rearranging. That is not true! Let us consider a slightly more complicated differential equation and see what happens \\[\\begin{equation}\nx' = -\\frac{1}{2} x^2 \\quad \\text{with} \\quad x(0) = 0.\n\\end{equation}\\]\n\nRecall that the backward Euler approximation is \\[\\begin{equation}\nx_{n+1} = x_n + h f(t_{n+1},x_{n+1}).\n\\end{equation}\\] Let us take \\(h=1\\) for simplicity (we will make it smaller later). What is the backward Euler formula for this particular differential equation?\nYou should notice that your backward Euler formula is now a quadratic function in \\(x_{n+1}\\). That is to say, if you are given a value of \\(x_n\\) then you need to solve a quadratic polynomial equation to get \\(x_{n+1}\\). Let us be more explicit:\nWe know that \\(x(0) = 6\\) so in our numerical solutions, \\(x_1 = 6\\). In order to get \\(x_2\\) we consider the equation \\(x_2 = x_1 - \\frac{1}{2} x_2^2\\). Rearranging we see that we need to solve \\(\\frac{1}{2}x_2^2 + x_2 - 6 = 0\\) in order to get \\(x_2\\). Doing so gives us \\(x_2 = \\sqrt{13} - 1 \\approx 2.606\\).\nGo two steps further with the backward Euler method on this problem. Then take the same number of steps with regular (forward) Euler’s method.\nWork our the analytic solution for this differential equation (using separation of variables perhaps). Then compare the values that you found in parts (b) and (c) of this problem to values of the analytic solution and values that you would find form the regular (forward) Euler approximation. What do you notice?\n\n\n\nThe complications with the backward Euler’s method are that you have a nonlinear equation to solve at every time step \\[\\begin{equation}\nx_{n+1} = x_n + h f(t_{n+1},x_{n+1}).\n\\end{equation}\\] Notice that this is the same as solving the equation \\[\\begin{equation}\nx_{n+1} - hf(t_{n+1},x_{n+1}) - x_n = 0.\n\\end{equation}\\] You know the values of \\(h=\\Delta t\\), \\(t_{n+1}\\) and \\(x_n\\), and you know the function \\(f\\), so, in a practical sense, you should use some sort of Newton’s method iteration to solve that equation – at each time step. More simply, we could call upon scipy.optimize.fsolve() to quickly implement a built in Python numerical root finding technique for us.\n\n\nExercise 6.39 Consider the function backwardEuler1d() below. How do you define the function G inside the for loop and what seed do you use to start the fsolve() command?\nimport numpy as np\nfrom scipy import optimize\ndef backwardEuler1d(f,x0,t0,tmax,dt):\n    t = np.arange(t0,tmax+dt,dt)\n    x = np.zeros_like(t)\n    x[0] = x0\n    for n in range(len(t)-1):\n        G = lambda X: ??? # define this function\n        # give the correct seed for the solver below\n        x[n+1] = optimize.fsolve(G, ??? )[0] \n    return t, x\n\n\n\nExercise 6.40 Test the Backward Euler method from the previous problem on several differential equations where you know the solution.\n\n\n\nExercise 6.41 Write a script that outputs a log-log plot with the step size on the horizontal axis and the error in the numerical method on the vertical axis. Plot the errors for Euler, Midpoint, Runge Kutta, and Backward Euler measured against a differential equation with a known analytic solution. Use this plot to conjecture the convergence rates of the four methods. You can use the differential equation \\(x' = -\\frac{1}{3} x + \\sin(t)\\) with \\(x(0) = 1\\) like we have for many of our past algorithm since we know that the solution is \\[\\begin{equation}\nx(t) = \\frac{1}{10}\\left( 19e^{-t/3} + 3\\sin(t) - 9\\cos(t) \\right)\n\\end{equation}\\]\n\n\n\nExercise 6.42 What is the order of the error on the Backward Euler method? Given this answer, what are the pros and cons of the Backward Euler method over the regular Euler method? What about compared to the Midpoint or Runge Kutta methods?\n\n\n\nExercise 6.43 It may not be obvious at the outset, but the Backward Euler method will actually behave better than our regular Euler’s method in some sense. Let us take a look. Consider, for example, the really simply differential equation \\(x' = -x\\) with \\(x(0) = 1\\) on the interval \\(t \\in [0,2]\\). The analytic solution is \\(x(t) = e^{-t}\\). Write Python code that plots the analytic solution, the Euler approximation, and the Backward Euler approximation on top of each other. Use a time step that is larger than you normally would (such as \\(\\Delta t = 0.25\\) or \\(\\Delta t = 0.5\\) or larger). Try the same experiment on another differential equation where we know the exact solution and the solution has some regions of high curvature. What do you notice? What does Backward Euler do that is an improvement on regular Euler?",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Ordinary Differential Equations</span>"
    ]
  },
  {
    "objectID": "nmODE.html#fitting-ode-models-to-data",
    "href": "nmODE.html#fitting-ode-models-to-data",
    "title": "6  Ordinary Differential Equations",
    "section": "6.6 Fitting ODE Models to Data",
    "text": "6.6 Fitting ODE Models to Data\nTo end this chapter we will examine a very common scientific situation:  We have data from an experiment and a (challenging to solve) differential equation modelling the data that has some parameter that controls the behaviour. We want to find the value of the parameter that gives us the best fit between our numerical solution and the data. For example, say we have temperature data for a cooling liquid and we have a differential equation for temperature that depends on a parameter related to the thermal properties of the container. We would like to use the data and the differential equation to determine the parameter for the container. As another example, say we have the number of patients that become ill with a virus each day and we actually want to know the long-term impacts on the population. An SIR differential equation model might describe the dynamics of the situation well, and the data can be used to determine the transmission rate parameters in the model.\nWe examined data fitting in Chapter 4. The present situation is really not that much different than regular least squares curve fitting.\n\nPropose a model function: In this case our model function will be a numerical solution to a differential equation given some value for an unknown parameter.\nCalculate the sum of the squared residuals: In this case, we need to match the times between the numerical solution and the data. There will likely be far more points in the numerical solution than there will be in the data so we will have to carefully select the points that closely match between the two. Then calculating the sum of the squared error is simple.\nUse an optimization routine to find the value of the best parameter: In this case this is no different than regular least squares. We are trying to find the value of the parameter that minimizes the sum of the squared residuals.\n\n\n\nExercise 6.44 (Newton’s Law of Cooling) From Calculus you may recall Newton’s Law of Cooling: \\[\\begin{equation}\n\\frac{dT}{dt} = -k(T - T_{ambient})\n\\end{equation}\\] where \\(T\\) is the temperature of some object (like a cup of coffee), \\(T_{ambient}\\) is the temperature of the ambient environment, and \\(k\\) is the proportionality constant that governs the rate of cooling. This is a classic differential equation with a well known solution.1 In the present situation we do not want the analytic solution, but instead we will work with a numerical solution since we are thinking ahead to where the differential equation may be very hard to solve in future problems. We also do not want to just look at the data and guess an algebraic form for the function that best fits the data. That would be a trap! (why?) Instead, we rely on our knowledge of the physics of the situation to give us the differential equation.\nThe following data table gives the temperature (degrees \\(F\\)) at several times while a cup of tea cools on a table (Jesica Bauer, Eric Sullivan, and Erica Wiens 2022). The ambient temperature of the room is \\(65^\\circ F\\).\n\n\n\nTime (sec)\nTemperature\n\n\n\n\n0\n160\n\n\n60\n155\n\n\n180\n145\n\n\n210\n142\n\n\n600\n120\n\n\n\nPlot the data as a scatter plot.\nimport numpy as np\nimport matplotlib.pyplot as plt\ndata = np.array([[0,160],[60,155],[180,145],[210,142],[600,120]])\nplt.plot(data[??? , ???] , data[??? , ???], 'b*')\nplt.grid()\nplt.show()\nNow we will build several Python functions as well as several additional lines of code that are created specifically for this problem. Note that every parameter estimate problem of this type will take similar form, but there may be subtle differences depending on the data that you need to account for in each problem. You will need to Taylor make parts of each parameter estimation script for each new problem.\n\nFirst we set the stage by defining \\(\\Delta t\\), a collection of times that contains the data, the function \\(f(t,x; k)\\) which depends on the parameter \\(k\\), and any other necessary parameters of our specific problem.\n\nimport numpy as np\nTambient = ???\n# Next choose an appropriate value of dt.  \n# Choosing dt so that values of time in the data fall within\n# the times for the numerical solution is typically a good \n# practice (but is not always possible).\ndt = ??? \nt0 = 0 # time where the data starts\ntmax = ??? # just beyond where the data ends\nt = np.arange(t0,tmax+dt,dt) # set up the times \n# nest we define our specific differential equation\nf = lambda t, x, k: -k*(x - Tambient) \nx0 = ??? # initial condition pulled from the data\n\nNow we build a Python function that will accept a value of the parameter \\(k\\) as the only input and will return a high quality numerical solution to the proposed differential equation.\n\ndef numericalSolution(k):\n    x = np.zeros_like(t)\n    x[0] = x0\n    for n in range(len(t)-1):\n        # put the code necessary to build a good \n        # numerical solver here be sure to account \n        # for the parameter k in each of your function calls.\n    return t, x\n\nSpend a little time now playing with different parameters and plotting numerical solutions along with the data to determine the proper ballpark value of the parameter.\nNow we need to write a short Python script that will find all of the indices where the value of time in the data closely match values of time in the numerical solution. There are many ways to do this, but the most readable is a pair of nested for loops. Outline what the following code does. Why are we using dt/2 in the code below? You should work to find more efficient ways to code this for bigger problems since the nested for loops is potentially quite time consuming.\n\nindices = []\nfor j in range(len(t)):\n    for k in range(len(data)):\n        if # write a check to find where t is closest to data[:,1]\n            indices.append(j)\n\nNow we build a Python function dataMatcher(k) which accepts the parameter \\(k\\) and outputs the sum of the squared residuals between the numerical solution associated with \\(k\\) and our data. Carefully dissect the following code.\n\ndef dataMatcher(k):\n    t, x = numericalSolution(k)\n    err = []\n    counter = 0\n    for n in indices:\n        err.append( (data[counter,1] - x[int(n)])**2 )\n        counter += 1\n    print(\"For k=\",k[0],\",  SSRes=\",np.sum(err)) # optional\n    return np.sum(err)\n\nTest your dataMatcher() function to be sure that it is working properly on a value of \\(k\\) which visually matches the data well.\nFinally, we call upon the scipy.optimize.minimize() function to iteratively try different values of the parameter \\(k\\) and to find the one that minimizes the sum of the squared residuals. Be sure to start \\(k\\) at a value that gives a reasonably good visual match between the numerical solution and the data. Once the optimization routine is done you should plot your best solution on top of the data to verify that it indeed found a good solution. You will notice that there are several options that you can send to the scipy.optimize.minimize() command. Play with these options to see what they do and how they impact the quality of your solution.\n\nimport scipy.optimize as sp\n# Choose an initial value of k and put it into the following code \n# in place of the \"???\".  Note that we are sending a few parameters \n# to the optimization tool.  Be sure to understand these options \n# and take care that these options problem dependent and you will \n# need to choose these again for the next new problem.\nK = sp.minimize(dataMatcher,???, options = {'maxiter': 5}, tol=1e-2)\nprint(K)\nt, x = numericalSolution(K.x[0])\nplt.plot(t,x,'r--',data[:,0],data[:,1],'b*')\nplt.grid()\nplt.show()\n\nNote: If your optimization does not terminate successfully then you will need to go back to the point where you guess a few values for the parameter so that your initial guess for scipy.optimize.minimize() is close to what it should be. It is always helpful to think about the physical context of the problem to help guide your understanding of which value(s) to choose for your parameter.\n\nTo recap:\n\nWe have data and a proposed differential equation with an unknown parameter.\nWe matched numerical solutions to the differential equation to the data for various values of the parameter.\nWe used an optimization routine to find the value of the parameter that minimized the sum of the squared residuals between the data and the numerical solution.\n\nAt this point you can now use the best numerical solution to answer questions about the scientific setup (e.g. extrapolation).\n\n\n\nExercise 6.45 In the paper Steeping Tea: A differential equations approach to a great cup of fruit tea (Jesica Bauer, Eric Sullivan, and Erica Wiens 2022), the authors give colour data from photographs of tea that is steeping in a clear mason jar. The temperature data from the previous exercise in this section were taken from this paper.\n\nRead the introduction, methods, and experimental setup in the paper.\nThink carefully about the physics of the problem to propose a differential equation (NOT an algebraic function) which would best models the grayscale data found on page 3 of the paper. Your model will likely involve at least one unknown parameter.\nUse the least squares data fitting routine outlined in the previous exercise to find the value(s) of your parameter(s) which will create a high quality match between the numerical solution to your ODE and the data.\nPlot your solution curve along with the data.\n\n\n\n\nExercise 6.46 (Village Epidemic) (This exercise is modified from (Winkel 2023))\nIn the mid seventeenth century in a small village in England a form of the Plague spread from July 3 through October 20 in one year. We note three classes of individuals: Susceptible, Infective, and Removed. The latter group consists of those who have died from the disease or who developed an immunity from the disease, having already had the disease. We keep track of the following:\n\n\\(S(t)=\\) the number of Susceptibles on day \\(t\\) of the epidemic. \\(S(0) = 235\\).\n\\(I(t)=\\) the number of Infectives on day \\(t\\) of the epidemic. \\(I(0)=14\\)\n\\(R(t)=\\) the number of Removeds on day \\(t\\) of the epidemic. \\(R(0)=0\\).\n\nA standard \\(SIR\\) model takes the form \\[\\begin{equation}\n\\begin{aligned} S' &= -\\beta SI \\\\ I' &= \\beta SI - \\beta I \\\\ R' &= \\beta I. \\end{aligned}\n\\end{equation}\\]\nData was gathered on the outbreak and is shown in the table below.\n\n\n\nTime (days)\nSusceptibles\nInfectives\n\n\n\n\n0\n235\n14\n\n\n16\n201\n22\n\n\n31\n153.5\n29\n\n\n47\n121\n21\n\n\n62\n108\n8\n\n\n78\n97\n8\n\n\n109\n83\n0\n\n\n\nUse the least squares fitting technique discussed in this section to find the parameters \\(\\beta\\) and \\(\\beta\\) that minimize the sum of the squared residuals between a numerical solution of the \\(SIR\\) model and the data. You can load the data directly with the code below.\nNote: The total population is fixed.\nYou can load in the data as follows:\nimport numpy as np\nimport pandas as pd\nURL = 'https://github.com/gustavdelius/NumericalAnalysis2024/raw/main/data/Optimization/'\ndata = np.array( pd.read_csv(URL+'village.csv') )\n\n\n\nExercise 6.47 (Bedridden Boys Problem) (This problem is modified from (Miller 2022))\nA boarding school is a relatively closed community in which all students live on campus, teachers tend to live on or near campus, and students do not regularly interact with people not in the boarding school community. The table below gives data for an influenza outbreak at a boarding school in England during which there were no fatalities. There were 763 boys at the English boarding school from which the data was obtained.\n\n\n\nTime (days)\nNumber of Bedridden Boys\n\n\n\n\n0\n1\n\n\n1\n3\n\n\n2\n25\n\n\n3\n72\n\n\n4\n222\n\n\n5\n282\n\n\n6\n256\n\n\n7\n233\n\n\n8\n189\n\n\n9\n123\n\n\n10\n70\n\n\n11\n25\n\n\n12\n11\n\n\n13\n4\n\n\n\nPropose a differential equation model that includes the number of bedridden (sick) boys. Your model will likely have one or more unknown parameters. Use the technique from this section to find the parameters. Complete the problem by showing a plot of the number of bedridden boys along with the data. You can load the data directly with the code below.\nimport numpy as np\nimport pandas as pd\nURL = 'https://github.com/gustavdelius/NumericalAnalysis2024/raw/main/data/Optimization/'\ndata = np.array( pd.read_csv(URL+'boys.csv') )",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Ordinary Differential Equations</span>"
    ]
  },
  {
    "objectID": "nmODE.html#algorithm-summaries",
    "href": "nmODE.html#algorithm-summaries",
    "title": "6  Ordinary Differential Equations",
    "section": "6.7 Algorithm Summaries",
    "text": "6.7 Algorithm Summaries\n\nExercise 6.48 Consider the first-order differential equation \\(x' = f(t,x)\\). What is Euler’s method for approximating the solution to this differential equation? What is the order of accuracy of Euler’s method? Explain the meaning of the order of the method in the context of solving a differential equation.\n\n\n\nExercise 6.49 Explain in clear language what Euler’s method does geometrically.\n\n\n\nExercise 6.50 Consider the first-order differential equation \\(x' = f(t,x)\\). What is the Midpoint method for approximating the solution to this differential equation? What is the order of accuracy of the Midpoint method? Explain the meaning of the order of the method in the context of solving a differential equation.\n\n\n\nExercise 6.51 Explain in clear language what the Midpoint method does geometrically.\n\n\n\nExercise 6.52 Consider the first-order differential equation \\(x' = f(t,x)\\). What is the Runge Kutta 4 method for approximating the solution to this differential equation? What is the order of accuracy of the Runge Kutta 4 method? Explain the meaning of the order of the method in the context of solving a differential equation.\n\n\n\nExercise 6.53 Explain in clear language what the Runge Kutta 4 method does geometrically.\n\n\n\nExercise 6.54 Consider the first-order differential equation \\(x' = f(t,x)\\). What is the Backward Euler method for approximating the solution to this differential equation? What is the order of accuracy of the Backward Euler method? Explain the meaning of the order of the method in the context of solving a differential equation.\n\n\n\nExercise 6.55 Explain in clear language what the Backward Euler method does geometrically.\n\n\n\nExercise 6.56 Explain in clear language how to fit a numerical solution of and ODE model to a dataset.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Ordinary Differential Equations</span>"
    ]
  },
  {
    "objectID": "nmODE.html#problems",
    "href": "nmODE.html#problems",
    "title": "6  Ordinary Differential Equations",
    "section": "6.8 Problems",
    "text": "6.8 Problems\n\nExercise 6.57 Consider the differential equation \\(x'' + x' + x = 0\\) with initial conditions \\(x(0) = 0\\) and \\(x'(0)=1\\).\n\nSolve this differential equation by hand using any appropriate technique. Show your work.\nWrite code to demonstrate the first order convergence rate of Euler’s method, the second order convergence rate of the Midpoint method, and the fourth order convergence rate of the Runge-Kutta 4 method. Take note that this is a second order differential equation so you will need to start by converting it to a system of differential equations. Then take care that you are comparing the correct term from the numerical solution to your analytic solution in part (a).\n\n\n\n\nExercise 6.58 Test the Euler, Midpoint, and Runge Kutta methods on the differential equation \\[\\begin{equation}\nx' = \\lambda \\left( x - \\cos(t) \\right) - \\sin(t) \\quad \\text{with} \\quad x(0) = 1.5.\n\\end{equation}\\] Find the exact solution by hand using the method of undetermined coefficients and note that your exact solution will involve the parameter \\(\\lambda\\). Produce log-log plots for the error between your numerical solution and the exact solution for \\(\\lambda = -1\\), \\(\\lambda = -10\\), \\(\\lambda = -10^2\\), …, \\(\\lambda = -10^6\\). In other words, create 7 plots (one for each \\(\\lambda\\)) showing how each of the 3 methods performs for that value of \\(\\lambda\\) at different values for \\(\\Delta t\\).\n\n\n\nExercise 6.59 Two versions of Python code for one dimensional Euler’s method are given below. Compare and contrast the two implementations. What are the advantages / disadvantages to one over the other? Once you have made your pro/con list, devise an experiment to see which of the methods will actually perform faster when solving a differential equation with a very small \\(\\Delta t\\). (You may want to look up how to time the execution of code in Python.)\ndef euler(f,x0,t0,tmax,dt):\n    t = [t0]\n    x = [x0]\n    steps = int(np.floor((tmax-t0)/dt))\n    for n in range(steps):\n        t.append(t[n] + dt)\n        x.append(x[n] + dt*f(t[n],x[n]))\n    return t, x\ndef euler(f,x0,t0,tmax,dt):\n    t = np.arange(t0,tmax+dt,dt)\n    x = np.zeros_like(t)\n    x[0] = x0\n    for n in range(len(t)-1):\n        x[n+1] = x[n] + dt*f(t[n],x[n])\n    return t, x\n\n\n\nExercise 6.60 We wish to solve the boundary valued problem \\(x'' + 4x = \\sin(t)\\) with initial condition \\(x(0)=1\\) and boundary condition \\(x(1)=2\\) on the domain \\(t \\in (0,1)\\). Notice that you do not have the initial position and initial velocity as you normally would with a second order differential equation. Devise a method for finding a numerical solution to this problem.\n\n\n\nExercise 6.61 Write code to numerically solve the boundary valued differential equation \\[\\begin{equation}\nx'' = \\cos(t) x' + \\sin(t) x \\quad \\text{with} \\quad x(0) = 0 \\quad \\text{and} \\quad x(1) = 1.\n\\end{equation}\\]\n\n\n\nExercise 6.62 In this model there are two characters, Romeo and Juliet, whose affection is quantified on the scale from \\(-5\\) to \\(5\\) described below:\n\n\\(-5\\): Hysterical Hatred\n\\(-2.5\\): Disgust\n\\(0\\): Indifference\n\\(2.5\\): Sweet Affection\n\\(5\\): Ecstatic Love\n\nThe characters struggle with frustrated love due to the lack of reciprocity of their feelings. Mathematically,\n\nRomeo: “My feelings for Juliet decrease in proportion to her love for me.”\nJuliet: “My love for Romeo grows in proportion to his love for me.”\nJuliet’s emotional swings lead to many sleepless nights, which consequently dampens her emotions.\n\nThis give rise to \\[\\begin{equation}\n\\left\\{ \\begin{array}{ll} \\frac{dx}{dt} &= -\\alpha y \\\\ \\frac{dy}{dt} &= \\beta x - \\gamma y^2 \\end{array} \\right.\n\\end{equation}\\] where \\(x(t)\\) is Romeo’s love for Juliet and \\(y(t)\\) is Juliet’s love for Romeo at time \\(t\\).\nYour tasks:\n\nFirst implement this 2D system with \\(x(0) = 2\\), \\(y(0)=0\\), \\(\\alpha=0.2\\), \\(\\beta=0.8\\), and \\(\\gamma=0.1\\) for \\(t \\in [0,60]\\). What is the fate of this pair’s love under these assumptions?\nWrite code that approximates the parameter \\(\\gamma\\) that will result in Juliet having a feeling of indifference at \\(t=30\\). Your code should not need human supervision: you should be able to tell it that you are looking for indifference at \\(t=30\\) and turn it loose to find an approximation for \\(\\gamma\\). Assume throughout this problem that \\(\\alpha=0.2\\), \\(\\beta=0.8\\), \\(x(0)=2\\), and \\(y(0)=0\\). Write a description for how your code works in your homework document.\n\n\n\n\nExercise 6.63 In this problem we will look at the orbit of a celestial body around the sun. The body could be a satellite, comet, planet, or any other object whose mass is negligible compared to the mass of the sun. We assume that the motion takes place in a two dimensional plane so we can describe the path of the orbit with two coordinates, \\(x\\) and \\(y\\) with the point \\((0,0)\\) being used as the reference point for the sun. According to Newton’s law of universal gravitation the system of differential equations that describes the motion is \\[\\begin{equation}\nx''(t) = \\frac{-x}{\\left( \\sqrt{x^2 + y^2} \\right)^3} \\quad \\text{and} \\quad y''(t) = \\frac{-y}{\\left( \\sqrt{x^2 + y^2} \\right)^3}.\n\\end{equation}\\]\n\nDefine the two velocity functions \\(v_x(t) = x'(t)\\) and \\(v_y(t) = y'(t)\\). Using these functions we can now write the system of two second-order differential equations as a system of four first-order equations \\[\\begin{equation}\n\\begin{aligned} x' &= \\underline{\\hspace{2in}} \\\\ v_x ' &= \\underline{\\hspace{2in}} \\\\ y' &= \\underline{\\hspace{2in}} \\\\ v_y' &= \\underline{\\hspace{2in}} \\end{aligned}\n\\end{equation}\\]\nSolve the system of equations from part (a) using an appropriate solver. Start with \\(x(0) = 4\\), \\(y(0) = 0\\), the initial \\(x\\) velocity as \\(0\\), and the initial \\(y\\) velocity as \\(0.5\\). Create several plots showing how the dynamics of the system change for various values of the initial \\(y\\) velocity in the interval \\(t \\in (0,100)\\).\nGive an animated plot showing \\(x(t)\\) versus \\(y(t)\\).\n\n\n\n\nExercise 6.64 In this problem we consider the pursuit and evasion problem where \\(E(t)\\) is the vector for an evader (e.g. a rabbit or a bank robber) and \\(P(t)\\) is the vector for a pursuer (e.g. a fox chasing the rabbit or the police chasing the bank robber) \\[\\begin{equation}\n\\begin{aligned} E(t) = \\begin{pmatrix} x_e(t) \\\\ y_e(t) \\end{pmatrix} \\quad \\text{and} \\quad P(t) = \\begin{pmatrix} x_p(t) \\\\ y_p(t) \\end{pmatrix}. \\end{aligned}\n\\end{equation}\\] Let us presume the following:\n\nAssumption 1:\n\nthe evader has a predetermined path (known only to him/her),\n\nAssumption 2:\n\nthe pursuer heads directly toward the evader at all times, and\n\nAssumption 3:\n\nthe pursuer’s speed is directly proportional to the evader’s speed.\n\n\nFrom the third assumption we have \\[\\begin{equation}\n\\begin{aligned} \\| P'(t) \\| = k \\| E'(t) \\| \\label{eqn:pursuit_evasion_assumption3} \\end{aligned}\n\\end{equation}\\] and from the second assumption we have \\[\\begin{equation}\n\\begin{aligned} \\frac{P'(t)}{\\|P'(t)\\|} = \\frac{E(t) - P(t)}{\\| E(t) - P(t)\\|}. \\end{aligned}\n\\end{equation}\\] Solving for \\(P'(t)\\) the differential equation that we need to solve becomes \\[\\begin{equation}\n\\begin{aligned} P'(t) = k \\| E'(t) \\| \\frac{E(t) - P(t)}{\\| E(t) - P(t)\\|}. \\end{aligned}\n\\end{equation}\\] Your Tasks:\n\nExplain assumption #2 mathematically.\nExplain assumption #3 physically. Why is this assumption necessary mathematically?\nWrite code to find the path of the pursuer if the evader has the parametrised path \\[\\begin{equation}\nE(t) = \\begin{pmatrix} 0 \\\\ 5t \\end{pmatrix} \\quad \\text{for} \\quad t \\ge 0\n\\end{equation}\\] and the pursuer initially starts at the point \\(P(0) = \\begin{pmatrix} 2\\\\3\\end{pmatrix}\\). Write your code so that it stops when the pursuer is within 0.1 units of the evader. Run your code for several values of \\(k\\). The resulting plot should be animated.\nModify your code from part (c) to find the path of the pursuer if the evader has the parametrised path \\[\\begin{equation}\nE(t) = \\begin{pmatrix} 5 + \\cos(2\\pi t) + 2\\sin(4\\pi t) \\\\ 4 + 3\\cos(3 \\pi t) \\end{pmatrix} \\quad \\text{for} \\quad t \\ge 0\n\\end{equation}\\] and the pursuer initially starts at the point \\(P(0) = \\begin{pmatrix} 0 \\\\ 50 \\end{pmatrix}\\). Write your code so that it stops when the pursuer is within 0.1 units of the evader. Run your code for several values of \\(k\\). The resulting plot should be animated.\nCreate your own smooth path for the evader that is challenging for the pursuer to catch. Write your code so that it stops when the pursuer is within 0.1 units of the evader. Run your code for several values of \\(k\\).\n(Challenge) If you extend this problem to three spatial dimensions you can have the pursuer and the evader moving on a multivariable surface (i.e. hilly terrain). Implement a path along an appropriate surface but be sure that the velocities of both parties are appropriately related to the gradient of the surface.\n\nNote: It may be easiest to build this code from scratch instead of using one of our pre-written codes.\n\n\n\nExercise 6.65 (This problem is modified from (Meerschaert 2013))\nOne of the favourite foods of the blue whale is krill. Blue whales are baleen whales and feed almost exclusively on krill. These tiny shrimp-like creatures are devoured in massive amounts to provide the principal food source for the huge whales. In the absence of predators, in uncrowded conditions, the krill population density grows at a rate of 25% per year. The presence of 500 tons/acre of krill increases the blue whale population growth rate by 2% per year, and the presence of 150,000 blue whales decreases krill growth rate by 10% per year. The population of blue whales decreases at a rate of 5% per year in the absence of krill.\nThese assumptions yield a pair of differential equations (a Lotka-Volterra model) that describe the population of the blue whales (\\(B\\)) and the krill population density (\\(K\\)) over time given by \\[\\begin{equation}\n\\begin{aligned} \\frac{dB}{dt} &= -0.05B + \\left( \\frac{0.02}{500} \\right) BK \\\\ \\frac{dK}{dt} &= 0.25K - \\left( \\frac{0.10}{150000} \\right) BK. \\end{aligned}\n\\end{equation}\\]\n\nWhat are the units of \\(\\frac{dB}{dt}\\) and \\(\\frac{dK}{dt}\\)?\nExplain what each of the four terms on the right-hand sides of the differential equations mean in the context of the problem. Include a reason for why each term is positive or negative.\nFind a numerical solution to the differential equation model using \\(B(0) = 75,000\\) whales and \\(K(0) = 150\\) tons per acre.\nWhaling is a huge concern in the oceans world wide. Implement a harvesting term into the whale differential equation, defend your mathematical choices and provide a thorough exploration of any parameters that are introduced.\n\n\n\n\nExercise 6.66 (This problem is modified from (Spindler 2022))\nYou just received a new long-range helicopter drone for your birthday! After a little practice, you try a long-range test of it by having it carry a small package to your home. A friend volunteers to take it 5 miles east of your home with the goal of flying directly back to your home. So you program and guide the drone to always head directly toward home at a speed of 6 miles per hour. However, a wind is blowing from the south at a steady 4 miles per hour. The drone, though, always attempts to head directly home. We will assume the drone always flies at the same height. What is the drone’s flight path? Does it get the package to your home? What happens if the speeds are different? What if the initial distance is different? How much time does the drone’s battery have to last to get home? When you make plots of your solution they must be animated.\n\n\n\nExercise 6.67 A trebuchet catapult throws a cow vertically into the air. The differential equation describing its acceleration is \\[\\begin{equation}\n\\frac{d^2x}{dt^2} = -g - c \\frac{dx}{dt} \\left| \\frac{dx}{dt} \\right|\n\\end{equation}\\] where \\(g \\approx 9.8\\) m/s\\(^2\\) and \\(c \\approx 0.02\\) m\\(^{-1}\\) for a typical cow. If the cow is launched at an initial upward velocity of 30 m/s, how high will it go, and when will it crash back into the ground? Hint: Change this second order differential equation into a system of first order differential equations.\n\n\n\nExercise 6.68 (Scipy ODEINT) It should come as no surprise that the scipy library has some built-in tools to solve differential equations numerically. One such tool is scipy.integrate.odeint(). The code below shows how to use the .odeint() tool to solve the differential equation \\(x' = -\\frac{1}{3}x + \\sin(t)\\) with \\(x(0) =1\\). Take note that the .odeint() function expects a Python function (or lambda function), an initial condition, and an array of times.\nMake careful note of the following:\n\nThe function scipy.integrate.odeint() expects the function \\(f\\) to have the arguments in the order \\(x\\) (or \\(y\\)) then \\(t\\). In other words, they expect you to define \\(f\\) as \\(f = f(x,t)\\). This is opposite from our convention in this chapter where we have defined \\(f\\) as \\(f = f(t,x)\\).\nThe output of scipy.integrate.odeint() is an array. This is designed so that .odeint() can handle systems of ODEs as well as scalar ODEs. In the code below notice that we plot x[:,0] instead of just x. This is overkill in the case of a scalar ODE, but in a system of ODEs this will be important.\nYou have to specify the array of time for the scipy.integrate.odeint() function. It is typically easiest to use np.linspace() to build the array of times.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.integrate\nf = lambda x, t: -(1/3.0)*x + np.sin(t)\nx0 = 1\nt = np.linspace(0,5,1000)\nx = scipy.integrate.odeint(f,x0,t)\nplt.plot(t,x[:,0],'b--')\nplt.grid()\nplt.show()\nNow let us consider the system of ODEs \\[\\begin{equation}\n\\begin{aligned} x' &= y \\\\ y' &= -by - c \\sin(x). \\end{aligned}\n\\end{equation}\\] In this ODE \\(x(t)\\) is the angle from equilibrium of a pendulum, and \\(y(t)\\) is the angular velocity of the pendulum. To solve this ODE with scipy.integrate.odeint() using the parameters \\(b=0.25\\) and \\(c=5\\) and the initial conditions \\(x(0) = \\pi-0.1\\) and \\(y(0) = 0\\) we can use the code below. (The idea to use this ODE was taken from the documentation page for scipy.integrate.odeint().)\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.integrate\nF = lambda x, t, b, c: [x[1] , -b*x[1] - c*np.sin(x[0])]\nx0 = [np.pi - 0.1 , 0]\nt = np.linspace(0,10,1000)\nb = 0.25\nc = 5\nx = scipy.integrate.odeint(F, x0, t, args=(b, c))\nplt.plot(t,x[:,0],'b',t,x[:,1],'r')\nplt.grid()\nplt.show()\nYour Tasks:\n\nFirst implement the two blocks of Python code given above. Be sure to understand what each line of code is doing. Fully comment your code, and then try the code with several different initial conditions.\nFor the pendulum system be sure to describe what your initial conditions mean in the physical setup.\nUse scipy.integrate.odeint() to solve a non-trivial scalar ODE of your choosing. Clearly show your ODE and give plots of your solutions with several different initial conditions.\nBuild a numerical experiment to determine the relationship between your choice of \\(\\Delta t\\) and the absolute maximum error between the solution from .odeint() and a known analytic solution to a scalar ODE. Support your work with appropriate plots and discussion.\nSolve the system of differential equations from Exercise 6.63 using scipy.integrate.odeint(). Show appropriate plots of your solution.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Ordinary Differential Equations</span>"
    ]
  },
  {
    "objectID": "nmODE.html#projects",
    "href": "nmODE.html#projects",
    "title": "6  Ordinary Differential Equations",
    "section": "6.9 Projects",
    "text": "6.9 Projects\nIn this section we propose several ideas for projects related to numerical ordinary differential equations. These projects are meant to be open ended, to encourage creative mathematics, to push your coding skills, and to require you to write and communicate your mathematics.\n\n6.9.1 The COVID-19 Pandemic\nIn the paper Modeling the COVID-19 epidemic and implementation of population-wide interventions in Italy, by G. Giordana et al., the authors propose a robust extension to the SIR model, which they call the “SIDARTHE” model, to model the spread of the COVID-19 virus in Italy. The acronym stands for\n\n\\(S=\\) proportion of the population which is Susceptible.\n\\(I=\\) proportion of the population which is presently Infected. Asymptomatic, infected, and undetected.\n\\(D=\\) proportion of the population which has been Diagnosed. Asymptomatic, infected, and detected.\n\\(A=\\) proportion of the population which is Ailing. Symptomatic, infected, and undetected.\n\\(R=\\) proportion of the population which is Recognized. Symptomatic, infected, and detected.\n\\(T=\\) proportion of the population which is Threatened. Acutely symptomatic, infected, and detected.\n\\(H=\\) proportion of the population which is Healed.\n\\(E=\\) proportion of the population which is Extinct.\n\nIn the Methods section of the paper (in the paragraph that begins with “In particular, …”) the authors propose initial conditions and values for all of the parameters in the model. Using these values create a numerical solution to the system of differential equations and verify that the basic reproduction number for the model is \\(R_0 = 2.38\\) as the authors say. In the subsequent paragraphs the authors propose ways to modify the parameters to account for social distancing, stay at home orders, and other such measures. Reproduce the authors’ results from these paragraphs and fully explain all of your work. Provide sufficient plots to show the dynamics of the situation.\n\n\n6.9.2 Pain Management\nWhen a patient undergoing surgery is asked about their pain the doctors often ask patients to rate their pain on a subjective 0 to 10 scale with 0 meaning no pain and 10 meaning excruciating pain. After surgery the unmitigated pain level in a typical patient will be quite high and as such doctors typically treat with narcotics. A mathematical model (inspired by THIS article and THIS paper) of a patient’s subjective pain level as treated pharmaceutically by three drugs is given as: \\[\\begin{equation}\n\\begin{aligned} \\frac{dP}{dt} &= - \\left( k_0 + k_1 D_1 + k_2 D_2 +k_3 D_3\\right)P + k_0 u \\\\ \\frac{dD_1}{dt} &= -k_{D_1} D_1 + \\sum_{j=1}^{N_1} \\delta (t-\\tau_{1,j}) \\\\ \\frac{dD_2}{dt} &= -k_{D_2} D_2 + \\sum_{j=1}^{N_2} \\delta (t-\\tau_{2,j}) \\\\ \\frac{dD_3}{dt} &= -k_{D_3} D_3 + \\sum_{j=1}^{N_3} \\delta (t-\\tau_{3,j}) \\end{aligned}\n\\end{equation}\\] where\n\n\\(P\\) is a patient’s subjective pain level on a 0 to 10 scale,\n\\(D_i\\) is the amount of the \\(i^{th}\\) drug in the patient’s bloodstream,\n\n\\(D_1\\) is a long-acting opioid\n\\(D_2\\) is a short-acting opioid\n\\(D_3\\) is a non-opioid\n\n\\(k_0\\) is the relaxation rate to baseline pain without drugs,\n\\(k_i\\) is the impact of the \\(i^{th}\\) drug on the relaxation rate,\n\\(u\\) is the patient’s baseline (unmitigated) pain,\n\\(k_{D_i}\\) is the elimination rate of the \\(i^{th}\\) drug from the bloodstream,\n\\(N_i\\) is the total number of the \\(i^{th}\\) drug doses taken, and\n\\(\\tau_{i,j}\\) are the time times the patient takes the \\(i^{th}\\) drug.\n\\(\\delta()\\) is the Dirac delta function.\n\nImplement this model with parameters \\(u=8.01\\), \\(k_0 = \\log(2)/2\\), \\(k_1 = 0.319\\), \\(k_2 = 0.184\\), \\(k_3 = 0.201\\), \\(k_{D_1} = \\log(0.5)/(-10)\\), \\(k_{D_2} = \\log(0.5)/(-4)\\), and \\(k_{D_3} = \\log(0.5)/(-4)\\). Take the initial pain level to be \\(P(0) = 3\\) with no drugs on board. Assume that the patient begins dosing the long-acting opioid at hour 2 and takes 1 dose periodically every 24 hours. Assume that the patient begins dosing the short-acting opioid at hour 0 and takes 1 dose periodically every 12 hours. Finally assume that the patient takes 1 dose of the non-opioid drug every 48 hours starts at hour 24. Of particular interest are how the pain level evolves over the first week out of surgery and how the drug concentrations evolve over this time.\nOther questions:\n\nWhat does this medication schedule do to the patient’s pain level?\nWhat happens to the patient’s pain level if he/she forgets the non-opioid drug?\nWhat happens to the patient’s pain level if he/she has a bad reaction to opioids and only takes the non-opioid drug?\nWhat happens to the dynamics of the system if the patient’s pain starts at 9/10?\nIn reality, the unmitigated pain \\(u\\) will decrease in time. Propose a differential equation model for the unmitigated pain that will have a stable equilibrium at 3 and has a value of 5 on day 5. Add this fifth differential equation to the pain model and examine what happens to the patient’s pain over the first week. In this model, what happens after the first week if the narcotics are ceased?\n\n\n\n6.9.3 The H1N1 Virus\nThe H1N1 virus, also known as the “bird flu,” is a particularly virulent bug but thankfully is also very predicable. Once a person is infected they are infectious for 9 days. Assume that a closed population of \\(N = 1500\\) people (like a small college campus) starts with exactly 1 infected person and hence the remainder of the population is considered susceptible to the virus. Furthermore, once a person is recovered they have an immunity that typically lasts longer than the outbreak. Mathematically we can model an H1N1 outbreak of this kind using 11 compartments: susceptible people (\\(S\\)), 9 groups of infected people (\\(I_j\\) for \\(j=1, 2, \\cdots, 9\\)), and recovered people (\\(R\\)). Write and numerically solve a system of 11 differential equations modelling the H1N1 outbreak assuming that susceptible people become infected at a rate proportional to the product of the number of susceptible people and the total number of infected people. You may assume that the initial infected person is on the first day of their infection and determine and unknown parameters using the fact that 1 week after the infection starts there are 10 total people infected.\n\n\n6.9.4 The Artillery Problem\nThe goal of artillery is to fire a shell (e.g. a cannon ball) so that it lands on a specific target. If we ignore the effects of air resistance the differential equations describing its acceleration are very simple: \\[\\begin{equation}\n\\begin{aligned} \\frac{dv_x}{dt} = 0 \\quad \\text{and} \\quad \\frac{dv_z}{dt} = -g \\label{eqn:no-air-res}\\end{aligned}\n\\end{equation}\\] where \\(v_x\\) and \\(v_z\\) are the velocities in the \\(x\\) and \\(z\\) directions respectively and \\(g\\) is the acceleration due to gravity (\\(g = 9.8\\) m/s\\(^2\\)). We can use these equations to easily show that the resulting trajectory is parabolic. Once we know this we can easily calculate the initial speed \\(v_0\\) and angle \\(\\theta_0\\) above the horizontal necessary for the shell to reach the target. We will undoubtedly find that the maximum range will always result from an angle of \\(\\theta_0 = 45^\\circ\\).\nThe effects of air resistance are significant when the shell must travel a large distance or when the speed is large. If we modify the equations to include a simple model of air resistance the governing equations become \\[\\begin{equation}\n\\begin{aligned} \\frac{dv_x}{dt} = -c v_x \\sqrt{ v_x^2 + v_z^2} \\quad \\text{and} \\quad \\frac{dv_z}{dt} = -g - cv_z \\sqrt{ v_x^2 + v_z^2} \\label{eqn:with-air-res}\\end{aligned}\n\\end{equation}\\] where the constant \\(c\\) depends on the shape and density of the shell and the density of air. For this project assume that \\(c = 10^{-3} m^{-1}\\). To calculate the components of the position vector recall that since the derivative of position, \\(s(t)\\), is velocity we have \\[\\begin{equation}\n\\begin{aligned} s_x(t) = \\int_0^t v_x(\\tau) d\\tau \\quad \\text{and} \\quad s_z(t) = \\int_0^t v_z(\\tau) d\\tau.\\end{aligned}\n\\end{equation}\\]\nNow, imagine that you are living 200 years ago, acting as a consultant to an artillery officer who will be going into battle (perhaps against Napoleon – he was known for hiring mathematicians to help his war efforts). Although computers have not yet been invented, given a few hours or a few days to work, a person living in this time could project trajectories using numerical methods (yes, numerical solutions to differential equations were well known back then too). Using this, you can try various initial speeds \\(v_0\\) and angles \\(\\theta_0\\) until you find a pair that reach any target. However, the artillery officer needs a faster and simpler method. He can do maths, but performing hundreds or thousands of numerical calculations on the battlefield is simply not practical. Suppose that our artillery piece will be firing at a target that is a distance \\(\\Delta x\\) away, and that \\(\\Delta x\\) is approximately half a mile away – not exactly half a mile, but in that general neighbourhood.\n\nDevelop a method for estimating \\(v_0\\) and \\(\\theta_0\\) with reasonable accuracy given the exact range to the target, \\(\\Delta x\\). Your method needs to be simple enough to use in real time on a historic (Napoleon-era) battle field without the aid of a computer. (Be sure to persuade me that your numerical solution is accurate enough.)\nDiscuss the sensitivity in your solutions to variations in the constant \\(c\\).\nExtend this problem to make it more realistic. A few possible extensions are listed below but please do not restrict yourselves just to this list and do not think that you need to do everything on the list.\n\nYou could consider the effects of targets at different altitudes \\(\\Delta z\\).\nYou could consider moving targets.\nYou could consider headwinds and/or tailwinds.\nYou could consider winds coming from an angle outside the \\(xz\\)-plane.\nYou could consider shooting the cannon from a boat with the target on shore (the waves could be interesting!).\n…You could consider any other physical situation which I have not listed here, but you have to do some amount of extension from the basics.\n\n\nThe final product of this project will be:\n\na technical paper describing your method to a mathematically sophisticated audience, and\na field manual instructing the artillery officer how to use your method.\n\nYou can put both products in one paper. Just use a section header to start the field manual.\n\n\n\n\nJesica Bauer, Eric Sullivan, and Erica Wiens. 2022. “1-094-SteepingTea-ModelingScenario.” https://doi.org/doi:/10.25334/Q15E-XK35.\n\n\nMeerschaert, Mark. 2013. Mathematical Modeling. 4th edition. Amsterdam ; Boston: Academic Press.\n\n\nMiller, Sheila. 2022. “6-001-Epidemic-ModelingScenario.” https://doi.org/doi:/10.25334/N6DF-2J82.\n\n\nSpindler, Richard. 2022. “6-023-DroneHeadingHome-ModelingScenario.” https://doi.org/doi:/10.25334/F80X-6R33.\n\n\nWinkel, Brian. 2023. “6-004-VillageEpidemic-ModelingScenario.” https://doi.org/doi:/10.25334/JQ1A-N963.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Ordinary Differential Equations</span>"
    ]
  },
  {
    "objectID": "nmODE.html#footnotes",
    "href": "nmODE.html#footnotes",
    "title": "6  Ordinary Differential Equations",
    "section": "",
    "text": "If you do not know the solution to Newton’s Law of Cooling then take a moment and do the separation of variables to solve for \\(T(t)\\).↩︎",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Ordinary Differential Equations</span>"
    ]
  }
]